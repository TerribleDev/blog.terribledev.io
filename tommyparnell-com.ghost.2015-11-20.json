{"db":[{"meta":{"exported_on":1448042167776,"version":"004"},"data":{"posts":[{"id":2,"uuid":"babc4a9c-306a-447b-b31f-01dec49e33fd","title":"...A blog about technology, how original(not)!","slug":"-a-blog-about-technology-how-originalnot","markdown":"#### Introduction (who am I?)\nHello, Tommy here. I work at [vistaprint](http://vistaprint.com). I spend most of my time monitoring a website, writing internal tools, and doing things some would consider \"Devops\".\n\nI'm not very qualified as a blogger, quite frankly my English skills are terrible.\n\nMy perspective is not very unique at this point. The industry is full of developer/sysadmin employees, and devops has become an industry movement. This movement has created in my opinion a 'trendy effect' to what some would consider little more than a buzz word.\n\n\n#### DevOps the modern exorcist?\n\n\n Many years ago the catholic church would perform exorcisms on people whom they deemed to be possessed by the devil. The people who would do these works, were not high up in the ranks of the church. However the work they did both mysterious, and possibly dangerous is at the same time totally enticing. This lead to the popularization of what we see now as an exorcist.\n \n Currently DevOps is starting to take on the same popularity. The chance to tackle a problem such as proper monitoring, task automation, etc. really seems sexy to other developers. Having to work on the same website, or the same payments system every day, becomes tedious. However, coming into the office and tackling real infrastructure problems, at break neck speed is   very desirable for traditional developers. People must understand, that DevOps personnel are not far superior than sysadmin/developer/qa, but simply tackling 3 jobs at the same time. \n\n\n#### Technology today, and Service Oriented Arch.\n\nCurrently, the industry is making the transition from traditional monolithic infrastructures, to a more services based world. If you are working at an indie start-up, or a big company that really planned ahead, you are probably thinking **that I am blogging in the past**. We have all heard the [success stories ](https://engineering.groupon.com/2013/node-js/geekon-i-tier/), however with each success there are 5 failures you didn't know about (90% of statistics made up), and some companies are starting to feel the pains of moving both culturally, and technologically to a service world. The obvious problem is that the **traditional way of doing things cannot continue**, but the movement of change can kill an organization just as fast.\n\n\n#### So what makes you so qualified to talk on these topics?\n\nNothing really, most of this blog will be ranting about things I dislike, or pointing out not so interesting things about Computers. I'm not much of a business leader, and unfortunatly for the readers of this blog I am one of those sysadmin's whom thinks they can code. I hope some of you find my perspective useful, and feel free to leave comments at will.","html":"<h4 id=\"introductionwhoami\">Introduction (who am I?)</h4>\n\n<p>Hello, Tommy here. I work at <a href=\"http://vistaprint.com\">vistaprint</a>. I spend most of my time monitoring a website, writing internal tools, and doing things some would consider \"Devops\".</p>\n\n<p>I'm not very qualified as a blogger, quite frankly my English skills are terrible.</p>\n\n<p>My perspective is not very unique at this point. The industry is full of developer/sysadmin employees, and devops has become an industry movement. This movement has created in my opinion a 'trendy effect' to what some would consider little more than a buzz word.</p>\n\n<h4 id=\"devopsthemodernexorcist\">DevOps the modern exorcist?</h4>\n\n<p>Many years ago the catholic church would perform exorcisms on people whom they deemed to be possessed by the devil. The people who would do these works, were not high up in the ranks of the church. However the work they did both mysterious, and possibly dangerous is at the same time totally enticing. This lead to the popularization of what we see now as an exorcist.</p>\n\n<p>Currently DevOps is starting to take on the same popularity. The chance to tackle a problem such as proper monitoring, task automation, etc. really seems sexy to other developers. Having to work on the same website, or the same payments system every day, becomes tedious. However, coming into the office and tackling real infrastructure problems, at break neck speed is   very desirable for traditional developers. People must understand, that DevOps personnel are not far superior than sysadmin/developer/qa, but simply tackling 3 jobs at the same time. </p>\n\n<h4 id=\"technologytodayandserviceorientedarch\">Technology today, and Service Oriented Arch.</h4>\n\n<p>Currently, the industry is making the transition from traditional monolithic infrastructures, to a more services based world. If you are working at an indie start-up, or a big company that really planned ahead, you are probably thinking <strong>that I am blogging in the past</strong>. We have all heard the <a href=\"https://engineering.groupon.com/2013/node-js/geekon-i-tier/\">success stories </a>, however with each success there are 5 failures you didn't know about (90% of statistics made up), and some companies are starting to feel the pains of moving both culturally, and technologically to a service world. The obvious problem is that the <strong>traditional way of doing things cannot continue</strong>, but the movement of change can kill an organization just as fast.</p>\n\n<h4 id=\"sowhatmakesyousoqualifiedtotalkonthesetopics\">So what makes you so qualified to talk on these topics?</h4>\n\n<p>Nothing really, most of this blog will be ranting about things I dislike, or pointing out not so interesting things about Computers. I'm not much of a business leader, and unfortunatly for the readers of this blog I am one of those sysadmin's whom thinks they can code. I hope some of you find my perspective useful, and feel free to leave comments at will.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392588837172,"created_by":1,"updated_at":1392920140702,"updated_by":1,"published_at":1392611673264,"published_by":1},{"id":4,"uuid":"bbed0254-7ebc-47df-9e68-c21294810c41","title":"About","slug":"about","markdown":"I work at vistaprint where I work on our Gallery and keyword search platform. I often do DevOps type things while trying to avoid using the word DevOps.\n\n![](/content/images/2014/Apr/MTA_2013-rgb-_1427.png) <a href=\"http://www.linkedin.com/pub/tommy-parnell/24/722/63a\">\n<img src=\"https://static.licdn.com/scds/common/u/img/webpromo/btn_myprofile_160x33.png\" width=\"160\" height=\"33\" border=\"0\" alt=\"View Tommy Parnell's profile on LinkedIn\">     \n</a>","html":"<p>I work at vistaprint where I work on our Gallery and keyword search platform. I often do DevOps type things while trying to avoid using the word DevOps.</p>\n\n<p><img src=\"/content/images/2014/Apr/MTA_2013-rgb-_1427.png\" alt=\"\" title=\"\" /> <a href=\"http://www.linkedin.com/pub/tommy-parnell/24/722/63a\">\n<img src=\"https://static.licdn.com/scds/common/u/img/webpromo/btn_myprofile_160x33.png\" width=\"160\" height=\"33\" border=\"0\" alt=\"View Tommy Parnell's profile on LinkedIn\"> <br />\n</a></p>","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392599342836,"created_by":1,"updated_at":1439145709500,"updated_by":1,"published_at":1392599342848,"published_by":1},{"id":5,"uuid":"395b47a0-d3ca-41fb-924c-99a85dc7c93c","title":"You're doing it wrong! (Recruiter Edition)","slug":"youre-doing-it-wrong-recruiter-edition","markdown":"Recruiting, I am sure is a tough job (I wouldn't actually know), but often being on the other end I see pitfalls that a lot of recruiters fall into. So for all of you recruiters, please do not do these things.\n\n### The Linkedin Summary\n\nWe all know that a major way to find candidates is through social media, the top one is [Linkedin](http://linkedin.com). Linkedin allows you to instantly find candidates that have the skills you are looking for. \n\nIn Linkedin the summary is really a place for a person to express who they are, where they would like to be in 5 years, and how they wish to get there. This is usually a good place where people leave information for recruiters. \n\nIf you find a candidate with qualifications that are suitable, spend the 5 minutes to read their summary. Their summary could include information that will help in your efforts to recruit this person. Showing that you spent the few minutes to read their summary in your initial contact message will go far. Ignoring their summary will most certainly be your recruitment downfall.\n\n\n### The Problem\n\nAt the end of the day, a developer wants to solve a problem. Developers want to solve interesting problems, or problems which not many people can solve. Sending an email saying *hey im looking for xyz candidate with experience in ruby* will probably not get much attention.\n\nThink for a moment about why you are hiring someone. You hire people, because your company has a problem, and that problem needs to be solved. \n\nSending an email stating a problem you have, and why you need this person to help solve it, will ultimately prove better than a list of standard qualifications necessary for the position.\n\nUltimately you should try to get them excited to work at your company. Free beer, and pizza is not a recruiting tool, just a way to disguise what could be a poor environment to work in.\n\n### First Contact\n\n{<1>}![First Contact](/content/images/2014/Feb/968full_star_trek__first_contact_screenshot.jpg)\n\n####Do\n* Address the candidate with the name they have listed on websites/resumes\n* Present clearly what you are looking for, and what you are not looking for\n* Ask them what their future goals are\n* Ask them if they know anyone whom would be interested (if they are not)\n* Tell them why your company is worth working for. Be honest, provide stories from your own experiences\n* Be honest about the job, they will leave if they find out it was not what you said it was\n\n\n####Don'ts\n* Assume their name is a nickname (ex. addressing someone named Dave, as David)\n* Contact someone asking for qualifications that are clearly not listed on their resume\n* Being unprepared during an interview (phone or otherwise)\n* Sell them your company with offers of free gifts (both before, and during employment)\n\n...and if they turn you down, be polite. Leave a lasting impression. You only get one shot to show your organizations value. Even if they turn you down, they may refer others to you.","html":"<p>Recruiting, I am sure is a tough job (I wouldn't actually know), but often being on the other end I see pitfalls that a lot of recruiters fall into. So for all of you recruiters, please do not do these things.</p>\n\n<h3 id=\"thelinkedinsummary\">The Linkedin Summary</h3>\n\n<p>We all know that a major way to find candidates is through social media, the top one is <a href=\"http://linkedin.com\">Linkedin</a>. Linkedin allows you to instantly find candidates that have the skills you are looking for. </p>\n\n<p>In Linkedin the summary is really a place for a person to express who they are, where they would like to be in 5 years, and how they wish to get there. This is usually a good place where people leave information for recruiters. </p>\n\n<p>If you find a candidate with qualifications that are suitable, spend the 5 minutes to read their summary. Their summary could include information that will help in your efforts to recruit this person. Showing that you spent the few minutes to read their summary in your initial contact message will go far. Ignoring their summary will most certainly be your recruitment downfall.</p>\n\n<h3 id=\"theproblem\">The Problem</h3>\n\n<p>At the end of the day, a developer wants to solve a problem. Developers want to solve interesting problems, or problems which not many people can solve. Sending an email saying <em>hey im looking for xyz candidate with experience in ruby</em> will probably not get much attention.</p>\n\n<p>Think for a moment about why you are hiring someone. You hire people, because your company has a problem, and that problem needs to be solved. </p>\n\n<p>Sending an email stating a problem you have, and why you need this person to help solve it, will ultimately prove better than a list of standard qualifications necessary for the position.</p>\n\n<p>Ultimately you should try to get them excited to work at your company. Free beer, and pizza is not a recruiting tool, just a way to disguise what could be a poor environment to work in.</p>\n\n<h3 id=\"firstcontact\">First Contact</h3>\n\n<p><img src=\"/content/images/2014/Feb/968full_star_trek__first_contact_screenshot.jpg\" alt=\"First Contact\" /></p>\n\n<h4 id=\"do\">Do</h4>\n\n<ul>\n<li>Address the candidate with the name they have listed on websites/resumes</li>\n<li>Present clearly what you are looking for, and what you are not looking for</li>\n<li>Ask them what their future goals are</li>\n<li>Ask them if they know anyone whom would be interested (if they are not)</li>\n<li>Tell them why your company is worth working for. Be honest, provide stories from your own experiences</li>\n<li>Be honest about the job, they will leave if they find out it was not what you said it was</li>\n</ul>\n\n<h4 id=\"donts\">Don'ts</h4>\n\n<ul>\n<li>Assume their name is a nickname (ex. addressing someone named Dave, as David)</li>\n<li>Contact someone asking for qualifications that are clearly not listed on their resume</li>\n<li>Being unprepared during an interview (phone or otherwise)</li>\n<li>Sell them your company with offers of free gifts (both before, and during employment)</li>\n</ul>\n\n<p>...and if they turn you down, be polite. Leave a lasting impression. You only get one shot to show your organizations value. Even if they turn you down, they may refer others to you.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392617308296,"created_by":1,"updated_at":1392893765423,"updated_by":1,"published_at":1392620206751,"published_by":1},{"id":6,"uuid":"6c9ed978-a3bd-4005-9592-13ed215efbbd","title":"Xamarin For Android The Good: (Part 1 of 4)","slug":"xamarin-the-good-the-bad-and-the-ugly","markdown":"## Introduction\n\n* Part One\n* [Part Two](http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/)\n* [Part Three](https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/)\n* [Part Four](https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/)\n\nThis will be a series of blog entries where I discuss the Xamarin platform for Android.\n\nI really enjoy C# programming language *(JavaScript second)*....Linq, Generics, anonymous methods, and Visual Studio are just some of the reasons I like it. [Xamarin](http://xamarin.com/) is a platform that gives you the ability you to write Android applications in c#.\n\nWhen I heard about [Xamarin](http://xamarin.com/) I naturally, wanted to give it a shot. Having tried Eclipse, and Android Studio for android development I was no idiot when it came to the platform. So I got a license, and did nothing with it for six months, until a few weeks ago. After only 3 days I created [Ultimate Gravatar Sync](https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree). An app that sync's your contacts gravatar images to their picture in your phone.\n\n## C# with no compromise\nThe [Xamarin](http://xamarin.com/) platform uses mono, and some kind of voodoo bindings to the Java libraries to make it work. I wont go in depth, but the native features of the C# language are there to use. I never felt like my hands had been tied, that all of a sudden I couldn't use a library that is normally part of the [GAC](http://msdn.microsoft.com/en-us/library/yf1d93sz(v=vs.110).aspx) (Global Assembly Cache). When I needed multi-threading, System.Threading was there, and when I needed to use C# Generics I had no issues implementing them.\n\n{<1>}![Xamarin execution](/content/images/2014/Feb/architecture1.png)\n\n## Manage Android Manifest files\nOne of the things that blew me away about the platform, was that I never had to add anything to my manifest file. For those of you whom don't know, Android requires an XML config detailing the permissions you require, and the classes you have in your application.\n\nSimple decoration such as:\n\n\n\n```c#\n[Activity(Label = \"Label\", MainLauncher = true, Icon = \"@drawable/Icon\")]\n```\n\nWill Generate in your manifest file as:\n\n<pre>\n< activity\nandroid:label=\"Label\"\n             android:name=\".logoActivity\" >\n            < intent-filter >\n                < action android:name=\"android.intent.action.MAIN\" />\n                < category android:name=\"android.intent.category.LAUNCHER\" />\n            < /intent-filter>\n        < /activity>\n    </pre>\nAdding permissions is also easy:\n\n```c#\n[assembly: UsesPermission(Android.Manifest.Permission.Internet)]\n```\n\n\n## Using Java Libraries\n[Xamarin](http://xamarin.com/) provides some kind of crazy visual studio project, that will essentially provide c# bindings to Java libraries you require. To bind Simply create a Java Binding project, adding the .Jar files, and then build. Watch the magic happen. They do [note](http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)/) that you sometimes need to do some configuration for certain libraries, however I had no issues with the one I tried. On top of that if you really needed to, you could access the [Java Native Interface](http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/working_with_jni/) for even more power.","html":"<h2 id=\"introduction\">Introduction</h2>\n\n<ul>\n<li>Part One</li>\n<li><a href=\"http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/\">Part Two</a></li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/\">Part Three</a></li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/\">Part Four</a></li>\n</ul>\n\n<p>This will be a series of blog entries where I discuss the Xamarin platform for Android.</p>\n\n<p>I really enjoy C# programming language <em>(JavaScript second)</em>....Linq, Generics, anonymous methods, and Visual Studio are just some of the reasons I like it. <a href=\"http://xamarin.com/\">Xamarin</a> is a platform that gives you the ability you to write Android applications in c#.</p>\n\n<p>When I heard about <a href=\"http://xamarin.com/\">Xamarin</a> I naturally, wanted to give it a shot. Having tried Eclipse, and Android Studio for android development I was no idiot when it came to the platform. So I got a license, and did nothing with it for six months, until a few weeks ago. After only 3 days I created <a href=\"https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree\">Ultimate Gravatar Sync</a>. An app that sync's your contacts gravatar images to their picture in your phone.</p>\n\n<h2 id=\"cwithnocompromise\">C# with no compromise</h2>\n\n<p>The <a href=\"http://xamarin.com/\">Xamarin</a> platform uses mono, and some kind of voodoo bindings to the Java libraries to make it work. I wont go in depth, but the native features of the C# language are there to use. I never felt like my hands had been tied, that all of a sudden I couldn't use a library that is normally part of the <a href=\"http://msdn.microsoft.com/en-us/library/yf1d93sz(v=vs.110).aspx\">GAC</a> (Global Assembly Cache). When I needed multi-threading, System.Threading was there, and when I needed to use C# Generics I had no issues implementing them.</p>\n\n<p><img src=\"/content/images/2014/Feb/architecture1.png\" alt=\"Xamarin execution\" /></p>\n\n<h2 id=\"manageandroidmanifestfiles\">Manage Android Manifest files</h2>\n\n<p>One of the things that blew me away about the platform, was that I never had to add anything to my manifest file. For those of you whom don't know, Android requires an XML config detailing the permissions you require, and the classes you have in your application.</p>\n\n<p>Simple decoration such as:</p>\n\n<pre><code class=\"c#\">[Activity(Label = \"Label\", MainLauncher = true, Icon = \"@drawable/Icon\")]\n</code></pre>\n\n<p>Will Generate in your manifest file as:</p>\n\n<pre>\n< activity\nandroid:label=\"Label\"\n             android:name=\".logoActivity\" >\n            < intent-filter >\n                < action android:name=\"android.intent.action.MAIN\" />\n                < category android:name=\"android.intent.category.LAUNCHER\" />\n            < /intent-filter>\n        < /activity>\n    </pre>\n\n<p>Adding permissions is also easy:</p>\n\n<pre><code class=\"c#\">[assembly: UsesPermission(Android.Manifest.Permission.Internet)]\n</code></pre>\n\n<h2 id=\"usingjavalibraries\">Using Java Libraries</h2>\n\n<p><a href=\"http://xamarin.com/\">Xamarin</a> provides some kind of crazy visual studio project, that will essentially provide c# bindings to Java libraries you require. To bind Simply create a Java Binding project, adding the .Jar files, and then build. Watch the magic happen. They do <a href=\"http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)/\">note</a> that you sometimes need to do some configuration for certain libraries, however I had no issues with the one I tried. On top of that if you really needed to, you could access the <a href=\"http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/working_with_jni/\">Java Native Interface</a> for even more power.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392706716398,"created_by":1,"updated_at":1393307399649,"updated_by":1,"published_at":1392709979703,"published_by":1},{"id":7,"uuid":"d8defcce-3ff4-4184-a97b-ec46b8d7eb28","title":"Xamarin For Android The Bad: (Part 2 of 4)","slug":"xamarin-for-android-the-bad-part-2-of-4","markdown":"* [Part One](https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/)\n* Part Two\n* [Part Three](https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/)\n* [Part Four](https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/)\n\n[Xamarin](http://xamarin.com/) is a very good platform, but like everything it has parts that are not so great.\n\n## Documentation\n\nOne thing that was really hard for me, was to find documentation that was newer than 2012. Android has made great strides with Ice Cream Sandwich, and Jelly Bean. New features such as [fragments](http://developer.android.com/guide/components/fragments.html) have breathed life into the platform.\n\nThe [Xamarin](http://xamarin.com/) documentation provides examples even with the newest features, but there is something about it that feels lacking. Almost like it was thrown together at the last minute. They have been doing webcasts to improve the knowledge out in the wild, but googling the answer to your problem just won't do. Part of the problem is that most developers write in Java, and only bigger companies can afford the [hefty license fees](https://store.xamarin.com/) that come with full support.\n\nThe user community was helpful at times, but I often found myself wandering though [GitHub](http://github.com) hoping my answer could be found in some mystical repo; Eventually having to study the full implementation to find the answer I needed.\n\n## Finding help\n\nAlthough [Xamarin](http://xamarin.com) has a forum where helpful users help each other, there are not nearly as many people coding on [Xamarin](http://xamarin.com) than regular Java. Figuring out how to get something complicated working, was a nightmare. I'd look at a Java implementation, and then try to translate it into its [Xamarin](http://xamarin.com) counterpart, which sometimes was far removed than the Java code. There are some examples of [Xamarin](http://xamarin.com) for android out there, but nothing that really delves deep into manipulating the inner workings of the phone. I saw this especially when trying to edit contacts programatically. [Xamarin](http://xamarin.com) support seemed helpful, but far too expensive for most freelance developers. This was a pretty huge put-off. If I went the Java route my questions would be answered with a simple search of [stack overflow](http://stackoverflow.com).\n\n## Boilerplate\n\nLike most things Java, Android requires a lot of boilerplate. For a developer like myself, whom avoids Java this was a problem. I would have thought that [Xamarin](http://xamarin.com/) would have abstracted out more of the boilerplate than they did. On the one had, having my code look somewhat familiar when I see Java examples was nice, but on the other hand because the API is still different often the Java versions would not be close enough to fully help. My main problem with this, is if I really wanted to write boilerplate I would have used the Java libraries myself. They did make a start for this by generating the manifest file automatically, but I feel it needs to go further to fully mature this platform as a viable alternative to Java.\n\n","html":"<ul>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/\">Part One</a></li>\n<li>Part Two</li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/\">Part Three</a></li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/\">Part Four</a></li>\n</ul>\n\n<p><a href=\"http://xamarin.com/\">Xamarin</a> is a very good platform, but like everything it has parts that are not so great.</p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>One thing that was really hard for me, was to find documentation that was newer than 2012. Android has made great strides with Ice Cream Sandwich, and Jelly Bean. New features such as <a href=\"http://developer.android.com/guide/components/fragments.html\">fragments</a> have breathed life into the platform.</p>\n\n<p>The <a href=\"http://xamarin.com/\">Xamarin</a> documentation provides examples even with the newest features, but there is something about it that feels lacking. Almost like it was thrown together at the last minute. They have been doing webcasts to improve the knowledge out in the wild, but googling the answer to your problem just won't do. Part of the problem is that most developers write in Java, and only bigger companies can afford the <a href=\"https://store.xamarin.com/\">hefty license fees</a> that come with full support.</p>\n\n<p>The user community was helpful at times, but I often found myself wandering though <a href=\"http://github.com\">GitHub</a> hoping my answer could be found in some mystical repo; Eventually having to study the full implementation to find the answer I needed.</p>\n\n<h2 id=\"findinghelp\">Finding help</h2>\n\n<p>Although <a href=\"http://xamarin.com\">Xamarin</a> has a forum where helpful users help each other, there are not nearly as many people coding on <a href=\"http://xamarin.com\">Xamarin</a> than regular Java. Figuring out how to get something complicated working, was a nightmare. I'd look at a Java implementation, and then try to translate it into its <a href=\"http://xamarin.com\">Xamarin</a> counterpart, which sometimes was far removed than the Java code. There are some examples of <a href=\"http://xamarin.com\">Xamarin</a> for android out there, but nothing that really delves deep into manipulating the inner workings of the phone. I saw this especially when trying to edit contacts programatically. <a href=\"http://xamarin.com\">Xamarin</a> support seemed helpful, but far too expensive for most freelance developers. This was a pretty huge put-off. If I went the Java route my questions would be answered with a simple search of <a href=\"http://stackoverflow.com\">stack overflow</a>.</p>\n\n<h2 id=\"boilerplate\">Boilerplate</h2>\n\n<p>Like most things Java, Android requires a lot of boilerplate. For a developer like myself, whom avoids Java this was a problem. I would have thought that <a href=\"http://xamarin.com/\">Xamarin</a> would have abstracted out more of the boilerplate than they did. On the one had, having my code look somewhat familiar when I see Java examples was nice, but on the other hand because the API is still different often the Java versions would not be close enough to fully help. My main problem with this, is if I really wanted to write boilerplate I would have used the Java libraries myself. They did make a start for this by generating the manifest file automatically, but I feel it needs to go further to fully mature this platform as a viable alternative to Java.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392710083192,"created_by":1,"updated_at":1396408681810,"updated_by":1,"published_at":1392778700920,"published_by":1},{"id":8,"uuid":"bab211a0-8784-4724-aeac-07bf396399d5","title":"Xamarin For Android The Ugly: (Part 3 of 4)","slug":"xamarin-for-android-the-ugly-part-3-of-4","markdown":"* [Part One](https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/)\n* [Part Two](http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/)\n* Part Three\n* [Part Four](https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/)\n\nI had some problems with Xamarin. Somethings are ugly, but with plastic surgery almost anything can become beautiful.\n\n## Components\n\nXamarin has its own software packages available for download. I tried a lot of them out, some were good others not so much. One of my biggest gripes was that Google Play Services currently has a [bug](http://stackoverflow.com/questions/20125720/xamarin-android-builds-deployments-are-very-slow-how-to-speed-them-up) that makes builds **really** slow. Other packages were either genius, or were simply unimpressive. The components have their own package manager, and it does do a decent job of keeping them in order. I have to admit though Xamarin has its own set of componants that do [in-app billing](http://components.xamarin.com/gettingstarted/xamarin.inappbilling), and [access phone data](http://components.xamarin.com/view/xamarin.mobile) without having to lift much of a finger.\n\n{<1>}![Moving at the build speed of Play Services](/content/images/2014/Feb/turtle_Alan_Rees.jpg)\n\n### Component Documentation\n\nA real put down is that only some of the components have adequate documentation. For instance for me to get [admob](http://www.google.com/ads/admob/) working with play services; I had to look at the Java documentation, and try to figure out how its supposed to be done on Xamarin. This wasn't to difficult, but admob is well used. I would have assumed the documentation would have covered it, but couldn't find anything.\n\n## Visual Studio Designer\n\nThe Visual studio designer for Android at first seemed like the best thing since sliced bread! I was able to get a UI up and running in no time. Making my app work for tablets, and mobile phones alike was simple. However, once in a while it would be stubborn, and stop working. I'm not sure if it was something I was doing, but I felt like it would bomb out and I would have to restore the XAML file to continue. \n\nThe editor really isn't great for designing ListViews, working with fragments, or making something that will scale easily. Often it made things exact pixel widths instead of using dots per inch. To keep it short, I still had to do plenty of editing of the source manually (which was not too bad). Making the theme stick on the default view was a pain, until I realized that I could ignore the editor, and decorate my MainActivity with the theme I wanted to use.\n\n<pre>[Activity(Label = \"Label\", MainLauncher = true, Icon = \"@drawable/Icon\", Theme = \"@android:style/Theme.Holo.Light\")]</pre>","html":"<ul>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/\">Part One</a></li>\n<li><a href=\"http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/\">Part Two</a></li>\n<li>Part Three</li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-conclusion-part-4-of-4/\">Part Four</a></li>\n</ul>\n\n<p>I had some problems with Xamarin. Somethings are ugly, but with plastic surgery almost anything can become beautiful.</p>\n\n<h2 id=\"components\">Components</h2>\n\n<p>Xamarin has its own software packages available for download. I tried a lot of them out, some were good others not so much. One of my biggest gripes was that Google Play Services currently has a <a href=\"http://stackoverflow.com/questions/20125720/xamarin-android-builds-deployments-are-very-slow-how-to-speed-them-up\">bug</a> that makes builds <strong>really</strong> slow. Other packages were either genius, or were simply unimpressive. The components have their own package manager, and it does do a decent job of keeping them in order. I have to admit though Xamarin has its own set of componants that do <a href=\"http://components.xamarin.com/gettingstarted/xamarin.inappbilling\">in-app billing</a>, and <a href=\"http://components.xamarin.com/view/xamarin.mobile\">access phone data</a> without having to lift much of a finger.</p>\n\n<p><img src=\"/content/images/2014/Feb/turtle_Alan_Rees.jpg\" alt=\"Moving at the build speed of Play Services\" /></p>\n\n<h3 id=\"componentdocumentation\">Component Documentation</h3>\n\n<p>A real put down is that only some of the components have adequate documentation. For instance for me to get <a href=\"http://www.google.com/ads/admob/\">admob</a> working with play services; I had to look at the Java documentation, and try to figure out how its supposed to be done on Xamarin. This wasn't to difficult, but admob is well used. I would have assumed the documentation would have covered it, but couldn't find anything.</p>\n\n<h2 id=\"visualstudiodesigner\">Visual Studio Designer</h2>\n\n<p>The Visual studio designer for Android at first seemed like the best thing since sliced bread! I was able to get a UI up and running in no time. Making my app work for tablets, and mobile phones alike was simple. However, once in a while it would be stubborn, and stop working. I'm not sure if it was something I was doing, but I felt like it would bomb out and I would have to restore the XAML file to continue. </p>\n\n<p>The editor really isn't great for designing ListViews, working with fragments, or making something that will scale easily. Often it made things exact pixel widths instead of using dots per inch. To keep it short, I still had to do plenty of editing of the source manually (which was not too bad). Making the theme stick on the default view was a pain, until I realized that I could ignore the editor, and decorate my MainActivity with the theme I wanted to use.</p>\n\n<pre>[Activity(Label = \"Label\", MainLauncher = true, Icon = \"@drawable/Icon\", Theme = \"@android:style/Theme.Holo.Light\")]</pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392711377666,"created_by":1,"updated_at":1392920128284,"updated_by":1,"published_at":1392889543578,"published_by":1},{"id":9,"uuid":"f27c5d1a-363b-4d68-b1ed-7e0799126e39","title":"Xamarin For Android The Conclusion: (Part 4 of 4)","slug":"xamarin-the-conclusion-part-4-of-4","markdown":"* [Part One](https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/)\n* [Part Two](http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/)\n* [Part Three](https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/)\n* Part Four\n\nWell verdict is in boys, and girls. Personally, I thought the platform needs to mature more. For those people who can pay for the business edition ($1000 USD/developer), and really prefer c#; then go for it. For most of us that can either do c# or Java; you may want to stick with Java. \n\n## C# vs. Java for Android\n\nEssentially [Xamarin](http://Xamarin.com)  is a competing product with using Java. I felt that the hefty price tag, and the lack of free support means the ROI for [Xamarin](http://Xamarin.com)  will be low.\n\n>If [Xamarin](http://Xamarin.com)  provided more in the way of automation tools, and documentation; it would be the clear winner\n\nThe fact is going straight to Java for most people is probably a must. Even if you are more comfortable with c#, finding help on the internet is much easier. As the platform matures, and more features are added hopefully things will change.\n\n## License cost deterrent\n\nOne of my biggest gripes with [Xamarin](http://Xamarin.com)  is the very inflexible [license schemes](https://store.xamarin.com/). You can get by with the $300 indie edition, but it is pretty clear they want people to go the $1000 business edition route.\n\n>The biggest deterrent to the [Xamarin](http://Xamarin.com)  platform is the high cost of licensing.\n\nWith no sliding scale prices based on organization size, or project scope [Xamarin](http://Xamarin.com)  is a tough sell *(especially for open source projects)*.\n\n### Student Discount\n\nXamarin, does provide a student discount. They give 90% off for enterprise edition, and for those of you whom go to school this is almost a must buy. You could probably make it back with this simple formula. \n\n>Flappy bird-like animal + Mario pipes + admob = $$$\n\n## Verdict\n\nPersonally I like [Xamarin](http://Xamarin.com)  platform. The ability to re-use code for multiple mobile platforms can be helpful. For most of us tinkerers out there [Android Studio](http://developer.android.com/sdk/installing/studio.html) is probably enough. For serious businesses, with a major focus on c#; [Xamarin](http://Xamarin.com)  is probably the prefered method of development.\n\n### Room for improvement\n\nBefore I can fully back [Xamarin](http://Xamarin.com)  I'd like to see better componants that provide more mobile platform abstraction, increased automation tools (visual studio macros could help here), and better documentation. From the activity of there web pages, I suspect all of these things are coming.","html":"<ul>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-the-good-the-bad-and-the-ugly/\">Part One</a></li>\n<li><a href=\"http://blog.tommyparnell.com/xamarin-for-android-the-bad-part-2-of-4/\">Part Two</a></li>\n<li><a href=\"https://blog.tommyparnell.com/xamarin-for-android-the-ugly-part-3-of-4/\">Part Three</a></li>\n<li>Part Four</li>\n</ul>\n\n<p>Well verdict is in boys, and girls. Personally, I thought the platform needs to mature more. For those people who can pay for the business edition ($1000 USD/developer), and really prefer c#; then go for it. For most of us that can either do c# or Java; you may want to stick with Java. </p>\n\n<h2 id=\"cvsjavaforandroid\">C# vs. Java for Android</h2>\n\n<p>Essentially <a href=\"http://Xamarin.com\">Xamarin</a>  is a competing product with using Java. I felt that the hefty price tag, and the lack of free support means the ROI for <a href=\"http://Xamarin.com\">Xamarin</a>  will be low.</p>\n\n<blockquote>\n  <p>If <a href=\"http://Xamarin.com\">Xamarin</a>  provided more in the way of automation tools, and documentation; it would be the clear winner</p>\n</blockquote>\n\n<p>The fact is going straight to Java for most people is probably a must. Even if you are more comfortable with c#, finding help on the internet is much easier. As the platform matures, and more features are added hopefully things will change.</p>\n\n<h2 id=\"licensecostdeterrent\">License cost deterrent</h2>\n\n<p>One of my biggest gripes with <a href=\"http://Xamarin.com\">Xamarin</a>  is the very inflexible <a href=\"https://store.xamarin.com/\">license schemes</a>. You can get by with the $300 indie edition, but it is pretty clear they want people to go the $1000 business edition route.</p>\n\n<blockquote>\n  <p>The biggest deterrent to the <a href=\"http://Xamarin.com\">Xamarin</a>  platform is the high cost of licensing.</p>\n</blockquote>\n\n<p>With no sliding scale prices based on organization size, or project scope <a href=\"http://Xamarin.com\">Xamarin</a>  is a tough sell <em>(especially for open source projects)</em>.</p>\n\n<h3 id=\"studentdiscount\">Student Discount</h3>\n\n<p>Xamarin, does provide a student discount. They give 90% off for enterprise edition, and for those of you whom go to school this is almost a must buy. You could probably make it back with this simple formula. </p>\n\n<blockquote>\n  <p>Flappy bird-like animal + Mario pipes + admob = $$$</p>\n</blockquote>\n\n<h2 id=\"verdict\">Verdict</h2>\n\n<p>Personally I like <a href=\"http://Xamarin.com\">Xamarin</a>  platform. The ability to re-use code for multiple mobile platforms can be helpful. For most of us tinkerers out there <a href=\"http://developer.android.com/sdk/installing/studio.html\">Android Studio</a> is probably enough. For serious businesses, with a major focus on c#; <a href=\"http://Xamarin.com\">Xamarin</a>  is probably the prefered method of development.</p>\n\n<h3 id=\"roomforimprovement\">Room for improvement</h3>\n\n<p>Before I can fully back <a href=\"http://Xamarin.com\">Xamarin</a>  I'd like to see better componants that provide more mobile platform abstraction, increased automation tools (visual studio macros could help here), and better documentation. From the activity of there web pages, I suspect all of these things are coming.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392759234600,"created_by":1,"updated_at":1392949802895,"updated_by":1,"published_at":1392889554294,"published_by":1},{"id":11,"uuid":"5fccd796-da58-4d84-969d-37556fc58b25","title":"You're doing it wrong (software testing)","slug":"softwaretesting","markdown":"One of the major systems that will stop you from losing money is your testing environment. The ability to properly test patches before they are put into production is a must. \n\n\n## Hardware Symmetry\n\n> Our test environment does not have nearly the same CPU/Memory that production servers have\n\nThe discrepancy between test and and prod adds unnecessary variables to your testing. Your testing environment needs to be a mirror hardware-wise as your production environment. The ability to accurately test the memory increases, and CPU impact is critical to the success of your code in production.\n\nFor instance if you have multiple worker processes in production, that each hold a cache of data and that cache is increased by 2GBb. This may be seen in a non-prod environment as a small increase. However, if your production environment is running 4 times the worker processes as your non prod the small 2GB rise becomes 8GB very quickly. \n\nThis large increase in memory usage could destabilize your platform (or not), but the unpredictability of this fact is scary. Tests should be [scientific](http://en.wikipedia.org/wiki/Scientific_method), and a radical difference between the two environments causes unnecessary variables.\n\n## Testing in prod as a last resort\n\n>We can't test this in test, because our *(insert discrepancy of the day)* in test is not good enough\n\nIf you suspect that a patch is causing performance problems, but you are unable to fully test it in a non-prod environment. Try to get the right hardware provisioned, or see what can be done for effective testing. The cost of serious performance degradation in production can be far worse than getting the right hardware, or pushing back at other developers.\n\nIf you have to test in prod try to patch a few servers and see what happens. Going all the way can also be more costly, then applying something on a few machines and rolling back. Make sure that potentially destructive tests are performed when all teams are in the office. Provide communication, and get everyone involved. If testing in prod requires a pow-wow of 10+ people you will quickly see those kinds of tests end fast.\n\n{<1>}![](/content/images/2014/Feb/9689481.jpg)\n\n\n\n## Learn from your mistakes\n\n>Continuous Improvement is not only an improvement of code, but also an evolution of philosophies. ~[Norm Maclennan](https://blog.normmaclennan.com)\n\nWhen problems occur in prod, you sometimes hear why did QA not catch this? When really the question should be, why was this not caught in test. One of the huge differences between these two statements is the first tries to blame a person, while the other constructively finds ways to improve and evolve.\n\n>Everyone in the organization should take ownership of testing, and testing environments. ~ [Tommy Parnell](http://blog.tommyparnell.com)\n\nThis is a huge key to success. Realize that if you write code, you probably write test cases. You should make sure you understand the release process, how code is tested, and how QA performs tests. Making sure QA can accurately test your code will ultimately prove beneficial to both you, your team, and your organization.\n\n##Inconsistent Releases\n\nReleases to test should be performed in the same manor as releases to prod. Any deviation from the documented process should be addressed immediately. Code changes should be managed properly, and scientifically for formal testing to be effective. \n\nPatches should also follow a consistent pattern from one software upgrade to the next. Hearing *this patch is going to be weird* from a Release Engineer is basically a red flag for *this is going to go wrong, but we don't want to take the blame for it*\n\n\n\n\n\n\n","html":"<p>One of the major systems that will stop you from losing money is your testing environment. The ability to properly test patches before they are put into production is a must. </p>\n\n<h2 id=\"hardwaresymmetry\">Hardware Symmetry</h2>\n\n<blockquote>\n  <p>Our test environment does not have nearly the same CPU/Memory that production servers have</p>\n</blockquote>\n\n<p>The discrepancy between test and and prod adds unnecessary variables to your testing. Your testing environment needs to be a mirror hardware-wise as your production environment. The ability to accurately test the memory increases, and CPU impact is critical to the success of your code in production.</p>\n\n<p>For instance if you have multiple worker processes in production, that each hold a cache of data and that cache is increased by 2GBb. This may be seen in a non-prod environment as a small increase. However, if your production environment is running 4 times the worker processes as your non prod the small 2GB rise becomes 8GB very quickly. </p>\n\n<p>This large increase in memory usage could destabilize your platform (or not), but the unpredictability of this fact is scary. Tests should be <a href=\"http://en.wikipedia.org/wiki/Scientific_method\">scientific</a>, and a radical difference between the two environments causes unnecessary variables.</p>\n\n<h2 id=\"testinginprodasalastresort\">Testing in prod as a last resort</h2>\n\n<blockquote>\n  <p>We can't test this in test, because our <em>(insert discrepancy of the day)</em> in test is not good enough</p>\n</blockquote>\n\n<p>If you suspect that a patch is causing performance problems, but you are unable to fully test it in a non-prod environment. Try to get the right hardware provisioned, or see what can be done for effective testing. The cost of serious performance degradation in production can be far worse than getting the right hardware, or pushing back at other developers.</p>\n\n<p>If you have to test in prod try to patch a few servers and see what happens. Going all the way can also be more costly, then applying something on a few machines and rolling back. Make sure that potentially destructive tests are performed when all teams are in the office. Provide communication, and get everyone involved. If testing in prod requires a pow-wow of 10+ people you will quickly see those kinds of tests end fast.</p>\n\n<p><img src=\"/content/images/2014/Feb/9689481.jpg\" alt=\"\" /></p>\n\n<h2 id=\"learnfromyourmistakes\">Learn from your mistakes</h2>\n\n<blockquote>\n  <p>Continuous Improvement is not only an improvement of code, but also an evolution of philosophies. ~<a href=\"https://blog.normmaclennan.com\">Norm Maclennan</a></p>\n</blockquote>\n\n<p>When problems occur in prod, you sometimes hear why did QA not catch this? When really the question should be, why was this not caught in test. One of the huge differences between these two statements is the first tries to blame a person, while the other constructively finds ways to improve and evolve.</p>\n\n<blockquote>\n  <p>Everyone in the organization should take ownership of testing, and testing environments. ~ <a href=\"http://blog.tommyparnell.com\">Tommy Parnell</a></p>\n</blockquote>\n\n<p>This is a huge key to success. Realize that if you write code, you probably write test cases. You should make sure you understand the release process, how code is tested, and how QA performs tests. Making sure QA can accurately test your code will ultimately prove beneficial to both you, your team, and your organization.</p>\n\n<h2 id=\"inconsistentreleases\">Inconsistent Releases</h2>\n\n<p>Releases to test should be performed in the same manor as releases to prod. Any deviation from the documented process should be addressed immediately. Code changes should be managed properly, and scientifically for formal testing to be effective. </p>\n\n<p>Patches should also follow a consistent pattern from one software upgrade to the next. Hearing <em>this patch is going to be weird</em> from a Release Engineer is basically a red flag for <em>this is going to go wrong, but we don't want to take the blame for it</em></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392890457733,"created_by":1,"updated_at":1393076327195,"updated_by":1,"published_at":1393050860483,"published_by":1},{"id":12,"uuid":"6fb7fde1-4035-484e-b461-30fbda837556","title":"Getting started with backbone.js","slug":"getting-started-with-backbone-js","markdown":"![](/content/images/2015/08/imageedit_6_9390856511.gif)","html":"<p><img src=\"/content/images/2015/08/imageedit_6_9390856511.gif\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1392920222656,"created_by":1,"updated_at":1439167882271,"updated_by":1,"published_at":null,"published_by":null},{"id":13,"uuid":"d035f0d5-048b-44bb-93c3-9ba8a17d55eb","title":"Parsing, and Nesting Models in backbone.js","slug":"nested-models-in-backbone-js","markdown":"\n## The Parse Function\nThe parse function allows you to do some pre-processing of the data sent from the server before the model is created. Parse should return an object containing the values that will make up this models attribues. This is called after the fetch command has recieved the data, but before the response is put into the model. The example below parses dates to local time before adding them to the model using  [moment](http://momentjs.com/).\n\n```javascript\n\nnamespace.Model = Backbone.Model.extend({\n    urlRoot: '/api/',\n    parse: function(response, options){\n    \tvar attr = {};\n        attr.date = moment().utc(response.date).local()  \n        attr.OtherData = response.OtherData\n        return attr;\n    }\n});\n```\n\n##Nesting Models (aka model within a model)\n\nWe will use the same parse function as above to create models within this model from data retrieved by the server. You could even loop through an array's keys and values to convert them to a model if need be.\n\n\n```javascript\n\nnamespace.Model = Backbone.Model.extend({\n    urlRoot: '/api/',\n    parse: function(response, options){\n    \tvar attr = {};\n        var submodel = new namespace.otherModel({value1: response.subModelArray.value1, value2: response.subModelArray.value2 });\n        attr.SubModel = submodel;\n        return attr;\n    }\n});\n```","html":"<h2 id=\"theparsefunction\">The Parse Function</h2>\n\n<p>The parse function allows you to do some pre-processing of the data sent from the server before the model is created. Parse should return an object containing the values that will make up this models attribues. This is called after the fetch command has recieved the data, but before the response is put into the model. The example below parses dates to local time before adding them to the model using  <a href=\"http://momentjs.com/\">moment</a>.</p>\n\n<pre><code class=\"javascript\">namespace.Model = Backbone.Model.extend({  \n    urlRoot: '/api/',\n    parse: function(response, options){\n        var attr = {};\n        attr.date = moment().utc(response.date).local()  \n        attr.OtherData = response.OtherData\n        return attr;\n    }\n});\n</code></pre>\n\n<h2 id=\"nestingmodelsakamodelwithinamodel\">Nesting Models (aka model within a model)</h2>\n\n<p>We will use the same parse function as above to create models within this model from data retrieved by the server. You could even loop through an array's keys and values to convert them to a model if need be.</p>\n\n<pre><code class=\"javascript\">namespace.Model = Backbone.Model.extend({  \n    urlRoot: '/api/',\n    parse: function(response, options){\n        var attr = {};\n        var submodel = new namespace.otherModel({value1: response.subModelArray.value1, value2: response.subModelArray.value2 });\n        attr.SubModel = submodel;\n        return attr;\n    }\n});\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393226331174,"created_by":1,"updated_at":1393810124082,"updated_by":1,"published_at":1393287783893,"published_by":1},{"id":14,"uuid":"39797acd-b23e-4075-9006-e78e55babe07","title":"Providing feedback (without being an asshole)...","slug":"providing-feedback-without-being-an-asshole","markdown":"<span style=\"float: right\">[<i class=\"fa fa-hand-o-right\"></i> Recieving feedback](https://blog.tommyparnell.com/receiving-feedback-without-being-an-asshole/)</span><br />\n\nGiving and receiving feedback, allows us to maintain our strengths while improving our weaknesses. There are two major types of feedback, constructive, and reinforcing. Constructive feedback is asking someone to change behavior, while reinforcing is acknowledging good behavior.\n\n\n\n## Giving Constructive Feedback\n\nConstructive feedback is the hardest type of feedback to deliver. This is the feedback where you are asking someone to change their behavior. You may be delivering feedback that is for skill, or behavior change. \n\n> feedback, it is not yelling at someone for 20 minutes, nor is it judging them. Feedback helps improve someones weakness, someones professional relationships, and their stance in the organization.\n\n### The Delivery \n\nTo start ask the person to talk in private. This gives the conversation some level of privacy, and will make this person less embarrassed. Thank them for sitting down and talking to you. Once the formalities are over, begin paraphrasing the offending behavior. \n\n>Do not pull other people into the conversation. Stating Stacie has this same issue with this person, puts them on the defensive. Give them your perspective only.\n\nAfter you have paraphrased the offending behavior from your point of view, give examples of how this behavior affects yourself negatively, and possibly the team. This is the chance to really voice why this behavior needs to stop. Make sure they fully understand your perspectives, and why they are being given this feedback. \n\nLet them respond to your feedback. Fully listen to their explinations, and allow them to ask questions. Their explanation can help bridge you're differences. Toward the end of the conversation provide the person with ways how they can stop, or how they can try to stop. Also let them know what the consequences would be (if any) if they continue to do this behavior. **Always** give this person a chance to talk, as they gave you. Fully acknowledge their perspectives, ask questions about it, and if you disagree let them know why.\n\nRemember this is a person you are talking to. People should still be talked to with dignity, and respect no matter what. This could be a simple misunderstanding, for which you wouldn't want to upset anyone over.\n\n\n## Giving Reinforcing Feedback\nReinforcing feedback is the kind of feedback that is easy to deliver. This acknowledges the value that person's behavior brings to the organization. \n\n### The Delivery\n\n>Be specific in your feedback. Just remember you are reinforcing a positive behavior, not touting how *genius* they are. \n\nThis kind of feedback can be addressed to both the employee's manager (if that person is not you), and the employee directly. This should start with a summary of what the employee did that was great, how it affected you, and how it could potentially affect others in a positive manor. Don't ever compare the person to another (ie. this guy is amazing as *insert employee of the month*). Just remember saying *hard-worker, always in the office, etc* is not constructive to the conversation, and should be avoided. \n\n\n\n## Being asked for Feedback by your boss\n\nSometimes feedback is asked of you by your boss. This person is coming to you, asking how he/she is doing at his/her job. This is not the time to play suck-up, this is the time to be honest. Provide real feedback using the techniques I have outlined above. Letting them know what they could change is the kind of advise they are looking for.\n\n## Who should I give feedback to?\n\nUsually it is appropriate for managers to give feedback to subordinates. As long as the culture of your company is not terrible; You should provide feedback to your peers, subordinates, and managers alike. Giving feedback to your boss, allows this person to see things from your perspective, which could be invaluable to someone running a large team. Remember your boss is just as human as you. He/she could be doing the wrong thing over and over again without realizing. Providing him feedback could ultimately improve your working environment, your team, and your companies culture as a whole. \n\n\n\n\n\n","html":"<p><span style=\"float: right\"><a href=\"https://blog.tommyparnell.com/receiving-feedback-without-being-an-asshole/\"><i class=\"fa fa-hand-o-right\"></i> Recieving feedback</a></span><br /></p>\n\n<p>Giving and receiving feedback, allows us to maintain our strengths while improving our weaknesses. There are two major types of feedback, constructive, and reinforcing. Constructive feedback is asking someone to change behavior, while reinforcing is acknowledging good behavior.</p>\n\n<h2 id=\"givingconstructivefeedback\">Giving Constructive Feedback</h2>\n\n<p>Constructive feedback is the hardest type of feedback to deliver. This is the feedback where you are asking someone to change their behavior. You may be delivering feedback that is for skill, or behavior change. </p>\n\n<blockquote>\n  <p>feedback, it is not yelling at someone for 20 minutes, nor is it judging them. Feedback helps improve someones weakness, someones professional relationships, and their stance in the organization.</p>\n</blockquote>\n\n<h3 id=\"thedelivery\">The Delivery</h3>\n\n<p>To start ask the person to talk in private. This gives the conversation some level of privacy, and will make this person less embarrassed. Thank them for sitting down and talking to you. Once the formalities are over, begin paraphrasing the offending behavior. </p>\n\n<blockquote>\n  <p>Do not pull other people into the conversation. Stating Stacie has this same issue with this person, puts them on the defensive. Give them your perspective only.</p>\n</blockquote>\n\n<p>After you have paraphrased the offending behavior from your point of view, give examples of how this behavior affects yourself negatively, and possibly the team. This is the chance to really voice why this behavior needs to stop. Make sure they fully understand your perspectives, and why they are being given this feedback. </p>\n\n<p>Let them respond to your feedback. Fully listen to their explinations, and allow them to ask questions. Their explanation can help bridge you're differences. Toward the end of the conversation provide the person with ways how they can stop, or how they can try to stop. Also let them know what the consequences would be (if any) if they continue to do this behavior. <strong>Always</strong> give this person a chance to talk, as they gave you. Fully acknowledge their perspectives, ask questions about it, and if you disagree let them know why.</p>\n\n<p>Remember this is a person you are talking to. People should still be talked to with dignity, and respect no matter what. This could be a simple misunderstanding, for which you wouldn't want to upset anyone over.</p>\n\n<h2 id=\"givingreinforcingfeedback\">Giving Reinforcing Feedback</h2>\n\n<p>Reinforcing feedback is the kind of feedback that is easy to deliver. This acknowledges the value that person's behavior brings to the organization. </p>\n\n<h3 id=\"thedelivery\">The Delivery</h3>\n\n<blockquote>\n  <p>Be specific in your feedback. Just remember you are reinforcing a positive behavior, not touting how <em>genius</em> they are. </p>\n</blockquote>\n\n<p>This kind of feedback can be addressed to both the employee's manager (if that person is not you), and the employee directly. This should start with a summary of what the employee did that was great, how it affected you, and how it could potentially affect others in a positive manor. Don't ever compare the person to another (ie. this guy is amazing as <em>insert employee of the month</em>). Just remember saying <em>hard-worker, always in the office, etc</em> is not constructive to the conversation, and should be avoided. </p>\n\n<h2 id=\"beingaskedforfeedbackbyyourboss\">Being asked for Feedback by your boss</h2>\n\n<p>Sometimes feedback is asked of you by your boss. This person is coming to you, asking how he/she is doing at his/her job. This is not the time to play suck-up, this is the time to be honest. Provide real feedback using the techniques I have outlined above. Letting them know what they could change is the kind of advise they are looking for.</p>\n\n<h2 id=\"whoshouldigivefeedbackto\">Who should I give feedback to?</h2>\n\n<p>Usually it is appropriate for managers to give feedback to subordinates. As long as the culture of your company is not terrible; You should provide feedback to your peers, subordinates, and managers alike. Giving feedback to your boss, allows this person to see things from your perspective, which could be invaluable to someone running a large team. Remember your boss is just as human as you. He/she could be doing the wrong thing over and over again without realizing. Providing him feedback could ultimately improve your working environment, your team, and your companies culture as a whole. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393288166214,"created_by":1,"updated_at":1394128311853,"updated_by":1,"published_at":1393795744369,"published_by":1},{"id":15,"uuid":"40ceabe8-7545-40eb-923a-053ef051d5db","title":"iPhone or Android (From a guy living with both)","slug":"iphone-or-android-from-a-guy-living-with-both","markdown":"I know, I know the very first question you ask is going to be *why do you have two phones*, the answer being One is for work, the other is for my personal life. Now that we are done with that subject, we can get on with the review...\n\n## Warning: I am a self-Proclaimed Android Fan-boy\n\nBefore I really get into it, I will warn you all that I am apart of the Android User Master Race. Some bias opinion **will** occur.\n\n## What phones?\n\nI will mostly be reviewing the [iPhone 5c](http://www.apple.com/iphone-5c/), against the [Nexus 5](https://play.google.com/store/devices/details/Nexus_5_16GB_White?id=nexus_5_white_16gb&hl=en). \n\n## What no flashy graphs?\n\nUnlike most reviews this wont have a bunch of data touting the disk read speeds during mid-day under controlled duress. This is a simple review of my experience with the two devices. \n\n## Build Quality <i class=\"fa fa-apple\"></i>\n\n### iPhone 5c \nThe first time I held the 5c, I thought it felt like a kids toy. Although that feeling still lingers with me today, I have noticed since that the quality of the build is fantastic. The buttons feel like they were made to last 1000 years, and the plastic does not feel cheap. I get the feeling it would survive a nasty fall. Although the phone is small, it does not make me wish I had a bigger one. On a side note I was more blown away by the iPhone headphones. These ear buds are actually great value for $30 (free with iPhone). They sound amazing, and they can take a beating. I plug them into my Nexus 5 to make phone calls a lot.\n\n### Nexus 5\n\nThe Nexus 5 features a much bigger screen than the iPhone 5c, but not so large it does not make it harder to handle. The white back looks very nice, and the buttons feel solid. Power button on the side is my preference. My one gripe with it, is when you hold it you don't get the feeling you are holding the greatness of [google](http://google.com) in your hand. I'm not sure what hidden element I am talking about, but it feels pretty plain as you hold it. That being said I do feel like I can bend space-time with the phone.\n\n## Operating System <i class=\"fa fa-android\"></i>\n\n### iPhone 5c\n\nWe all know iOS is pretty much amazing to those who love apple. For me I have some gripes.\n\n* iPhone keyboard always shows capitalized letters, regardless if you are typing lower case or upper case\n* I wish my home page was not the app tray\n* The notifications pull down menu is not intuative, and sometimes clicking the close button is unresponsive\n\n### Nexus 5\n\nAndroid OS is pretty awesome as well but there are some flaws. On a side note I'd like to say that touchwiz and other 3rd party customizations really make Android suck. The one thing that really impresses me about Android is the notifications menu. The menu is clean, and only notifies you on things you care about. If you want widgets, put 'em on the home screen. There is a real seperation of concerns in Android that feels missing in iPhone.\n\n* Some of the home screen widgets really eat battery life\n* Some of the older Anroid applications feel out of place on newer devices *ie not using the holo theme*\n\n\n## Finding Applications <i class=\"fa fa-apple\"></i>\n\n\nI got to give this one to apple. I'm not sure of the Apple stores size, but I felt the store contained better quality apps. The Android app store is really good if you want [Confucius quotes](https://play.google.com/store/apps/details?id=com.Quotes.ConfuciusQuotes&hl=en), apps made in [3 days or less](https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree&hl=en), or apps that show hot asian babes. [Apple](http://www.apple.com/) has done a good job at keeping the quality high. I never found an app that had no value to the phone. \n\n## Battery <i class=\"fa fa-apple\"></i>\n\nThe iPhones battery is the most impressive part. The Nexus 5 will give me a full day, but will need a charge at the end of the day. The 5c's battery usage is very low. the phone will go all day, and most of the night on one change. The iPhone also charges much faster than the Nexus 5. The one thing that pissed me off, was the Apple charging cable costs $19. I really like Android's use of the universal microUSB.\n\n## Siri vs Google Now <i class=\"fa fa-android\"></i>\n\nI'm not going into to much depth here, but as a user I much prefered Google Now. Although Siri had some nice qualities, I felt like google now was more accurate on searching, and provided better context in my queries. Google Now feels much snappier, and responds only when you need it *(ok google)*. \n\n## Trend Factor <i class=\"fa fa-android\"></i>\n\nI think apple always use to win this category, however with google wallet and NFC payment I have to give this to the Nexus 5. I have baught many things with my phone, and every time people are amazed. When you are at McDonalds and the only thing standing between you and a big Mac is a simple NFC tap, people think you are gods gift to the earth. One woman asked me out on a date after buying something at the pharmacy (I'm not kidding...it really happend). She was in utter amazement about how suave I was with my phone. Apple has really slipped in years, now more than ever people are interested in Android phones.\n\n## Verdict\n\n![Android Won](/content/images/2014/Feb/115580-1.png)\nThe iPhone, while being a real contender is far from perfect. I have give this to the Nexus 5. That being the case my dream phone would be an iPhone running Android software. I really prefer the software of Android, but retina display, and camera really makes me like the iPhone a lot. My only serious gripe with Android is the quality of the apps. However it does not override the iPhones terrible keyboard.\n\n\n","html":"<p>I know, I know the very first question you ask is going to be <em>why do you have two phones</em>, the answer being One is for work, the other is for my personal life. Now that we are done with that subject, we can get on with the review...</p>\n\n<h2 id=\"warningiamaselfproclaimedandroidfanboy\">Warning: I am a self-Proclaimed Android Fan-boy</h2>\n\n<p>Before I really get into it, I will warn you all that I am apart of the Android User Master Race. Some bias opinion <strong>will</strong> occur.</p>\n\n<h2 id=\"whatphones\">What phones?</h2>\n\n<p>I will mostly be reviewing the <a href=\"http://www.apple.com/iphone-5c/\">iPhone 5c</a>, against the <a href=\"https://play.google.com/store/devices/details/Nexus_5_16GB_White?id=nexus_5_white_16gb&amp;hl=en\">Nexus 5</a>. </p>\n\n<h2 id=\"whatnoflashygraphs\">What no flashy graphs?</h2>\n\n<p>Unlike most reviews this wont have a bunch of data touting the disk read speeds during mid-day under controlled duress. This is a simple review of my experience with the two devices. </p>\n\n<h2 id=\"buildqualityiclassfafaapplei\">Build Quality <i class=\"fa fa-apple\"></i></h2>\n\n<h3 id=\"iphone5c\">iPhone 5c</h3>\n\n<p>The first time I held the 5c, I thought it felt like a kids toy. Although that feeling still lingers with me today, I have noticed since that the quality of the build is fantastic. The buttons feel like they were made to last 1000 years, and the plastic does not feel cheap. I get the feeling it would survive a nasty fall. Although the phone is small, it does not make me wish I had a bigger one. On a side note I was more blown away by the iPhone headphones. These ear buds are actually great value for $30 (free with iPhone). They sound amazing, and they can take a beating. I plug them into my Nexus 5 to make phone calls a lot.</p>\n\n<h3 id=\"nexus5\">Nexus 5</h3>\n\n<p>The Nexus 5 features a much bigger screen than the iPhone 5c, but not so large it does not make it harder to handle. The white back looks very nice, and the buttons feel solid. Power button on the side is my preference. My one gripe with it, is when you hold it you don't get the feeling you are holding the greatness of <a href=\"http://google.com\">google</a> in your hand. I'm not sure what hidden element I am talking about, but it feels pretty plain as you hold it. That being said I do feel like I can bend space-time with the phone.</p>\n\n<h2 id=\"operatingsystemiclassfafaandroidi\">Operating System <i class=\"fa fa-android\"></i></h2>\n\n<h3 id=\"iphone5c\">iPhone 5c</h3>\n\n<p>We all know iOS is pretty much amazing to those who love apple. For me I have some gripes.</p>\n\n<ul>\n<li>iPhone keyboard always shows capitalized letters, regardless if you are typing lower case or upper case</li>\n<li>I wish my home page was not the app tray</li>\n<li>The notifications pull down menu is not intuative, and sometimes clicking the close button is unresponsive</li>\n</ul>\n\n<h3 id=\"nexus5\">Nexus 5</h3>\n\n<p>Android OS is pretty awesome as well but there are some flaws. On a side note I'd like to say that touchwiz and other 3rd party customizations really make Android suck. The one thing that really impresses me about Android is the notifications menu. The menu is clean, and only notifies you on things you care about. If you want widgets, put 'em on the home screen. There is a real seperation of concerns in Android that feels missing in iPhone.</p>\n\n<ul>\n<li>Some of the home screen widgets really eat battery life</li>\n<li>Some of the older Anroid applications feel out of place on newer devices <em>ie not using the holo theme</em></li>\n</ul>\n\n<h2 id=\"findingapplicationsiclassfafaapplei\">Finding Applications <i class=\"fa fa-apple\"></i></h2>\n\n<p>I got to give this one to apple. I'm not sure of the Apple stores size, but I felt the store contained better quality apps. The Android app store is really good if you want <a href=\"https://play.google.com/store/apps/details?id=com.Quotes.ConfuciusQuotes&amp;hl=en\">Confucius quotes</a>, apps made in <a href=\"https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree&amp;hl=en\">3 days or less</a>, or apps that show hot asian babes. <a href=\"http://www.apple.com/\">Apple</a> has done a good job at keeping the quality high. I never found an app that had no value to the phone. </p>\n\n<h2 id=\"batteryiclassfafaapplei\">Battery <i class=\"fa fa-apple\"></i></h2>\n\n<p>The iPhones battery is the most impressive part. The Nexus 5 will give me a full day, but will need a charge at the end of the day. The 5c's battery usage is very low. the phone will go all day, and most of the night on one change. The iPhone also charges much faster than the Nexus 5. The one thing that pissed me off, was the Apple charging cable costs $19. I really like Android's use of the universal microUSB.</p>\n\n<h2 id=\"sirivsgooglenowiclassfafaandroidi\">Siri vs Google Now <i class=\"fa fa-android\"></i></h2>\n\n<p>I'm not going into to much depth here, but as a user I much prefered Google Now. Although Siri had some nice qualities, I felt like google now was more accurate on searching, and provided better context in my queries. Google Now feels much snappier, and responds only when you need it <em>(ok google)</em>. </p>\n\n<h2 id=\"trendfactoriclassfafaandroidi\">Trend Factor <i class=\"fa fa-android\"></i></h2>\n\n<p>I think apple always use to win this category, however with google wallet and NFC payment I have to give this to the Nexus 5. I have baught many things with my phone, and every time people are amazed. When you are at McDonalds and the only thing standing between you and a big Mac is a simple NFC tap, people think you are gods gift to the earth. One woman asked me out on a date after buying something at the pharmacy (I'm not kidding...it really happend). She was in utter amazement about how suave I was with my phone. Apple has really slipped in years, now more than ever people are interested in Android phones.</p>\n\n<h2 id=\"verdict\">Verdict</h2>\n\n<p><img src=\"/content/images/2014/Feb/115580-1.png\" alt=\"Android Won\" />\nThe iPhone, while being a real contender is far from perfect. I have give this to the Nexus 5. That being the case my dream phone would be an iPhone running Android software. I really prefer the software of Android, but retina display, and camera really makes me like the iPhone a lot. My only serious gripe with Android is the quality of the apps. However it does not override the iPhones terrible keyboard.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393288183478,"created_by":1,"updated_at":1393358296195,"updated_by":1,"published_at":1393306427523,"published_by":null},{"id":16,"uuid":"6de23675-05d7-4ed2-b3e3-65ae615a4e3a","title":"Setting up robots.txt for your ghost powered blog","slug":"setting-up-robots-txt-for-your-ghost-powered-blog","markdown":"Setting up your robots.txt file for your blog is easy, by adding a file called robots.txt in the root of your current themes directory.\n\n`~/blogFolder/content/theme/Casper`\n\nIf you are unfamiliar with linux, to do this simply cd to the directory and run the command `sudo vi robots.txt` Press i (for insert mode), type your entry (example farther down in this blog), press esc, then type `:wq` (w stands for write, q stands for quit). Then hit enter\n\nYou should probably point sitemap to your rss feed. Most bots (including googlebot) can use the rss feed as a sitemap\n\n```\n\nSitemap: http://yourdomain/rss\nUser-agent: *\n\n```\n\nAs a side note, in the robots.txt file you must specify the full URL to your sitemap file.","html":"<p>Setting up your robots.txt file for your blog is easy, by adding a file called robots.txt in the root of your current themes directory.</p>\n\n<p><code>~/blogFolder/content/theme/Casper</code></p>\n\n<p>If you are unfamiliar with linux, to do this simply cd to the directory and run the command <code>sudo vi robots.txt</code> Press i (for insert mode), type your entry (example farther down in this blog), press esc, then type <code>:wq</code> (w stands for write, q stands for quit). Then hit enter</p>\n\n<p>You should probably point sitemap to your rss feed. Most bots (including googlebot) can use the rss feed as a sitemap</p>\n\n<pre><code>Sitemap: http://yourdomain/rss  \nUser-agent: *\n</code></pre>\n\n<p>As a side note, in the robots.txt file you must specify the full URL to your sitemap file.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393363386029,"created_by":1,"updated_at":1393721344189,"updated_by":1,"published_at":1393363463335,"published_by":1},{"id":18,"uuid":"f2f1dd1e-7510-4756-9cb8-979115e7683c","title":"Installing NodeBB on CentOS 6.5","slug":"installing-nodebb-on-centos-6-5","markdown":"\n[NodeBB](https://nodebb.org/) is forum software written on [Node.js](http://nodejs.org/)\n\nThe official installation instructions are on [github](https://github.com/designcreateplay/NodeBB), but the documentation is for [Ubuntu](http://www.ubuntu.com/). \n\nTo install on CentOS follow these instructions.\n\nInstall the base software stack.\n\n```\nsudo yum update\nsudo yum groupinstall \"Development Tools\" -y\nsudo yum install nodejs git redis ImageMagick npm\n\n```\n\nNext, clone the repository.\n\n```\n cd /path/to/nodebb/install/location\n git clone git://github.com/designcreateplay/NodeBB.git nodebb\n\n```\n\nObtain npm Dependencies.\n\n```\ncd nodebb\nsudo npm install -g npm\nsudo npm install\n\n```\nStart Redis\n\n```\nsudo service redis start\n\n```\nThen run through the setup (it will prompt you for things like listening on port numbers and host-names).\n\n```\n./nodebb setup\n\n```\n\nAfter start it up.\n\n```\n./nodebb start\n\n```\n\nNow you should be able to access it in the web browser (using the config you setup earlier).","html":"<p><a href=\"https://nodebb.org/\">NodeBB</a> is forum software written on <a href=\"http://nodejs.org/\">Node.js</a></p>\n\n<p>The official installation instructions are on <a href=\"https://github.com/designcreateplay/NodeBB\">github</a>, but the documentation is for <a href=\"http://www.ubuntu.com/\">Ubuntu</a>. </p>\n\n<p>To install on CentOS follow these instructions.</p>\n\n<p>Install the base software stack.</p>\n\n<pre><code>sudo yum update  \nsudo yum groupinstall \"Development Tools\" -y  \nsudo yum install nodejs git redis ImageMagick npm\n</code></pre>\n\n<p>Next, clone the repository.</p>\n\n<pre><code> cd /path/to/nodebb/install/location\n git clone git://github.com/designcreateplay/NodeBB.git nodebb\n</code></pre>\n\n<p>Obtain npm Dependencies.</p>\n\n<pre><code>cd nodebb  \nsudo npm install -g npm  \nsudo npm install\n</code></pre>\n\n<p>Start Redis</p>\n\n<pre><code>sudo service redis start\n</code></pre>\n\n<p>Then run through the setup (it will prompt you for things like listening on port numbers and host-names).</p>\n\n<pre><code>./nodebb setup\n</code></pre>\n\n<p>After start it up.</p>\n\n<pre><code>./nodebb start\n</code></pre>\n\n<p>Now you should be able to access it in the web browser (using the config you setup earlier).</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393701282010,"created_by":1,"updated_at":1396028883598,"updated_by":1,"published_at":1393701368854,"published_by":1},{"id":19,"uuid":"a38cacf3-d69b-4af0-bec8-96a2f9a309ff","title":"Receiving feedback (without being an asshole)...","slug":"receiving-feedback-without-being-an-asshole","markdown":"<span style=\"float: left\">[Providing feedback <i class=\"fa fa-hand-o-left\"></i>](https://blog.tommyparnell.com/providing-feedback-without-being-an-asshole/)</span><br />\n\nFeedback is a two way street if you are willing to hear your strengths reinforced, you should be able to handle what people think are your flaws.\n\n## Don't get Emotional\n\nOne of the big problems I have when providing feedback is that person often takes it far more personal than its intended. If someone has properly sat you down and asked you for a moment of your time, they are taking time out of their day, and yours. They are doing this, because they want to see your professional relationship with that person to grow and succeed. \n\n>Listen to the feedback in detail, and try to see things from their perspective.\n\n## Ask Questions\n\nYou need to ask questions here. This is how you identify what exactly the problem is and why. Also let them understand your perspective, and why you thought you were doing the right thing. Fully understand the problem at hand. Even if you disagree with the feedback, acknowledge their stance and be polite during the conversation.\n\n## Don't pull others into the conversation\nDo not try to Place blame on others, just remember these are **you're** behavior problems, not someone else's. Don't tell them to also talk to *XYZ* person, just because you think they are also doing the same. If they are doing the same problem, inform that person directly using my [guide](https://blog.tommyparnell.com/providing-feedback-without-being-an-asshole/) on providing feedback. \n\n## Show Appreciation \nEven if you disagree always show appreciation. Let them know their time is not wasted, and always seem approachable. The ultimate goal is to take the feedback, while still maintaining a solid relationship with this person. Just remember whomever they are you are most likely going to have to interact with them again in you're organization.\n\n## ...but I disagree\nIf you really disagree take in the feedback, wait until the emotional level has calmed and then really point out why you disagree. Do not start yelling, or raising your voice, and always give your honest opinion. If you feel that the conversation is going nowhere, let the dust settle for a few days. If you feel you want to talk about it again, ask them to sit back down with you and resume the conversation in a civilized manor. Just remember being approachable is number one in a corporate atmosphere, and upsetting people is a career killer.\n\n\n\n","html":"<p><span style=\"float: left\"><a href=\"https://blog.tommyparnell.com/providing-feedback-without-being-an-asshole/\">Providing feedback <i class=\"fa fa-hand-o-left\"></i></a></span><br /></p>\n\n<p>Feedback is a two way street if you are willing to hear your strengths reinforced, you should be able to handle what people think are your flaws.</p>\n\n<h2 id=\"dontgetemotional\">Don't get Emotional</h2>\n\n<p>One of the big problems I have when providing feedback is that person often takes it far more personal than its intended. If someone has properly sat you down and asked you for a moment of your time, they are taking time out of their day, and yours. They are doing this, because they want to see your professional relationship with that person to grow and succeed. </p>\n\n<blockquote>\n  <p>Listen to the feedback in detail, and try to see things from their perspective.</p>\n</blockquote>\n\n<h2 id=\"askquestions\">Ask Questions</h2>\n\n<p>You need to ask questions here. This is how you identify what exactly the problem is and why. Also let them understand your perspective, and why you thought you were doing the right thing. Fully understand the problem at hand. Even if you disagree with the feedback, acknowledge their stance and be polite during the conversation.</p>\n\n<h2 id=\"dontpullothersintotheconversation\">Don't pull others into the conversation</h2>\n\n<p>Do not try to Place blame on others, just remember these are <strong>you're</strong> behavior problems, not someone else's. Don't tell them to also talk to <em>XYZ</em> person, just because you think they are also doing the same. If they are doing the same problem, inform that person directly using my <a href=\"https://blog.tommyparnell.com/providing-feedback-without-being-an-asshole/\">guide</a> on providing feedback. </p>\n\n<h2 id=\"showappreciation\">Show Appreciation</h2>\n\n<p>Even if you disagree always show appreciation. Let them know their time is not wasted, and always seem approachable. The ultimate goal is to take the feedback, while still maintaining a solid relationship with this person. Just remember whomever they are you are most likely going to have to interact with them again in you're organization.</p>\n\n<h2 id=\"butidisagree\">...but I disagree</h2>\n\n<p>If you really disagree take in the feedback, wait until the emotional level has calmed and then really point out why you disagree. Do not start yelling, or raising your voice, and always give your honest opinion. If you feel that the conversation is going nowhere, let the dust settle for a few days. If you feel you want to talk about it again, ask them to sit back down with you and resume the conversation in a civilized manor. Just remember being approachable is number one in a corporate atmosphere, and upsetting people is a career killer.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1393794728192,"created_by":1,"updated_at":1394128435559,"updated_by":1,"published_at":1394084551767,"published_by":1},{"id":20,"uuid":"a841ebd4-62ab-4f22-81f8-8ea4b839e145","title":"Abstracting Xamarin Android SharedPreferences","slug":"xamarin-android-sharedpreferences","markdown":"The standard way to get/set SharedPreferences in Xamarin is with the following code.\n\nGet Preference:\n\n```clike\n\n var shared = con.GetSharedPreferences(_preferenceName, FileCreationMode.WorldReadable);\n var value = shared.All.Where(x => x.Key == key).FirstOrDefault().Value;\n\n```\n\nSet Preference:\n\n```clike\n\nvar shared = con.GetSharedPreferences(\"PreferenceName\", FileCreationMode.WorldWriteable);\n            var edit = shared.Edit();\n            edit.PutString(key, val);\n            edit.Commit();\n\n```\n\nThe main issue I have/had with this is you often have to know what will be returned, and what type you need to save as. Usually this isn't difficult, but it adds an un-needed level of complexity.\n\nThe other major issues I have with this, is that it is quite verbose, and unnecessary. The code duplication here can be quite high.\n\n## The Solution\n\nI recently added on [github](https://github.com/tparnell8/XamAndroidSettings) an abstraction around the shared preferences that make it easier to use. This class uses [c# generics](http://msdn.microsoft.com/en-us/library/512aeb7t.aspx), and an extension method I wrote for `ISharedPreferencesEditor` that make SharedPreferences easier to use.\n\nThe sample code below shows how to use it.\n\n```clike\n\nvar sk = new SettingsKey<string>(\"KeyName\", \"PreferenceName\", \"DefaultValuehere\");\n           var setting = sk.GetSetting(this)\n           var setsetting = sk.SetSetting(this, \"New Value!\")\n\n```\n\nTo start create a new `SettingsKey` class and provide a primative type (Note: it only accepts String, Bool, Int, Float, Long).\n\n`var sk = new SettingsKey<string>(\"KeyName\", \"PreferenceName\", \"DefaultValuehere\");`\n\nMy example creates an object called sk with T of type string. You must give the key a name, you must provide the preferenceName (name used to share the settings with other classes),and you must give it a default value (because the user setting may not exist yet).\n\nBelow is a version that uses int:\n\n``var sk = new SettingsKey<int>(\"Times app has been loaded\", \"PreferenceName\", 15);`\n\nAfterwards you can simply use `sk.GetSetting(this)` to get the setting and `sk.SetSetting(this, 25)` to set a new setting.\n\nThe way I used this, was to have the settingskey classes wrapped in a repository-type class with the keys pre-defined (in a struct). Using this I was able to call `repo.sk1.GetSetting();` throughout my application without having to worry if I typed the correct key in or not. This was especially valuable when I wrote my [GravatarSync](https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree) app which has a service backend service, and a front end activity that both access the preferences.\n\n\n## The Result\n\nAfter making this I wanted to start using SharedPreferences as a storage medium. Setting up localSQL for your app is a pain, and maintaing that data when an update to your app is pushed out can be risky. The SharedPreferences are maintained even upon an update, and android does not let these settings get deleted (unless the user deletes them).\n","html":"<p>The standard way to get/set SharedPreferences in Xamarin is with the following code.</p>\n\n<p>Get Preference:</p>\n\n<pre><code class=\"clike\"> var shared = con.GetSharedPreferences(_preferenceName, FileCreationMode.WorldReadable);\n var value = shared.All.Where(x =&gt; x.Key == key).FirstOrDefault().Value;\n</code></pre>\n\n<p>Set Preference:</p>\n\n<pre><code class=\"clike\">var shared = con.GetSharedPreferences(\"PreferenceName\", FileCreationMode.WorldWriteable);  \n            var edit = shared.Edit();\n            edit.PutString(key, val);\n            edit.Commit();\n</code></pre>\n\n<p>The main issue I have/had with this is you often have to know what will be returned, and what type you need to save as. Usually this isn't difficult, but it adds an un-needed level of complexity.</p>\n\n<p>The other major issues I have with this, is that it is quite verbose, and unnecessary. The code duplication here can be quite high.</p>\n\n<h2 id=\"thesolution\">The Solution</h2>\n\n<p>I recently added on <a href=\"https://github.com/tparnell8/XamAndroidSettings\">github</a> an abstraction around the shared preferences that make it easier to use. This class uses <a href=\"http://msdn.microsoft.com/en-us/library/512aeb7t.aspx\">c# generics</a>, and an extension method I wrote for <code>ISharedPreferencesEditor</code> that make SharedPreferences easier to use.</p>\n\n<p>The sample code below shows how to use it.</p>\n\n<pre><code class=\"clike\">var sk = new SettingsKey&lt;string&gt;(\"KeyName\", \"PreferenceName\", \"DefaultValuehere\");  \n           var setting = sk.GetSetting(this)\n           var setsetting = sk.SetSetting(this, \"New Value!\")\n</code></pre>\n\n<p>To start create a new <code>SettingsKey</code> class and provide a primative type (Note: it only accepts String, Bool, Int, Float, Long).</p>\n\n<p><code>var sk = new SettingsKey&lt;string&gt;(\"KeyName\", \"PreferenceName\", \"DefaultValuehere\");</code></p>\n\n<p>My example creates an object called sk with T of type string. You must give the key a name, you must provide the preferenceName (name used to share the settings with other classes),and you must give it a default value (because the user setting may not exist yet).</p>\n\n<p>Below is a version that uses int:</p>\n\n<p><code>`var sk = new SettingsKey&lt;int&gt;(\"Times app has been loaded\", \"PreferenceName\", 15);</code></p>\n\n<p>Afterwards you can simply use <code>sk.GetSetting(this)</code> to get the setting and <code>sk.SetSetting(this, 25)</code> to set a new setting.</p>\n\n<p>The way I used this, was to have the settingskey classes wrapped in a repository-type class with the keys pre-defined (in a struct). Using this I was able to call <code>repo.sk1.GetSetting();</code> throughout my application without having to worry if I typed the correct key in or not. This was especially valuable when I wrote my <a href=\"https://play.google.com/store/apps/details?id=ultimategravatarsync.ultimategravatarsyncfree\">GravatarSync</a> app which has a service backend service, and a front end activity that both access the preferences.</p>\n\n<h2 id=\"theresult\">The Result</h2>\n\n<p>After making this I wanted to start using SharedPreferences as a storage medium. Setting up localSQL for your app is a pain, and maintaing that data when an update to your app is pushed out can be risky. The SharedPreferences are maintained even upon an update, and android does not let these settings get deleted (unless the user deletes them).</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394132125759,"created_by":1,"updated_at":1395279032619,"updated_by":1,"published_at":1394224210738,"published_by":1},{"id":21,"uuid":"f93a0918-9b69-4cf8-959e-0aee4cc6b728","title":"Admob with Xamarin Android Part 1: BannerAd","slug":"admob-with-xamarin-part-1-banner-ads","markdown":"<span style=\"float: right\">[<i class=\"fa fa-hand-o-right\"></i> Part 2: Interstitial Ads](https://blog.tommyparnell.com/admob-with-xamarin-part-2-interstitialad/)</span><br />\n\nThis will be a brief overview on how to get admob working with Xamarin.\n\n## Disclaimer\n\nI highly suggest you run this on a real phone. I'm not sure if the virtual phones can load content on the internet. I always develop on a real phone.\n\nSample code located in a [repo at github](https://github.com/tparnell8/XamarinAdmobTutorial)\n\n## Create an admob account\n\nFirst you will need to create an account. After you do so create an ad, you must choose either full page aka Interstitial, or banner ad.\n\n\n## Install Play Services Component\n\nThis is quite simple right click on the components folder (in visual studio, or xamarin studio) and click get more components.\n\n{<2>}![get a componant](/content/images/2014/Mar/componant.png)\n\nFind the play services you require and click Add to App. \n\n{<6>}![](/content/images/2014/Mar/playservices.PNG)\n\nAdd the following XML to your Android Manifest file, place it in between the `<application></application>` tags.\n\n```xml\n\n    <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" />\n    <activity android:name=\"com.google.android.gms.ads.AdActivity\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\" />\n\n\n\n```\n\n\n\n## Add proper permissions\n\nYou need to add these permissions to your AssemblyInfo.cs\n\n```clike\n[assembly: UsesPermission(Android.Manifest.Permission.Internet)]\n[assembly: UsesPermission(Android.Manifest.Permission.AccessNetworkState)]\n```\n\n## The Basics\n\nThe standard code to create an ad is something like this:\n\n\n```clike\nusing Android.Gms.Ads;\n\nnamespace funtimes\n{\n\n  class a : Activity\n  {\n  \t\tpublic void Method()\n        {\n          var ad = new AdView(con);\n          ad.AdSize = AdSize.SmartBanner;\n          ad.AdUnitId = 'your id here';\n          var requestbuilder = new AdRequest.Builder();\n          ad.LoadAd(requestbuilder.Build());\n          var layout = FindViewById<LinearLayout>(Resource.Id.mainlayout);\n          layout.AddView(ad);\n         }\n         \n  }\n}\n\n\n```\n\n## Doing things better\n\nHowever in the interests of showing, and creating more flexible code this tutorial will guide you through the wrapper implementation I constructed, and posted on [github](https://github.com/tparnell8/XamarinAdmobTutorial).\n\nTo start I created admobDemo.AndroidPhone.ad.AdWrapper.cs This code abstracts out some of the verbose building process, and allows the building Ad code to be reused. the code pertaining banner ads looks like this\n\n\n```clike\n\n\nusing Android.Gms.Ads;\n\nnamespace admobDemo.AndroidPhone.ad\n{\n    public static class AdWrapper\n    {\n        \n\n        public static AdView ConstructStandardBanner(Context con, AdSize adsize, string UnitID)\n        {\n           var ad = new AdView(con);\n           ad.AdSize = adsize;\n           ad.AdUnitId = UnitID;\n           return ad;\n        }\n\n\n        public static AdView CustomBuild(this AdView ad)\n        {\n            var requestbuilder = new AdRequest.Builder();\n            ad.LoadAd(requestbuilder.Build());\n            return ad;\n        }\n    \n    }\n\n\n```\n\nThe ConstructStandardBanner method takes in a context (usually this in an activity class), an ad size which usually people use AdSize.SmartBanner, and the unitID of your Ad (ID that you got from admob).\n\nThe [extension](http://msdn.microsoft.com/en-us/library/bb383977.aspx) method `CustomBuild` allows you to define things in the requestbuilder *(which I have not changed in this implementation)*. The request builder is mostly to give demographic information to Google, to help serve up a *better* ad.\n\n\nYour main activity should end up looking something like this:\n\n```clike\n\n\n\nusing System;\nusing Android.App;\nusing Android.Content;\nusing Android.Runtime;\nusing Android.Views;\nusing Android.Widget;\nusing Android.OS;\nusing Android.Gms.Ads;\nusing admobDemo;\nusing admobDemo.AndroidPhone.ad;\nnamespace admobDemo.AndroidPhone\n{\n    [Activity(Label = \"admobDemo.AndroidPhone\", MainLauncher = true, Icon = \"@drawable/icon\")]\n    public class Activity1 : Activity\n    {\n        AdView _bannerad;\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            \n            _bannerad = AdWrapper.ConstructStandardBanner(this, AdSize.SmartBanner, \"your ad id here\");\n             _bannerad.CustomBuild();\n            var layout = FindViewById<LinearLayout>(Resource.Id.mainlayout);\n            layout.AddView(_bannerad);\n\t\t}\n\n           \n\n        protected override void OnResume()\n        {\n            if (_bannerad != null) _bannerad.Resume();\n            base.OnResume();\n        }\n        protected override void OnPause()\n        {\n            if(_bannerad != null)_bannerad.Pause();\n            base.OnPause();\n        }\n    }\n}\n\n\n```\n\nAs you can see we are constructing the banner using our wrapper. Then we are calling it's custom build extension method.  We are getting a LinearLayout that has been defined in the views's .axml file (you can add your own their if you wish) and then we are injecting the banner into this LinearLayout.\n\nYou need to make sure you pause and resume the bannerAds by including them in the overrides on the Activity class. You also need to make sure you give it your ad ID.\n\nIf you have issues where the ad does not show, you may want to make sure whatever LinearLayout (or other UI control) you inject the banner into is being shown in the UI. I once saw a problem where one layout was filling the parent so the other was not being shown, therefore the banner was hidden.","html":"<p><span style=\"float: right\"><a href=\"https://blog.tommyparnell.com/admob-with-xamarin-part-2-interstitialad/\"><i class=\"fa fa-hand-o-right\"></i> Part 2: Interstitial Ads</a></span><br /></p>\n\n<p>This will be a brief overview on how to get admob working with Xamarin.</p>\n\n<h2 id=\"disclaimer\">Disclaimer</h2>\n\n<p>I highly suggest you run this on a real phone. I'm not sure if the virtual phones can load content on the internet. I always develop on a real phone.</p>\n\n<p>Sample code located in a <a href=\"https://github.com/tparnell8/XamarinAdmobTutorial\">repo at github</a></p>\n\n<h2 id=\"createanadmobaccount\">Create an admob account</h2>\n\n<p>First you will need to create an account. After you do so create an ad, you must choose either full page aka Interstitial, or banner ad.</p>\n\n<h2 id=\"installplayservicescomponent\">Install Play Services Component</h2>\n\n<p>This is quite simple right click on the components folder (in visual studio, or xamarin studio) and click get more components.</p>\n\n<p><img src=\"/content/images/2014/Mar/componant.png\" alt=\"get a componant\" /></p>\n\n<p>Find the play services you require and click Add to App. </p>\n\n<p><img src=\"/content/images/2014/Mar/playservices.PNG\" alt=\"\" /></p>\n\n<p>Add the following XML to your Android Manifest file, place it in between the <code>&lt;application&gt;&lt;/application&gt;</code> tags.</p>\n\n<pre><code class=\"xml\">    &lt;meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" /&gt;\n    &lt;activity android:name=\"com.google.android.gms.ads.AdActivity\" android:configChanges=\"keyboard|keyboardHidden|orientation|screenLayout|uiMode|screenSize|smallestScreenSize\" /&gt;\n</code></pre>\n\n<h2 id=\"addproperpermissions\">Add proper permissions</h2>\n\n<p>You need to add these permissions to your AssemblyInfo.cs</p>\n\n<pre><code class=\"clike\">[assembly: UsesPermission(Android.Manifest.Permission.Internet)]\n[assembly: UsesPermission(Android.Manifest.Permission.AccessNetworkState)]\n</code></pre>\n\n<h2 id=\"thebasics\">The Basics</h2>\n\n<p>The standard code to create an ad is something like this:</p>\n\n<pre><code class=\"clike\">using Android.Gms.Ads;\n\nnamespace funtimes  \n{\n\n  class a : Activity\n  {\n          public void Method()\n        {\n          var ad = new AdView(con);\n          ad.AdSize = AdSize.SmartBanner;\n          ad.AdUnitId = 'your id here';\n          var requestbuilder = new AdRequest.Builder();\n          ad.LoadAd(requestbuilder.Build());\n          var layout = FindViewById&lt;LinearLayout&gt;(Resource.Id.mainlayout);\n          layout.AddView(ad);\n         }\n\n  }\n}\n</code></pre>\n\n<h2 id=\"doingthingsbetter\">Doing things better</h2>\n\n<p>However in the interests of showing, and creating more flexible code this tutorial will guide you through the wrapper implementation I constructed, and posted on <a href=\"https://github.com/tparnell8/XamarinAdmobTutorial\">github</a>.</p>\n\n<p>To start I created admobDemo.AndroidPhone.ad.AdWrapper.cs This code abstracts out some of the verbose building process, and allows the building Ad code to be reused. the code pertaining banner ads looks like this</p>\n\n<pre><code class=\"clike\">using Android.Gms.Ads;\n\nnamespace admobDemo.AndroidPhone.ad  \n{\n    public static class AdWrapper\n    {\n\n\n        public static AdView ConstructStandardBanner(Context con, AdSize adsize, string UnitID)\n        {\n           var ad = new AdView(con);\n           ad.AdSize = adsize;\n           ad.AdUnitId = UnitID;\n           return ad;\n        }\n\n\n        public static AdView CustomBuild(this AdView ad)\n        {\n            var requestbuilder = new AdRequest.Builder();\n            ad.LoadAd(requestbuilder.Build());\n            return ad;\n        }\n\n    }\n</code></pre>\n\n<p>The ConstructStandardBanner method takes in a context (usually this in an activity class), an ad size which usually people use AdSize.SmartBanner, and the unitID of your Ad (ID that you got from admob).</p>\n\n<p>The <a href=\"http://msdn.microsoft.com/en-us/library/bb383977.aspx\">extension</a> method <code>CustomBuild</code> allows you to define things in the requestbuilder <em>(which I have not changed in this implementation)</em>. The request builder is mostly to give demographic information to Google, to help serve up a <em>better</em> ad.</p>\n\n<p>Your main activity should end up looking something like this:</p>\n\n<pre><code class=\"clike\">using System;  \nusing Android.App;  \nusing Android.Content;  \nusing Android.Runtime;  \nusing Android.Views;  \nusing Android.Widget;  \nusing Android.OS;  \nusing Android.Gms.Ads;  \nusing admobDemo;  \nusing admobDemo.AndroidPhone.ad;  \nnamespace admobDemo.AndroidPhone  \n{\n    [Activity(Label = \"admobDemo.AndroidPhone\", MainLauncher = true, Icon = \"@drawable/icon\")]\n    public class Activity1 : Activity\n    {\n        AdView _bannerad;\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n\n            _bannerad = AdWrapper.ConstructStandardBanner(this, AdSize.SmartBanner, \"your ad id here\");\n             _bannerad.CustomBuild();\n            var layout = FindViewById&lt;LinearLayout&gt;(Resource.Id.mainlayout);\n            layout.AddView(_bannerad);\n        }\n\n\n\n        protected override void OnResume()\n        {\n            if (_bannerad != null) _bannerad.Resume();\n            base.OnResume();\n        }\n        protected override void OnPause()\n        {\n            if(_bannerad != null)_bannerad.Pause();\n            base.OnPause();\n        }\n    }\n}\n</code></pre>\n\n<p>As you can see we are constructing the banner using our wrapper. Then we are calling it's custom build extension method.  We are getting a LinearLayout that has been defined in the views's .axml file (you can add your own their if you wish) and then we are injecting the banner into this LinearLayout.</p>\n\n<p>You need to make sure you pause and resume the bannerAds by including them in the overrides on the Activity class. You also need to make sure you give it your ad ID.</p>\n\n<p>If you have issues where the ad does not show, you may want to make sure whatever LinearLayout (or other UI control) you inject the banner into is being shown in the UI. I once saw a problem where one layout was filling the parent so the other was not being shown, therefore the banner was hidden.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394513511356,"created_by":1,"updated_at":1398482112943,"updated_by":1,"published_at":1394515807779,"published_by":1},{"id":22,"uuid":"2f0b238d-7041-454e-952a-c9f9c95f79f3","title":"Admob with Xamarin Android Part 2: InterstitialAd","slug":"admob-with-xamarin-part-2-interstitialad","markdown":"<span style=\"float: left\">[Part 1: Banner Ads <i class=\"fa fa-hand-o-left\"></i>](https://blog.tommyparnell.com/admob-with-xamarin-part-1-banner-ads/)</span><br />\n\nInterested in Interstital ads, but not banner? Thats ok, but I recommend your read my first post about [banner ads](https://blog.tommyparnell.com/admob-with-xamarin-part-1-banner-ads/). The first steps, installing Google Play Services, altering your permissions, adding to your manifests files, and reviewing my [github demo](https://github.com/tparnell8/XamarinAdmobTutorial) are located in that tutorial.\n\n## The Basics\n\nThe very basic amount of code to do Interstitial Ad's are below\n\n```clike\n\n var ad = new InterstitialAd(con);\n ad.AdUnitId = \"unitID\";\n var requestbuilder = new AdRequest.Builder();\n ad.LoadAd(requestbuilder.Build());\n ad.Show()\n```\nThe problem with the above code is it tries to show the ad right away, but the ad may not be loaded already. The unique way interstitial ads work, are you must call `Show()`, after the banner is downloaded. So we must have an event listener that hears when the ad is loaded, before we can show it.\n\n## Doing things better\n\nBack to my github code, the Adwrapper class contains build methods for *full page ad* aka Interstitial. \n\n```clike\nusing Android.App;\nusing Android.Content;\nusing Android.OS;\nusing Android.Runtime;\nusing Android.Views;\nusing Android.Widget;\nusing Android.Gms.Ads;\n\nnamespace admobDemo.AndroidPhone.ad\n{\n    public static class AdWrapper\n    {\n\n\n public static InterstitialAd ConstructFullPageAdd(Context con, string UnitID)\n        {\n            var ad = new InterstitialAd(con);\n            ad.AdUnitId = UnitID;\n            return ad;\n        }\n        \n          public static InterstitialAd CustomBuild(this InterstitialAd ad)\n        {\n            var requestbuilder = new AdRequest.Builder();\n            ad.LoadAd(requestbuilder.Build());\n            return ad;\n        }\n\n    }\n}\n\n```\nThe custom build extension method works the same as the banner ad method, and has not been customized in this template.\n\nThe InterstitialAd class does not come with native event listeners. To implement listeners you must create a class that inherits from AdListner and then define the event listeners. We will want to do this so we can show the ad once it is downloaded to the phone, and not have to keep checking to see if it has downloaded. The demo code AdEventListener.cs file in the ad folder of AndroidPhone project contains an implementaiton of this.\n\n```clike\n\n\nnamespace admobDemo\n{\n    class adlistener : AdListener\n    {\n        // Declare the delegate (if using non-generic pattern). \n        public delegate void AdLoadedEvent();\n        public delegate void AdClosedEvent();\n        public delegate void AdOpenedEvent();\n\n\n\n        // Declare the event. \n        public event AdLoadedEvent AdLoaded;\n        public event AdClosedEvent AdClosed;\n        public event AdOpenedEvent AdOpened;\n\n        public override void OnAdLoaded()\n        {\n            if (AdLoaded != null) this.AdLoaded();\n            base.OnAdLoaded();\n        }\n\n        public override void OnAdClosed()\n        {\n            if (AdClosed != null) this.AdClosed();\n            base.OnAdClosed();\n        }\n        public override void OnAdOpened()\n        {\n            if (AdOpened != null) this.AdOpened();\n \t        base.OnAdOpened();\n        }\n    }\n}\n```\n\nOnce you have these componants in place your activity should end up looking like this.\n\n\n```clike\n\n\nusing System;\nusing Android.App;\nusing Android.Content;\nusing Android.Runtime;\nusing Android.Views;\nusing Android.Widget;\nusing Android.OS;\nusing Android.Gms.Ads;\nusing admobDemo;\nusing admobDemo.AndroidPhone.ad;\nnamespace admobDemo.AndroidPhone\n{\n    [Activity(Label = \"admobDemo.AndroidPhone\", MainLauncher = true, Icon = \"@drawable/icon\")]\n    public class Activity1 : Activity\n    {\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n\n            // Set our view from the \"main\" layout resource\n            SetContentView(Resource.Layout.Main);\n\n            var FinalAd = AdWrapper.ConstructFullPageAdd(this, \"your ad id here\");\n            var intlistener = new admobDemo.adlistener();\n            intlistener.AdLoaded += () => { if (FinalAd.IsLoaded)FinalAd.Show(); };\n            FinalAd.AdListener = intlistener;\n            FinalAd.CustomBuild();\n\n        }\n\n    }\n}\n\n```\n\nTo walk you through the code...after `SetContentView()`....We make a full page Ad *(and pass it our AD id)*, we create an event listener based on the ad listener class. We set the event listener to trigger an annonymous function that will show the ad. we make the Ad's event listener to be the event listener we made, then we run CustomBuild which builds the Ad and starts loading the Ad. Once the ad loads it will call the event handler, and Boom! Show the ad to the user. \n\nObviously this is a basic implementation, and showing the ad when the app first starts may, or may not be the best stratergy for **You**.","html":"<p><span style=\"float: left\"><a href=\"https://blog.tommyparnell.com/admob-with-xamarin-part-1-banner-ads/\">Part 1: Banner Ads <i class=\"fa fa-hand-o-left\"></i></a></span><br /></p>\n\n<p>Interested in Interstital ads, but not banner? Thats ok, but I recommend your read my first post about <a href=\"https://blog.tommyparnell.com/admob-with-xamarin-part-1-banner-ads/\">banner ads</a>. The first steps, installing Google Play Services, altering your permissions, adding to your manifests files, and reviewing my <a href=\"https://github.com/tparnell8/XamarinAdmobTutorial\">github demo</a> are located in that tutorial.</p>\n\n<h2 id=\"thebasics\">The Basics</h2>\n\n<p>The very basic amount of code to do Interstitial Ad's are below</p>\n\n<pre><code class=\"clike\"> var ad = new InterstitialAd(con);\n ad.AdUnitId = \"unitID\";\n var requestbuilder = new AdRequest.Builder();\n ad.LoadAd(requestbuilder.Build());\n ad.Show()\n</code></pre>\n\n<p>The problem with the above code is it tries to show the ad right away, but the ad may not be loaded already. The unique way interstitial ads work, are you must call <code>Show()</code>, after the banner is downloaded. So we must have an event listener that hears when the ad is loaded, before we can show it.</p>\n\n<h2 id=\"doingthingsbetter\">Doing things better</h2>\n\n<p>Back to my github code, the Adwrapper class contains build methods for <em>full page ad</em> aka Interstitial. </p>\n\n<pre><code class=\"clike\">using Android.App;  \nusing Android.Content;  \nusing Android.OS;  \nusing Android.Runtime;  \nusing Android.Views;  \nusing Android.Widget;  \nusing Android.Gms.Ads;\n\nnamespace admobDemo.AndroidPhone.ad  \n{\n    public static class AdWrapper\n    {\n\n\n public static InterstitialAd ConstructFullPageAdd(Context con, string UnitID)\n        {\n            var ad = new InterstitialAd(con);\n            ad.AdUnitId = UnitID;\n            return ad;\n        }\n\n          public static InterstitialAd CustomBuild(this InterstitialAd ad)\n        {\n            var requestbuilder = new AdRequest.Builder();\n            ad.LoadAd(requestbuilder.Build());\n            return ad;\n        }\n\n    }\n}\n</code></pre>\n\n<p>The custom build extension method works the same as the banner ad method, and has not been customized in this template.</p>\n\n<p>The InterstitialAd class does not come with native event listeners. To implement listeners you must create a class that inherits from AdListner and then define the event listeners. We will want to do this so we can show the ad once it is downloaded to the phone, and not have to keep checking to see if it has downloaded. The demo code AdEventListener.cs file in the ad folder of AndroidPhone project contains an implementaiton of this.</p>\n\n<pre><code class=\"clike\">namespace admobDemo  \n{\n    class adlistener : AdListener\n    {\n        // Declare the delegate (if using non-generic pattern). \n        public delegate void AdLoadedEvent();\n        public delegate void AdClosedEvent();\n        public delegate void AdOpenedEvent();\n\n\n\n        // Declare the event. \n        public event AdLoadedEvent AdLoaded;\n        public event AdClosedEvent AdClosed;\n        public event AdOpenedEvent AdOpened;\n\n        public override void OnAdLoaded()\n        {\n            if (AdLoaded != null) this.AdLoaded();\n            base.OnAdLoaded();\n        }\n\n        public override void OnAdClosed()\n        {\n            if (AdClosed != null) this.AdClosed();\n            base.OnAdClosed();\n        }\n        public override void OnAdOpened()\n        {\n            if (AdOpened != null) this.AdOpened();\n             base.OnAdOpened();\n        }\n    }\n}\n</code></pre>\n\n<p>Once you have these componants in place your activity should end up looking like this.</p>\n\n<pre><code class=\"clike\">using System;  \nusing Android.App;  \nusing Android.Content;  \nusing Android.Runtime;  \nusing Android.Views;  \nusing Android.Widget;  \nusing Android.OS;  \nusing Android.Gms.Ads;  \nusing admobDemo;  \nusing admobDemo.AndroidPhone.ad;  \nnamespace admobDemo.AndroidPhone  \n{\n    [Activity(Label = \"admobDemo.AndroidPhone\", MainLauncher = true, Icon = \"@drawable/icon\")]\n    public class Activity1 : Activity\n    {\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n\n            // Set our view from the \"main\" layout resource\n            SetContentView(Resource.Layout.Main);\n\n            var FinalAd = AdWrapper.ConstructFullPageAdd(this, \"your ad id here\");\n            var intlistener = new admobDemo.adlistener();\n            intlistener.AdLoaded += () =&gt; { if (FinalAd.IsLoaded)FinalAd.Show(); };\n            FinalAd.AdListener = intlistener;\n            FinalAd.CustomBuild();\n\n        }\n\n    }\n}\n</code></pre>\n\n<p>To walk you through the code...after <code>SetContentView()</code>....We make a full page Ad <em>(and pass it our AD id)</em>, we create an event listener based on the ad listener class. We set the event listener to trigger an annonymous function that will show the ad. we make the Ad's event listener to be the event listener we made, then we run CustomBuild which builds the Ad and starts loading the Ad. Once the ad loads it will call the event handler, and Boom! Show the ad to the user. </p>\n\n<p>Obviously this is a basic implementation, and showing the ad when the app first starts may, or may not be the best stratergy for <strong>You</strong>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394516646292,"created_by":1,"updated_at":1395278857077,"updated_by":1,"published_at":1394517772380,"published_by":1},{"id":23,"uuid":"fa05a000-0853-4d7d-9f97-aea5cd58766f","title":"You hired adults, not children","slug":"you-hired-adults-not-children","markdown":"One of the things that I often see in our industry is the culture of access control. Security measures are put into place, because you wish to restrict access to a certain thing. Systems like HRIS need such restrictions, as private information should not be publicly available to the company. However often systems that don't need security controls put into place end up having them.\n\n>Most people understand where they fall in the business, and the authority delegated to them.\n\n## Filtering Internet\n\nFiltering internet is a controversial topic in most work places. By actively monitoring your employees activities on the internet, they will feel a sense of distrust. If you trust this person to write code for your production website, you can probably trust them to surf at will. I'm not Advocating that you don't log the activity. However you shouldn't actively block websites, or read the logs. Activity Logs should only be used when legal problems arise, and **not** something you hang over your employee's heads.\n\n\n## Ownership and Directed Management\n\nLet employees have ownership of their work. Let them understand that with the freedom to own things, comes the responsibility to that thing. Employees whom decide to use non-standard technologies, should have to own that thing entirely. Stopping them from using it can be a barrier to productivity, especially if that particular technology is best for their project. \n\nAsking someone to do something without context is demoralizing. Let employees know why you are asking them to do something. This establishes your motives, and gives that person a sense as to how they fit in the organization. If someone asks you to do something, and you are busy let them know why you can't fulfill their request at that moment.\n\n## Access Control: Barrier of productivity\n\nOne of the huge problems in most companies are barriers to productivity. These can be caused by processes, but also access control. Most systems do not need have access control set around them. If you trust your employees, and colleagues to be adults, you should not have to lock them out of xyz system as long at that system does not store sensitive data.  No one manager or even team should have to approve specific patches. Anyone who feels they have authority to approve something, should be able to do so. People fully understand the authority delegated to them. Waiting for specific people can be ultimately a huge barrier to success.\n\n## Overall Message\n\nThere is nothing wrong with being a manager, but try to delegate responsibility to you're subordinates. Give them the trust and respect that they deserve. Employees whom are empowered are more antonymous and are ultimately more productive than their oppressed counterparts.\n\n\n\n\n","html":"<p>One of the things that I often see in our industry is the culture of access control. Security measures are put into place, because you wish to restrict access to a certain thing. Systems like HRIS need such restrictions, as private information should not be publicly available to the company. However often systems that don't need security controls put into place end up having them.</p>\n\n<blockquote>\n  <p>Most people understand where they fall in the business, and the authority delegated to them.</p>\n</blockquote>\n\n<h2 id=\"filteringinternet\">Filtering Internet</h2>\n\n<p>Filtering internet is a controversial topic in most work places. By actively monitoring your employees activities on the internet, they will feel a sense of distrust. If you trust this person to write code for your production website, you can probably trust them to surf at will. I'm not Advocating that you don't log the activity. However you shouldn't actively block websites, or read the logs. Activity Logs should only be used when legal problems arise, and <strong>not</strong> something you hang over your employee's heads.</p>\n\n<h2 id=\"ownershipanddirectedmanagement\">Ownership and Directed Management</h2>\n\n<p>Let employees have ownership of their work. Let them understand that with the freedom to own things, comes the responsibility to that thing. Employees whom decide to use non-standard technologies, should have to own that thing entirely. Stopping them from using it can be a barrier to productivity, especially if that particular technology is best for their project. </p>\n\n<p>Asking someone to do something without context is demoralizing. Let employees know why you are asking them to do something. This establishes your motives, and gives that person a sense as to how they fit in the organization. If someone asks you to do something, and you are busy let them know why you can't fulfill their request at that moment.</p>\n\n<h2 id=\"accesscontrolbarrierofproductivity\">Access Control: Barrier of productivity</h2>\n\n<p>One of the huge problems in most companies are barriers to productivity. These can be caused by processes, but also access control. Most systems do not need have access control set around them. If you trust your employees, and colleagues to be adults, you should not have to lock them out of xyz system as long at that system does not store sensitive data.  No one manager or even team should have to approve specific patches. Anyone who feels they have authority to approve something, should be able to do so. People fully understand the authority delegated to them. Waiting for specific people can be ultimately a huge barrier to success.</p>\n\n<h2 id=\"overallmessage\">Overall Message</h2>\n\n<p>There is nothing wrong with being a manager, but try to delegate responsibility to you're subordinates. Give them the trust and respect that they deserve. Employees whom are empowered are more antonymous and are ultimately more productive than their oppressed counterparts.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1394871474703,"created_by":1,"updated_at":1396408661885,"updated_by":1,"published_at":1395097829604,"published_by":1},{"id":24,"uuid":"fbf78696-48d7-4c93-9c05-83d83edd0d3c","title":"Capturing Client Side JavaScript Errors","slug":"capturing-client-side-javascript-errors","markdown":"Capturing client side errors in my opinion is really good. For starters you can troubleshoot your client side implementation, but you can also make sure a js change did not break certain pages. \n\nBelow is a really simple, yet effective way to capture errors. Eventually you may want to implement something more advanced, but this will get you out of the gate.\n\n```language-javascript\nwindow.onerror = function (errorMsg, url, lineNumber, column, error) {\n    $.ajax('/api/Error', {\n        type: \"POST\",\n        data: {\n            Message: errorMsg,\n            ScriptUrl: url,\n            Line: lineNumber,\n            PageUrl: window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname,\n            StackTrace: function (){return error ? error.stack: '';}\n            \n        }\n    });\n};\n```\nYou will need Jquery, and a server side API to accept the data. Not all browsers are currently including a Stack Trace, so you will only get stacks from certain browsers.","html":"<p>Capturing client side errors in my opinion is really good. For starters you can troubleshoot your client side implementation, but you can also make sure a js change did not break certain pages. </p>\n\n<p>Below is a really simple, yet effective way to capture errors. Eventually you may want to implement something more advanced, but this will get you out of the gate.</p>\n\n<pre><code class=\"language-javascript\">window.onerror = function (errorMsg, url, lineNumber, column, error) {  \n    $.ajax('/api/Error', {\n        type: \"POST\",\n        data: {\n            Message: errorMsg,\n            ScriptUrl: url,\n            Line: lineNumber,\n            PageUrl: window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname,\n            StackTrace: function (){return error ? error.stack: '';}\n\n        }\n    });\n};\n</code></pre>\n\n<p>You will need Jquery, and a server side API to accept the data. Not all browsers are currently including a Stack Trace, so you will only get stacks from certain browsers.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1395273436491,"created_by":1,"updated_at":1395273933823,"updated_by":1,"published_at":1395273451980,"published_by":1},{"id":25,"uuid":"a884217a-07e5-45ef-94a4-e362e4ab1189","title":"Getting SquishIt to work with Nancyfx and Razor (...and other static content issues)","slug":"getting-squishit-to-work-with-nancyfx-and-razor","markdown":"SquishIt is a content bundler and minification tool. The [github](https://github.com/NancyFx/Nancy/wiki/SquishIt-with-Nancy) documentation contains exaples how to install and use it, and a [sample application](https://github.com/jetheredge/SquishIt) is provided. However I had some issues getting it to work with razor so I figured I would share these pain points with you.\n\n## Razor cannot find Assemblies\n\nTo start my project is a Nancyfx application with razor view engine installed. I initially ran `Install-Package SquishIt`. Once installed I [ran through another tutorial](http://blogs.lessthandot.com/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/) that requires some editing of the webconfig. However my webconfig has been altered a lot already, and it did not look like the sample application. I am also not a guru in the web.config so I was kind of confused where to place the sample XML provided. I ignored the webconfig, I fired up nancy and tried to use SquishIt, only to get the following razor compile error.\n\n\n`The type or namespace name 'SquishIt' could not be found (are you missing a using directive or an assembly reference?) `\n\nIt seems you **must** tell razor about squishIt's assemblies. Well It turns out there are basically 2 blocks of entries you need to add to your web.config. First you need to place `<section name=\"razor\" type=\"Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor\"/>` inside `<configSections>` but outside of `<sectionGroup>`. \n\nYou should end up with a section config that looks like the following:\n\n```XML\n<configSections>\n    <sectionGroup name=\"system.web.webPages.razor\" type=\"System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral>\n      <section name=\"pages\" type=\"System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral requirePermission=\"false\" />\n    </sectionGroup>\n  <section name=\"razor\" type=\"Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor\"/>\n  </configSections>\n\n\n```\n\nNext paste the following XML **after** `</configSections>`\n\n```xml\n<razor disableAutoIncludeModelNamespace=\"false\">\n    <assemblies>\n      <add assembly=\"SquishIt.Framework\"/>\n    </assemblies>\n    <namespaces>\n      <add namespace=\"SquishIt.Framework\"/>\n    </namespaces>\n  </razor>\n```\n\nOnce I did this the razor views could compile, and it seemed to work, but not quite...\n\n## SquishIt cannot resolve file paths\n\nOnce I got it up and running, things did not seem right. So I started combing through google. I stumbled across a [thread](https://groups.google.com/forum/#!msg/squishit/YBsUiL9v1Ow/7lBJmMIHGMoJ) where the creator of SquishIt noted SquishIt was having issues with resolving file paths. This was caused by a change to Nancy. \n\nHe notes a [commit](https://github.com/AlexCuse/SquishIt.NancySample/commit/7338026d4d425960151978171596749066b460bc) to the sample application that fixes the problem. In nuget I updated SquishIt with the `-pre` flag so I could get the latest release. Once I did I implemented the following class (from the gitcommit):\n\n```c-like\n\nusing Nancy;\nusing SquishIt.Framework;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace Class.Web\n{\n    public class NancyPathTranslator : IPathTranslator\n    {\n        private readonly IRootPathProvider _rootPathProvider;\n\n        public NancyPathTranslator(IRootPathProvider rootPathProvider)\n        {\n            _rootPathProvider = rootPathProvider;\n        }\n\n        public string ResolveAppRelativePathToFileSystem(string file)\n        {\n            // Remove query string\n            if (file.IndexOf('?') != -1)\n            {\n                file = file.Substring(0, file.IndexOf('?'));\n            }\n\n            return _rootPathProvider.GetRootPath() + \"/\" + file.TrimStart('~').TrimStart('/');\n        }\n\n        public string ResolveFileSystemPathToAppRelative(string file)\n        {\n            var root = new Uri(_rootPathProvider.GetRootPath());\n            return root.MakeRelativeUri(new Uri(file, UriKind.RelativeOrAbsolute)).ToString();\n        }\n    }\n}\n\n\n\n```\nAnd then added \n\n```c-like\n\nBundle.ConfigureDefaults().UsePathTranslator(new NancyPathTranslator(new AspNetRootSourceProvider()));\n\n\n\n```\n\n\n\nWhich seemed to work. I believe if you have your file paths be the same as the paths called by the HTML, it will probably work fine without the above fix.\n\n## Scripts/ folder doesn't work\n\nThis isn't actually a SquishIt problem, but I didn't notice this until I installed SquishIt. Files in a Scripts/ folder will not be served up by Nancy. \n\nBack to Google I went, and I found my answer on [stack overflow](http://stackoverflow.com/a/13517803). Apparently Nancy only uses Content/ as the content directory, for static content.  I ended up adding the following to my ConfigureConventions override. \n\n```c-like\n\n protected override void ConfigureConventions(Nancy.Conventions.NancyConventions nancyConventions)\n        {\n            nancyConventions.StaticContentsConventions.AddDirectory(\"Scripts\",\"Scripts/\");\n            base.ConfigureConventions(nancyConventions);\n        }\n\n\n```\n\nThe AddDirectory requires 2 strings, the first being the route to expect, the second is the directory it needs. This will enable the scripts folder to work in its entirety. You can use this to add other content directories. For me this worked fine.\n\n\n## Serving content\n\nNow that it all worked I added `Bundle.Css().Add(\"~/Content/bootstrap.css\").AsCached(\"bootstrap\", \"~/assets/css/bootstrap\");` to my ApplicationStartup override. Created a module to serve up the static content (stolen from [github](https://github.com/NancyFx/Nancy/wiki/SquishIt-with-Nancy)) .\n\n\n```c-like\n\n\npublic class ServeAsset : NancyModule\n    {\n        public ServeAsset():base(\"/assets\")\n        {\n            Get[\"/js/{name}\"] = parameters => CreateResponse(Bundle.JavaScript().RenderCached((string)parameters.name), Configuration.Instance.JavascriptMimeType);\n\n            Get[\"/css/{name}\"] = parameters => CreateResponse(Bundle.Css().RenderCached((string)parameters.name), Configuration.Instance.CssMimeType);\n        }\n\n        Response CreateResponse(string content, string contentType)\n        {\n            return Response\n                .FromStream(() => new MemoryStream(Encoding.UTF8.GetBytes(content)), contentType)\n                .WithHeader(\"Cache-Control\", \"max-age=45\");\n        }\n    }\n\n\n```\n\n\nThen added ` @Html.Raw(Bundle.Css().RenderCachedAssetTag(\"bootstrap\"))` to my razor view, and by magic it works.\n\nAs a side note, it will only minify if you're not in debug mode. So if you're application's webconfig has `<compilation debug=\"true\" targetFramework=\"4.5\">` you may want flip it to false to see the minified files. \n\nThis behavior can be overridden with the `.ForceRelease()` as part of your bundle. ex. `Bundle.Css().Add(\"~/Content/bootstrap.css\").ForceRelease().AsCached(\"bootstrap\", \"~/assets/css/bootstrap\");`\n\n## Conclusion \n\nWell after the work above I was finally generating minified files. SquishIt's ability to minify quickly is very nice. The way it manages files reminds me of the [MVC4 Bundling](http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification), but SquishIt allows for much greater control over the process.\n\n\n","html":"<p>SquishIt is a content bundler and minification tool. The <a href=\"https://github.com/NancyFx/Nancy/wiki/SquishIt-with-Nancy\">github</a> documentation contains exaples how to install and use it, and a <a href=\"https://github.com/jetheredge/SquishIt\">sample application</a> is provided. However I had some issues getting it to work with razor so I figured I would share these pain points with you.</p>\n\n<h2 id=\"razorcannotfindassemblies\">Razor cannot find Assemblies</h2>\n\n<p>To start my project is a Nancyfx application with razor view engine installed. I initially ran <code>Install-Package SquishIt</code>. Once installed I <a href=\"http://blogs.lessthandot.com/index.php/webdev/serverprogramming/aspnet/squishit-and-nancy/\">ran through another tutorial</a> that requires some editing of the webconfig. However my webconfig has been altered a lot already, and it did not look like the sample application. I am also not a guru in the web.config so I was kind of confused where to place the sample XML provided. I ignored the webconfig, I fired up nancy and tried to use SquishIt, only to get the following razor compile error.</p>\n\n<p><code>The type or namespace name 'SquishIt' could not be found (are you missing a using directive or an assembly reference?)</code></p>\n\n<p>It seems you <strong>must</strong> tell razor about squishIt's assemblies. Well It turns out there are basically 2 blocks of entries you need to add to your web.config. First you need to place <code>&lt;section name=\"razor\" type=\"Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor\"/&gt;</code> inside <code>&lt;configSections&gt;</code> but outside of <code>&lt;sectionGroup&gt;</code>. </p>\n\n<p>You should end up with a section config that looks like the following:</p>\n\n<pre><code class=\"XML\">&lt;configSections&gt;  \n    &lt;sectionGroup name=\"system.web.webPages.razor\" type=\"System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral&gt;\n      &lt;section name=\"pages\" type=\"System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=2.0.0.0, Culture=neutral requirePermission=\"false\" /&gt;\n    &lt;/sectionGroup&gt;\n  &lt;section name=\"razor\" type=\"Nancy.ViewEngines.Razor.RazorConfigurationSection, Nancy.ViewEngines.Razor\"/&gt;\n  &lt;/configSections&gt;\n</code></pre>\n\n<p>Next paste the following XML <strong>after</strong> <code>&lt;/configSections&gt;</code></p>\n\n<pre><code class=\"xml\">&lt;razor disableAutoIncludeModelNamespace=\"false\"&gt;  \n    &lt;assemblies&gt;\n      &lt;add assembly=\"SquishIt.Framework\"/&gt;\n    &lt;/assemblies&gt;\n    &lt;namespaces&gt;\n      &lt;add namespace=\"SquishIt.Framework\"/&gt;\n    &lt;/namespaces&gt;\n  &lt;/razor&gt;\n</code></pre>\n\n<p>Once I did this the razor views could compile, and it seemed to work, but not quite...</p>\n\n<h2 id=\"squishitcannotresolvefilepaths\">SquishIt cannot resolve file paths</h2>\n\n<p>Once I got it up and running, things did not seem right. So I started combing through google. I stumbled across a <a href=\"https://groups.google.com/forum/#!msg/squishit/YBsUiL9v1Ow/7lBJmMIHGMoJ\">thread</a> where the creator of SquishIt noted SquishIt was having issues with resolving file paths. This was caused by a change to Nancy. </p>\n\n<p>He notes a <a href=\"https://github.com/AlexCuse/SquishIt.NancySample/commit/7338026d4d425960151978171596749066b460bc\">commit</a> to the sample application that fixes the problem. In nuget I updated SquishIt with the <code>-pre</code> flag so I could get the latest release. Once I did I implemented the following class (from the gitcommit):</p>\n\n<pre><code class=\"c-like\">using Nancy;  \nusing SquishIt.Framework;  \nusing System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Web;\n\nnamespace Class.Web  \n{\n    public class NancyPathTranslator : IPathTranslator\n    {\n        private readonly IRootPathProvider _rootPathProvider;\n\n        public NancyPathTranslator(IRootPathProvider rootPathProvider)\n        {\n            _rootPathProvider = rootPathProvider;\n        }\n\n        public string ResolveAppRelativePathToFileSystem(string file)\n        {\n            // Remove query string\n            if (file.IndexOf('?') != -1)\n            {\n                file = file.Substring(0, file.IndexOf('?'));\n            }\n\n            return _rootPathProvider.GetRootPath() + \"/\" + file.TrimStart('~').TrimStart('/');\n        }\n\n        public string ResolveFileSystemPathToAppRelative(string file)\n        {\n            var root = new Uri(_rootPathProvider.GetRootPath());\n            return root.MakeRelativeUri(new Uri(file, UriKind.RelativeOrAbsolute)).ToString();\n        }\n    }\n}\n</code></pre>\n\n<p>And then added </p>\n\n<pre><code class=\"c-like\">Bundle.ConfigureDefaults().UsePathTranslator(new NancyPathTranslator(new AspNetRootSourceProvider()));\n</code></pre>\n\n<p>Which seemed to work. I believe if you have your file paths be the same as the paths called by the HTML, it will probably work fine without the above fix.</p>\n\n<h2 id=\"scriptsfolderdoesntwork\">Scripts/ folder doesn't work</h2>\n\n<p>This isn't actually a SquishIt problem, but I didn't notice this until I installed SquishIt. Files in a Scripts/ folder will not be served up by Nancy. </p>\n\n<p>Back to Google I went, and I found my answer on <a href=\"http://stackoverflow.com/a/13517803\">stack overflow</a>. Apparently Nancy only uses Content/ as the content directory, for static content.  I ended up adding the following to my ConfigureConventions override. </p>\n\n<pre><code class=\"c-like\"> protected override void ConfigureConventions(Nancy.Conventions.NancyConventions nancyConventions)\n        {\n            nancyConventions.StaticContentsConventions.AddDirectory(\"Scripts\",\"Scripts/\");\n            base.ConfigureConventions(nancyConventions);\n        }\n</code></pre>\n\n<p>The AddDirectory requires 2 strings, the first being the route to expect, the second is the directory it needs. This will enable the scripts folder to work in its entirety. You can use this to add other content directories. For me this worked fine.</p>\n\n<h2 id=\"servingcontent\">Serving content</h2>\n\n<p>Now that it all worked I added <code>Bundle.Css().Add(\"~/Content/bootstrap.css\").AsCached(\"bootstrap\", \"~/assets/css/bootstrap\");</code> to my ApplicationStartup override. Created a module to serve up the static content (stolen from <a href=\"https://github.com/NancyFx/Nancy/wiki/SquishIt-with-Nancy\">github</a>) .</p>\n\n<pre><code class=\"c-like\">public class ServeAsset : NancyModule  \n    {\n        public ServeAsset():base(\"/assets\")\n        {\n            Get[\"/js/{name}\"] = parameters =&gt; CreateResponse(Bundle.JavaScript().RenderCached((string)parameters.name), Configuration.Instance.JavascriptMimeType);\n\n            Get[\"/css/{name}\"] = parameters =&gt; CreateResponse(Bundle.Css().RenderCached((string)parameters.name), Configuration.Instance.CssMimeType);\n        }\n\n        Response CreateResponse(string content, string contentType)\n        {\n            return Response\n                .FromStream(() =&gt; new MemoryStream(Encoding.UTF8.GetBytes(content)), contentType)\n                .WithHeader(\"Cache-Control\", \"max-age=45\");\n        }\n    }\n</code></pre>\n\n<p>Then added <code>@Html.Raw(Bundle.Css().RenderCachedAssetTag(\"bootstrap\"))</code> to my razor view, and by magic it works.</p>\n\n<p>As a side note, it will only minify if you're not in debug mode. So if you're application's webconfig has <code>&lt;compilation debug=\"true\" targetFramework=\"4.5\"&gt;</code> you may want flip it to false to see the minified files. </p>\n\n<p>This behavior can be overridden with the <code>.ForceRelease()</code> as part of your bundle. ex. <code>Bundle.Css().Add(\"~/Content/bootstrap.css\").ForceRelease().AsCached(\"bootstrap\", \"~/assets/css/bootstrap\");</code></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Well after the work above I was finally generating minified files. SquishIt's ability to minify quickly is very nice. The way it manages files reminds me of the <a href=\"http://www.asp.net/mvc/tutorials/mvc-4/bundling-and-minification\">MVC4 Bundling</a>, but SquishIt allows for much greater control over the process.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1395554660408,"created_by":1,"updated_at":1396315427587,"updated_by":1,"published_at":1395555184840,"published_by":1},{"id":26,"uuid":"5e511653-6e97-4da2-8e90-55d32d65a6f9","title":"Custom error pages in Nancyfx (C# Web Framework)","slug":"custom-error-pages-in-nancy","markdown":"To do custom error pages in Nancy you must implement an IStatusCodeHandler. This class must provide 2 methods. HandlesStatusCode is a bool that basically should tell Nancy if this class will handle the status code. If this returns true then this class will be responsible for handling the request.\n\n\n```csharp \n\n public bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)\n {\n   return (int)statusCode == 404;\n }\n\n public void Handle(HttpStatusCode statusCode, NancyContext context)\n {\n   var response = viewRenderer.RenderView(context, \"Your404View\");\n }\n \n\n```\n\nThe only problem with the above code (which I have seen throughout the net) is you basically have to implement different IStatusCodeHandlers for each type (or types) of status codes.\n\n\nWhat you can do is this *(or scroll to the end to see the final result)*....\n\nFirst add the following properties... _checks will be where we store the list of http requests we will handle...This is a static class so it will be shared in memory with the other objects of the same class.\n\nChecks will be the getter of this information, and viewRenderer will be the mechanism we will render the view.\n\n```\n\nprivate static IEnumerable<int> _checks = new List<int>(); \n\n        public static IEnumerable<int> Checks {  get { return _checks; } }\n\n        private IViewRenderer viewRenderer;\n\n```\nNext add an **IViewRenderer** to your constructor this will be dynamically injected by Nancy.\n\n```csharp\n\npublic CustomStatusCode(IViewRenderer viewRenderer)\n            {\n                this.viewRenderer = viewRenderer;\n            }\n\n```\n\nAfterwards we should add some methods so that people can add, and remove status codes from this store.\n\n\n```\n\n public static void AddCode(int code)\n        {\n            AddCode(new List<int>() {code});\n        }\n        public static void AddCode(IEnumerable<int> code)\n        {\n            _checks = _checks.Union(code);\n        }\n\n        public static void RemoveCode(int code)\n        {\n           RemoveCode(new List<int>() { code });\n        }\n        public static void RemoveCode(IEnumerable<int> code)\n        {\n            _checks = _checks.Except(code);\n        }\n\n```\nNow we have to tell Nancy what we are checking for:\n\n\n```csharp\n\npublic bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)\n        {\n                return (_checks.Any(x => x == (int) statusCode));\n        }\n\n\n```\n\n...and finally we should probably handle the status codes. Below will render a view that is located in Codes/{httprequestnumber}...So for a 404 this will render Codes/404.cshtml (**Note:** if you are not using razor you may wish to change the filename extension.\n\nHow this works is simple, try to render the view if it cannot (ie. it cannot find the file or it runs into a problem) remove the http request type from our list and return the status code, nancy will take it from there.\n\n\n\n```csharp\n\npublic void Handle(HttpStatusCode statusCode, NancyContext context)\n        {\n            try\n            {\n                var response = viewRenderer.RenderView(context, \"/Codes/\" + (int)statusCode + \".cshtml\");\n                response.StatusCode = statusCode;\n                context.Response = response;\n            }\n            catch (Exception)\n            {\n\n                RemoveCode((int)statusCode);\n                context.Response.StatusCode = statusCode;\n            }\n        }\n\n\n```\n\nYou will need to make the necessary view, and you will also need to give it the http codes you wish it to handle. In my case I add them from the web.config during start up. I also use a module to add/remove status codes at will (ill provide a sample of that module below)...\n\n\n## Final Result \n\n### IStatusCodeHandler Class:\n\n```csharp\n\npublic class CustomStatusCode : IStatusCodeHandler\n    {\n        private static IEnumerable<int> _checks = new List<int>(); \n\n        public static IEnumerable<int> Checks {  get { return _checks; } }\n\n        private IViewRenderer viewRenderer;\n\n           public CustomStatusCode(IViewRenderer viewRenderer)\n            {\n                this.viewRenderer = viewRenderer;\n            }\n\n        public bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)\n        {\n                return (_checks.Any(x => x == (int) statusCode));\n        }\n        \n        public static void AddCode(int code)\n        {\n            AddCode(new List<int>() {code});\n        }\n        public static void AddCode(IEnumerable<int> code)\n        {\n            _checks = _checks.Union(code);\n        }\n\n        public static void RemoveCode(int code)\n        {\n           RemoveCode(new List<int>() { code });\n        }\n        public static void RemoveCode(IEnumerable<int> code)\n        {\n            _checks = _checks.Except(code);\n        }\n\n        public static void Disable()\n        {\n            _checks = new List<int>();\n        }\n\n        public void Handle(HttpStatusCode statusCode, NancyContext context)\n        {\n            try\n            {\n                var response = viewRenderer.RenderView(context, \"/Codes/\" + (int) statusCode + \".cshtml\");\n                response.StatusCode = statusCode;\n                context.Response = response;\n            }\n            catch (Exception)\n            {\n\n                RemoveCode((int)statusCode);\n                context.Response.StatusCode = statusCode;\n            }\n        }\n    }\n\n\n```\n\n### Module that provides flexability:\n\n`/error/add/404` will add 404's `/error/remove/404` will remove 404's\n\nYou could make a querystring accept an array if you wish, in my case this isn't needed.\n\n```csharp\n\npublic class StatusCodesModule : NancyModule\n    {\n        public StatusCodesModule()\n            : base(\"error\")\n        {\n            Get[\"/add/{code}\"] = x =>\n            {\n                CustomStatusCode.AddCode(x.code);\n                return \"done\";\n            };\n\n            Get[\"/remove/{code}\"] = x =>\n            {\n                CustomStatusCode.RemoveCode(x.code);\n                return \"done\";\n            };\n\n\n        }\n    }\n\n\n\n\n```\n\n### Bootstrapper startup\n\n```csharp\n\npublic class Bootstrapper : DefaultNancyBootstrapper\n    {\n\n       \n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n            \n            CustomStatusCode.AddCode(404);\n            CustomStatusCode.AddCode(ConfigurationManager.AppSettings[\"HttpErrorCodes\"].Split(',').Select(x => int.Parse(x)));\n           \n\n            base.ApplicationStartup(container, pipelines);\n        }\n        \n    }\n\n\n```","html":"<p>To do custom error pages in Nancy you must implement an IStatusCodeHandler. This class must provide 2 methods. HandlesStatusCode is a bool that basically should tell Nancy if this class will handle the status code. If this returns true then this class will be responsible for handling the request.</p>\n\n<pre><code class=\"csharp \"> public bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)\n {\n   return (int)statusCode == 404;\n }\n\n public void Handle(HttpStatusCode statusCode, NancyContext context)\n {\n   var response = viewRenderer.RenderView(context, \"Your404View\");\n }\n</code></pre>\n\n<p>The only problem with the above code (which I have seen throughout the net) is you basically have to implement different IStatusCodeHandlers for each type (or types) of status codes.</p>\n\n<p>What you can do is this <em>(or scroll to the end to see the final result)</em>....</p>\n\n<p>First add the following properties... _checks will be where we store the list of http requests we will handle...This is a static class so it will be shared in memory with the other objects of the same class.</p>\n\n<p>Checks will be the getter of this information, and viewRenderer will be the mechanism we will render the view.</p>\n\n<pre><code>private static IEnumerable&lt;int&gt; _checks = new List&lt;int&gt;(); \n\n        public static IEnumerable&lt;int&gt; Checks {  get { return _checks; } }\n\n        private IViewRenderer viewRenderer;\n</code></pre>\n\n<p>Next add an <strong>IViewRenderer</strong> to your constructor this will be dynamically injected by Nancy.</p>\n\n<pre><code class=\"csharp\">public CustomStatusCode(IViewRenderer viewRenderer)  \n            {\n                this.viewRenderer = viewRenderer;\n            }\n</code></pre>\n\n<p>Afterwards we should add some methods so that people can add, and remove status codes from this store.</p>\n\n<pre><code> public static void AddCode(int code)\n        {\n            AddCode(new List&lt;int&gt;() {code});\n        }\n        public static void AddCode(IEnumerable&lt;int&gt; code)\n        {\n            _checks = _checks.Union(code);\n        }\n\n        public static void RemoveCode(int code)\n        {\n           RemoveCode(new List&lt;int&gt;() { code });\n        }\n        public static void RemoveCode(IEnumerable&lt;int&gt; code)\n        {\n            _checks = _checks.Except(code);\n        }\n</code></pre>\n\n<p>Now we have to tell Nancy what we are checking for:</p>\n\n<pre><code class=\"csharp\">public bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)  \n        {\n                return (_checks.Any(x =&gt; x == (int) statusCode));\n        }\n</code></pre>\n\n<p>...and finally we should probably handle the status codes. Below will render a view that is located in Codes/{httprequestnumber}...So for a 404 this will render Codes/404.cshtml (<strong>Note:</strong> if you are not using razor you may wish to change the filename extension.</p>\n\n<p>How this works is simple, try to render the view if it cannot (ie. it cannot find the file or it runs into a problem) remove the http request type from our list and return the status code, nancy will take it from there.</p>\n\n<pre><code class=\"csharp\">public void Handle(HttpStatusCode statusCode, NancyContext context)  \n        {\n            try\n            {\n                var response = viewRenderer.RenderView(context, \"/Codes/\" + (int)statusCode + \".cshtml\");\n                response.StatusCode = statusCode;\n                context.Response = response;\n            }\n            catch (Exception)\n            {\n\n                RemoveCode((int)statusCode);\n                context.Response.StatusCode = statusCode;\n            }\n        }\n</code></pre>\n\n<p>You will need to make the necessary view, and you will also need to give it the http codes you wish it to handle. In my case I add them from the web.config during start up. I also use a module to add/remove status codes at will (ill provide a sample of that module below)...</p>\n\n<h2 id=\"finalresult\">Final Result</h2>\n\n<h3 id=\"istatuscodehandlerclass\">IStatusCodeHandler Class:</h3>\n\n<pre><code class=\"csharp\">public class CustomStatusCode : IStatusCodeHandler  \n    {\n        private static IEnumerable&lt;int&gt; _checks = new List&lt;int&gt;(); \n\n        public static IEnumerable&lt;int&gt; Checks {  get { return _checks; } }\n\n        private IViewRenderer viewRenderer;\n\n           public CustomStatusCode(IViewRenderer viewRenderer)\n            {\n                this.viewRenderer = viewRenderer;\n            }\n\n        public bool HandlesStatusCode(HttpStatusCode statusCode, NancyContext context)\n        {\n                return (_checks.Any(x =&gt; x == (int) statusCode));\n        }\n\n        public static void AddCode(int code)\n        {\n            AddCode(new List&lt;int&gt;() {code});\n        }\n        public static void AddCode(IEnumerable&lt;int&gt; code)\n        {\n            _checks = _checks.Union(code);\n        }\n\n        public static void RemoveCode(int code)\n        {\n           RemoveCode(new List&lt;int&gt;() { code });\n        }\n        public static void RemoveCode(IEnumerable&lt;int&gt; code)\n        {\n            _checks = _checks.Except(code);\n        }\n\n        public static void Disable()\n        {\n            _checks = new List&lt;int&gt;();\n        }\n\n        public void Handle(HttpStatusCode statusCode, NancyContext context)\n        {\n            try\n            {\n                var response = viewRenderer.RenderView(context, \"/Codes/\" + (int) statusCode + \".cshtml\");\n                response.StatusCode = statusCode;\n                context.Response = response;\n            }\n            catch (Exception)\n            {\n\n                RemoveCode((int)statusCode);\n                context.Response.StatusCode = statusCode;\n            }\n        }\n    }\n</code></pre>\n\n<h3 id=\"modulethatprovidesflexability\">Module that provides flexability:</h3>\n\n<p><code>/error/add/404</code> will add 404's <code>/error/remove/404</code> will remove 404's</p>\n\n<p>You could make a querystring accept an array if you wish, in my case this isn't needed.</p>\n\n<pre><code class=\"csharp\">public class StatusCodesModule : NancyModule  \n    {\n        public StatusCodesModule()\n            : base(\"error\")\n        {\n            Get[\"/add/{code}\"] = x =&gt;\n            {\n                CustomStatusCode.AddCode(x.code);\n                return \"done\";\n            };\n\n            Get[\"/remove/{code}\"] = x =&gt;\n            {\n                CustomStatusCode.RemoveCode(x.code);\n                return \"done\";\n            };\n\n\n        }\n    }\n</code></pre>\n\n<h3 id=\"bootstrapperstartup\">Bootstrapper startup</h3>\n\n<pre><code class=\"csharp\">public class Bootstrapper : DefaultNancyBootstrapper  \n    {\n\n\n        protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n        {\n\n            CustomStatusCode.AddCode(404);\n            CustomStatusCode.AddCode(ConfigurationManager.AppSettings[\"HttpErrorCodes\"].Split(',').Select(x =&gt; int.Parse(x)));\n\n\n            base.ApplicationStartup(container, pipelines);\n        }\n\n    }\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1396312854050,"created_by":1,"updated_at":1396419488670,"updated_by":1,"published_at":1396315283772,"published_by":1},{"id":27,"uuid":"db44fd76-ac73-4fc7-8c87-df2279e30fff","title":"Value types vs Reference Types in C#","slug":"value-types-vs-reference-types-in-c-and-why-it-matters","markdown":"In C# there are two kinds of types...Value and reference...\n\n## What are Reference Types?\n\nReference types in C# are mostly objects and strings. These are types when placed on a stack refer to a memory address in the heap.\n\n## What are Value Types?\n\nValue types make up the bulk of types in c#. These include int, float, double, long, bool, etc. These types values are only stored in the stack.\n\n## Stack? Heap? What's the difference?\n\nTo put it short, the **stack** is a series of memory blocks (like a scratch pad) that is used for the current thread. The stack is used for basic property data access. Accessing the stack is very rapid, as its only used for trivial data. The heap is an area of memory for dynamic memory allocation. The heap is used to store things in data that are not value types, usually objects and strings. The heap is slower to access, but larger in size.\n\n## Reference type tripping points\n\nReference types are basically pointers. These pointers can trip you up in interesting ways. For example suppose you have an object called MyObjectName:\n\n```\nvar MyObjectName = new SomeClass();\n\n```\n\nand you decide to make someone else's object name the same as you're name \n\n```\n\nvar OtherObjectName = MyName;\n\n```\n\nWhen you change MyName to be something else, you will also change OtherName.\n\nThis is because objects are a reference type. On the stack the object is a pointer reference to the heap. When you make OtherName equal you are pointing it to the same memory address as MyName. You can see this in action [here](https://dotnetfiddle.net/pGh3fT)\n\n```\nvar MyName = new SomeClass();\nvar OtherName = MyName;\nMyName = MyName.Name = \"Joe\";\n//OtherName will now equal Joe\n\n```\n\nThis is also the same for array's if you make 1 array equal another, you will not have 2 array's with the same value. You will have 2 variables that point to the same array.\n\n### So the same must work for value types right?\n\n**No**\n\nIf you have 2 ints and assign one int to equal the other. The value on the stack will be copied to that int, and since the stack value is the actual value they will be independent of each other.\n\n\n## Boxing and Un-Boxing\n\nWhen you have a value type and you want it on the heap you must convert it to an object. This is called boxing\n\n```\nvar val = 3;\nvar x = (object)val;\n\n```\n\nHowever once you do this, the two variables will be independent from each other. So if you change x you won't change val and vice-versa.\n\nTo get the object back on the stack you must cast it back into an int. This is called un-boxing\n\n```\n\nvar y = (int)x;\n\n```\n\n","html":"<p>In C# there are two kinds of types...Value and reference...</p>\n\n<h2 id=\"whatarereferencetypes\">What are Reference Types?</h2>\n\n<p>Reference types in C# are mostly objects and strings. These are types when placed on a stack refer to a memory address in the heap.</p>\n\n<h2 id=\"whatarevaluetypes\">What are Value Types?</h2>\n\n<p>Value types make up the bulk of types in c#. These include int, float, double, long, bool, etc. These types values are only stored in the stack.</p>\n\n<h2 id=\"stackheapwhatsthedifference\">Stack? Heap? What's the difference?</h2>\n\n<p>To put it short, the <strong>stack</strong> is a series of memory blocks (like a scratch pad) that is used for the current thread. The stack is used for basic property data access. Accessing the stack is very rapid, as its only used for trivial data. The heap is an area of memory for dynamic memory allocation. The heap is used to store things in data that are not value types, usually objects and strings. The heap is slower to access, but larger in size.</p>\n\n<h2 id=\"referencetypetrippingpoints\">Reference type tripping points</h2>\n\n<p>Reference types are basically pointers. These pointers can trip you up in interesting ways. For example suppose you have an object called MyObjectName:</p>\n\n<pre><code>var MyObjectName = new SomeClass();\n</code></pre>\n\n<p>and you decide to make someone else's object name the same as you're name </p>\n\n<pre><code>var OtherObjectName = MyName;\n</code></pre>\n\n<p>When you change MyName to be something else, you will also change OtherName.</p>\n\n<p>This is because objects are a reference type. On the stack the object is a pointer reference to the heap. When you make OtherName equal you are pointing it to the same memory address as MyName. You can see this in action <a href=\"https://dotnetfiddle.net/pGh3fT\">here</a></p>\n\n<pre><code>var MyName = new SomeClass();  \nvar OtherName = MyName;  \nMyName = MyName.Name = \"Joe\";  \n//OtherName will now equal Joe\n</code></pre>\n\n<p>This is also the same for array's if you make 1 array equal another, you will not have 2 array's with the same value. You will have 2 variables that point to the same array.</p>\n\n<h3 id=\"sothesamemustworkforvaluetypesright\">So the same must work for value types right?</h3>\n\n<p><strong>No</strong></p>\n\n<p>If you have 2 ints and assign one int to equal the other. The value on the stack will be copied to that int, and since the stack value is the actual value they will be independent of each other.</p>\n\n<h2 id=\"boxingandunboxing\">Boxing and Un-Boxing</h2>\n\n<p>When you have a value type and you want it on the heap you must convert it to an object. This is called boxing</p>\n\n<pre><code>var val = 3;  \nvar x = (object)val;\n</code></pre>\n\n<p>However once you do this, the two variables will be independent from each other. So if you change x you won't change val and vice-versa.</p>\n\n<p>To get the object back on the stack you must cast it back into an int. This is called un-boxing</p>\n\n<pre><code>var y = (int)x;\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1397096479044,"created_by":1,"updated_at":1437887291052,"updated_by":1,"published_at":1397096877674,"published_by":1},{"id":28,"uuid":"3049df60-0b87-48c4-aace-c155fa648215","title":"Must have tool: LinqPad","slug":"must-have-tool-linqpad","markdown":"[LinqPad](http://linqpad.net) is an interactive C#/F#/VB.NET scratchpad that lets you run arbitrary C#/F#/VB.NET code, and also lets you query databases with linq.\n\n## What did that method do again?\n\nWe have all been there....its way past your bedtime, and you cannot for the life of you remember what happens when string.Concat is called. You could try to just run something quick in your project to find out, but that would take time to build. You could google the result, and hope you can find the answer quickly....Or you can open linqpad and run the method!\n\n![query result from linqpad ](/content/images/2014/Apr/linqpad.PNG)\n\nOk of course you would never forget about string.Concat, but what about a method in a .dll? Well it can do that too!\n\n## Quickly, I can't figure out the SQL Codez!\n\nOk so if you are like myself you probably suck at SQL...I was once good until I saw the Linq light...only dynamically creating linq queries is never as good as having real stored procedures. The [Linq Website](https://www.linqpad.net/WhyLINQBeatsSQL.aspx) has more examples of using SQL with linqpad than I could ever come up with.\n\nTo put it simply writing in linq is far more expressive than SQL. If I need to write a complex SQL query I usually Figure out the linq query, and when I am happy with the results, I click the SQL button. Magically linqpad returns the SQL code for the linq query!\n\n## Can I debug my dll's ran in LinqPad using Visual Studio?\n\nBelieve it or not...you can...Linqpad will easily import and run dll's. Once you have pointed linqpad to dll files, and imported the namespaces, you will be good to go. To attach visual studio as a debugger simply click debug, attach to process, and click on the linqpad process, with the proper project for debugging open. Once you start running your dll's in linqpad, the debugger will pickup what you are doing and stop the process at any linebreaks. The great part about this, is you can debug class libraries with linqpad without having to fire up a secondary project to run the code in.\n\n## TL;DR?\nLinqpad converts linq to sql, and runs your .NET code from a simple scratchpad...If you suck at sql, or you want to quickly test something LinqPad rocks!","html":"<p><a href=\"http://linqpad.net\">LinqPad</a> is an interactive C#/F#/VB.NET scratchpad that lets you run arbitrary C#/F#/VB.NET code, and also lets you query databases with linq.</p>\n\n<h2 id=\"whatdidthatmethoddoagain\">What did that method do again?</h2>\n\n<p>We have all been there....its way past your bedtime, and you cannot for the life of you remember what happens when string.Concat is called. You could try to just run something quick in your project to find out, but that would take time to build. You could google the result, and hope you can find the answer quickly....Or you can open linqpad and run the method!</p>\n\n<p><img src=\"/content/images/2014/Apr/linqpad.PNG\" alt=\"query result from linqpad \" /></p>\n\n<p>Ok of course you would never forget about string.Concat, but what about a method in a .dll? Well it can do that too!</p>\n\n<h2 id=\"quicklyicantfigureoutthesqlcodez\">Quickly, I can't figure out the SQL Codez!</h2>\n\n<p>Ok so if you are like myself you probably suck at SQL...I was once good until I saw the Linq light...only dynamically creating linq queries is never as good as having real stored procedures. The <a href=\"https://www.linqpad.net/WhyLINQBeatsSQL.aspx\">Linq Website</a> has more examples of using SQL with linqpad than I could ever come up with.</p>\n\n<p>To put it simply writing in linq is far more expressive than SQL. If I need to write a complex SQL query I usually Figure out the linq query, and when I am happy with the results, I click the SQL button. Magically linqpad returns the SQL code for the linq query!</p>\n\n<h2 id=\"canidebugmydllsraninlinqpadusingvisualstudio\">Can I debug my dll's ran in LinqPad using Visual Studio?</h2>\n\n<p>Believe it or not...you can...Linqpad will easily import and run dll's. Once you have pointed linqpad to dll files, and imported the namespaces, you will be good to go. To attach visual studio as a debugger simply click debug, attach to process, and click on the linqpad process, with the proper project for debugging open. Once you start running your dll's in linqpad, the debugger will pickup what you are doing and stop the process at any linebreaks. The great part about this, is you can debug class libraries with linqpad without having to fire up a secondary project to run the code in.</p>\n\n<h2 id=\"tldr\">TL;DR?</h2>\n\n<p>Linqpad converts linq to sql, and runs your .NET code from a simple scratchpad...If you suck at sql, or you want to quickly test something LinqPad rocks!</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1397530786341,"created_by":1,"updated_at":1397643763051,"updated_by":1,"published_at":1397603673976,"published_by":1},{"id":29,"uuid":"34404fa6-42b4-4430-88de-78a962f0f5dd","title":"ChromeOS: Gateway to portable productivity","slug":"chromeos-gateway-to-portable-productivity","markdown":"Up until the last few years the only devices on the market were all full operating system work horses. However the majority of us would easily sacrifice functionality for portability. This statement has been backed up by the increase of market demand for tablets and ultrabooks over the years.\n\n## Netbook Past\n\nWhen netbooks first came out they were running Window XP with an Intel Atom Processor. I was one of the early adopters, getting a first model Aspire One, and at the time I was blown away. I remember comparing it to the first ASUS EE, and the other offerings at the time.\n\nIn recent years netbooks have been replaced by ultrabooks, and tablets. Being a person that likes a physical keyboard I was put off from the tablets, and the ultrabooks always seemed expensive for a touch screen I was never going to use.\n\n## Power Users and tablets\n\nTaking a side step for a moment. I know I am more of a unique customer than most. I believe the keyboard will always be a faster mechanism to productivity than a touch screen. I cannot live without a physical keyboard. Most power users of computers usually have this kind of mentality. So the form factor of a netbook is more suitable than a tablet.\n\n### Browser Applications\n\nThe great part about the advances in web technologies over the few years is that most power applications have become browser oriented. Most of my development work can now be done in a browser, which expands my use of a low profile device. ChromeOS brings a natural browser experience to applications that can work both online, and offline.\n\n## Why ChromeOS?\n\nChromeOS has a great expanse of apps that can work both offline and online. The list of apps includes RDP clients, hundreds of workflow management tools, and various coding IDE's. Most Chromebooks are very portable, and very inexpensive. Plus the 7 second boot time, and 8 hour battery life (on average) is **amazing**.\n\n### Crouton for local development\n\nIf you wish to do offline development crouton (basically ubuntu Chroot) can provide you a more full operating system for Chrome. This is a great way to maintain the lightweight basic ChromeOS while having immediate access to a more full operating system experience. This is obviously a basic hack to the ChromeOS, but it provides a great way to create applications locally. I think most people who get a Chromebook are blown away at how much is possible without the ubuntu sideload.\n\n### Remote Desktop\n\nThe old school approach to coding on the go is still viable. The RDP experience (if you don't mind windows) provides a full desktop session remotely. For intensive coding projects on the go this was always my alternative for working on projects everywhere. ChromeOS has more than one RDP application in the Chrome store, and most of them do a great job.\n\n## tl;dr\nChromebooks offer inexpensive way to leverage both cloud, and offline technologies to provide productivity, without sacrificing portability.","html":"<p>Up until the last few years the only devices on the market were all full operating system work horses. However the majority of us would easily sacrifice functionality for portability. This statement has been backed up by the increase of market demand for tablets and ultrabooks over the years.</p>\n\n<h2 id=\"netbookpast\">Netbook Past</h2>\n\n<p>When netbooks first came out they were running Window XP with an Intel Atom Processor. I was one of the early adopters, getting a first model Aspire One, and at the time I was blown away. I remember comparing it to the first ASUS EE, and the other offerings at the time.</p>\n\n<p>In recent years netbooks have been replaced by ultrabooks, and tablets. Being a person that likes a physical keyboard I was put off from the tablets, and the ultrabooks always seemed expensive for a touch screen I was never going to use.</p>\n\n<h2 id=\"powerusersandtablets\">Power Users and tablets</h2>\n\n<p>Taking a side step for a moment. I know I am more of a unique customer than most. I believe the keyboard will always be a faster mechanism to productivity than a touch screen. I cannot live without a physical keyboard. Most power users of computers usually have this kind of mentality. So the form factor of a netbook is more suitable than a tablet.</p>\n\n<h3 id=\"browserapplications\">Browser Applications</h3>\n\n<p>The great part about the advances in web technologies over the few years is that most power applications have become browser oriented. Most of my development work can now be done in a browser, which expands my use of a low profile device. ChromeOS brings a natural browser experience to applications that can work both online, and offline.</p>\n\n<h2 id=\"whychromeos\">Why ChromeOS?</h2>\n\n<p>ChromeOS has a great expanse of apps that can work both offline and online. The list of apps includes RDP clients, hundreds of workflow management tools, and various coding IDE's. Most Chromebooks are very portable, and very inexpensive. Plus the 7 second boot time, and 8 hour battery life (on average) is <strong>amazing</strong>.</p>\n\n<h3 id=\"croutonforlocaldevelopment\">Crouton for local development</h3>\n\n<p>If you wish to do offline development crouton (basically ubuntu Chroot) can provide you a more full operating system for Chrome. This is a great way to maintain the lightweight basic ChromeOS while having immediate access to a more full operating system experience. This is obviously a basic hack to the ChromeOS, but it provides a great way to create applications locally. I think most people who get a Chromebook are blown away at how much is possible without the ubuntu sideload.</p>\n\n<h3 id=\"remotedesktop\">Remote Desktop</h3>\n\n<p>The old school approach to coding on the go is still viable. The RDP experience (if you don't mind windows) provides a full desktop session remotely. For intensive coding projects on the go this was always my alternative for working on projects everywhere. ChromeOS has more than one RDP application in the Chrome store, and most of them do a great job.</p>\n\n<h2 id=\"tldr\">tl;dr</h2>\n\n<p>Chromebooks offer inexpensive way to leverage both cloud, and offline technologies to provide productivity, without sacrificing portability.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1398801601523,"created_by":1,"updated_at":1398801606066,"updated_by":1,"published_at":1398801606067,"published_by":1},{"id":30,"uuid":"3b3ed1d9-d5ce-47f1-81cf-a06fc383baf9","title":"Watching the Watchers: Monitorama PDX 2014 Day One","slug":"watching-the-watchers-monitorama-day-one","markdown":"* [Day Two](https://blog.tommyparnell.com/watching-the-watchers-monitorama-pdx-2014-day-two/)\n\nI am here in lovely Portland Oregon attending [Monitorama](http://monitorama.com/). Monitorama is a 3 day open source monitoring convention.\n\nMonitorama had catered food, and drink. The food was plentiful and delicious, and the drinks were amazing.\n\nThere were 10 talks, I have made a quick summarization below. I don't have time to write in detail about each one, but I am sure you will get the gist from the basic summary.\n\n## Please, no More Minutes, Milliseconds, Monoliths... or Monitoring Tools!\n\nThe first talk from Adrian Crockford was about monitoring by the second as opposed to by the minute. [Gene Kim's notes](http://www.williamhertling.com/2014/05/adrian-cockcroft-on-monitoring-cloud.html) summarize it better than I do, but in short: focus more on monitoring tools for developers, monitor by the second, and learn to analyze the data properly. \n\n## Computers are a Sadness, I am the Cure\n\nJason Mickens provided the funnest talk of the day. I couldn't fully grasp the message, but In short Bane == NoSql, Cloud == Crazy Train and stop talking about map reduce.\n\n![](/content/images/2014/May/Screenshot-2014-05-06-at-9-52-14-AM.png)\n\n## Simple math to get some signal out of your noisy sea of data\n\nToufic Boubez Provided the third talk of the day. Talking about (not so) simple math around your data. He urges people to stop treating data as Gaussian, and truly understand how their data gets arranged.\n\nHe pushed for using algorithms with sliding means as a way to truely understand your data. Just remember you spent time collecting it, you should spend time analyzing it.\n\n## The Care and Feeding of Monitoring\n\nGreat talk from Katherine Daniels, about how everyone needs to work together better to monitor things. She noted that no one sets out to make bad decisions, but bad things sometimes happen because of decisions made. \n\n\n*We take some things, and put internets on them ~ Dan Slimmon*\n\nDan Slimmon's talked a lot about alarms. Smoke detectors people pay attention to, but no one pays attention to car alarms. \n\nHe talked a lot about how to actually use probability statistics to understand how often someone will get phone called on an actual issue or not.\n\n## Metrics 2.0\n\nThis was a strange, yet insightful talk about how metrics should be more self decriptive. Dieter Plaetinck wants people to try to use a new standard in [metrics](http://metrics20.org). I'm not sure how I feel about metrics 2.0, but I do agree that metric names can be ambiguous.\n\n## Our Most Wicked Problem\n\n...A talk about the diversity problems in the industry today. Ashe Dryden talked a lot about how women are far more excluded than included in IT. This was an insightful talk, about how we need to provide space to all of the women coming into IT.\n\n## The cost and complexity of reactive monitoring\n\nChris Baker talks a lot about how reactive monitoring is terrible, and proactive is the way to go. Most humans never run though a logical sequence of troubleshooting steps, but tend to blame the newest thing they put into production.\n\n## From Zero To Visibility\n\nBridget Kromhout finished up the day with a talk about setting up the monitoring in her company from nothing. Going from a bunch of random shell scripts, to a proper monitoring framework (nagios, graphite, statsd, pingdom, etc.). Some of the pain points she encountered were around budgetary restrictions.\n\n\n## After party\n\nThe after party was great, the music was quite loud which made it hard to talk to people. I talked quite a bit to the New Relic crew about what they were doing. The one thing I was blown away by was how welcoming everyone was, and how everyone were fighting the same problems in their respective companies.","html":"<ul>\n<li><a href=\"https://blog.tommyparnell.com/watching-the-watchers-monitorama-pdx-2014-day-two/\">Day Two</a></li>\n</ul>\n\n<p>I am here in lovely Portland Oregon attending <a href=\"http://monitorama.com/\">Monitorama</a>. Monitorama is a 3 day open source monitoring convention.</p>\n\n<p>Monitorama had catered food, and drink. The food was plentiful and delicious, and the drinks were amazing.</p>\n\n<p>There were 10 talks, I have made a quick summarization below. I don't have time to write in detail about each one, but I am sure you will get the gist from the basic summary.</p>\n\n<h2 id=\"pleasenomoreminutesmillisecondsmonolithsormonitoringtools\">Please, no More Minutes, Milliseconds, Monoliths... or Monitoring Tools!</h2>\n\n<p>The first talk from Adrian Crockford was about monitoring by the second as opposed to by the minute. <a href=\"http://www.williamhertling.com/2014/05/adrian-cockcroft-on-monitoring-cloud.html\">Gene Kim's notes</a> summarize it better than I do, but in short: focus more on monitoring tools for developers, monitor by the second, and learn to analyze the data properly. </p>\n\n<h2 id=\"computersareasadnessiamthecure\">Computers are a Sadness, I am the Cure</h2>\n\n<p>Jason Mickens provided the funnest talk of the day. I couldn't fully grasp the message, but In short Bane == NoSql, Cloud == Crazy Train and stop talking about map reduce.</p>\n\n<p><img src=\"/content/images/2014/May/Screenshot-2014-05-06-at-9-52-14-AM.png\" alt=\"\" /></p>\n\n<h2 id=\"simplemathtogetsomesignaloutofyournoisyseaofdata\">Simple math to get some signal out of your noisy sea of data</h2>\n\n<p>Toufic Boubez Provided the third talk of the day. Talking about (not so) simple math around your data. He urges people to stop treating data as Gaussian, and truly understand how their data gets arranged.</p>\n\n<p>He pushed for using algorithms with sliding means as a way to truely understand your data. Just remember you spent time collecting it, you should spend time analyzing it.</p>\n\n<h2 id=\"thecareandfeedingofmonitoring\">The Care and Feeding of Monitoring</h2>\n\n<p>Great talk from Katherine Daniels, about how everyone needs to work together better to monitor things. She noted that no one sets out to make bad decisions, but bad things sometimes happen because of decisions made. </p>\n\n<p><em>We take some things, and put internets on them ~ Dan Slimmon</em></p>\n\n<p>Dan Slimmon's talked a lot about alarms. Smoke detectors people pay attention to, but no one pays attention to car alarms. </p>\n\n<p>He talked a lot about how to actually use probability statistics to understand how often someone will get phone called on an actual issue or not.</p>\n\n<h2 id=\"metrics20\">Metrics 2.0</h2>\n\n<p>This was a strange, yet insightful talk about how metrics should be more self decriptive. Dieter Plaetinck wants people to try to use a new standard in <a href=\"http://metrics20.org\">metrics</a>. I'm not sure how I feel about metrics 2.0, but I do agree that metric names can be ambiguous.</p>\n\n<h2 id=\"ourmostwickedproblem\">Our Most Wicked Problem</h2>\n\n<p>...A talk about the diversity problems in the industry today. Ashe Dryden talked a lot about how women are far more excluded than included in IT. This was an insightful talk, about how we need to provide space to all of the women coming into IT.</p>\n\n<h2 id=\"thecostandcomplexityofreactivemonitoring\">The cost and complexity of reactive monitoring</h2>\n\n<p>Chris Baker talks a lot about how reactive monitoring is terrible, and proactive is the way to go. Most humans never run though a logical sequence of troubleshooting steps, but tend to blame the newest thing they put into production.</p>\n\n<h2 id=\"fromzerotovisibility\">From Zero To Visibility</h2>\n\n<p>Bridget Kromhout finished up the day with a talk about setting up the monitoring in her company from nothing. Going from a bunch of random shell scripts, to a proper monitoring framework (nagios, graphite, statsd, pingdom, etc.). Some of the pain points she encountered were around budgetary restrictions.</p>\n\n<h2 id=\"afterparty\">After party</h2>\n\n<p>The after party was great, the music was quite loud which made it hard to talk to people. I talked quite a bit to the New Relic crew about what they were doing. The one thing I was blown away by was how welcoming everyone was, and how everyone were fighting the same problems in their respective companies.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399384408136,"created_by":1,"updated_at":1399475352641,"updated_by":1,"published_at":1399386114227,"published_by":1},{"id":31,"uuid":"30767be6-16b2-48da-9c85-57754564c578","title":"Watching the Watchers: Monitorama PDX 2014 Day Two","slug":"watching-the-watchers-monitorama-pdx-2014-day-two","markdown":"* [Day One](https://blog.tommyparnell.com/watching-the-watchers-monitorama-day-one/)\n\nDay 2 was full of math based paranoia, math, and puppet(s)....\n\n\n## Auditing all the things\": The future of smarter monitoring and detection\n\nJen Andre started off with a talk about auditd, and how to audit everything in your frinastructure. Using custom logging tools you can watch the command flow for every logged in session, even when the session su's to a different user.\n\n## Is There An Echo In Here?: Applying Audio DSP algorithms to monitoring\n\nDSP (Digital Signal Processing) applied to monitoring data, could convert a very noisey graph, into a very readable one as Noah Kantrowitz pointed out in the second talk of the day.\n\n## A Melange of Methods for Manipulating Monitored Data\n\nDr Neil J. Gunther talked about how he is applying maths (yes plural :P) to gathered data metrics. He points out that you should never trust your data (even if it was gathered acuratly), and always trust in your instincts. \n\n## The Final Crontab\n\nCrontabber is a jobs engine produced at Mozzilla. Selena Deckelmann talks about how it works, and why it is better than regular cron. The huge advantage to use it, is the jobs can have dependancies to each other.\n\n## This One Weird Time-Series Math Trick\n\nBaron Schwartz delivered a very math centric talk about using math (like sliding averages, holt-winters, etc.) to properly analize your data.\n\n## The Lifecycle of an Outage\n\nScott Sanders talks was about how hipchat, and hubot are coming together to help dealing with a problem. He noted at github the bots can embed graph data into hip chat that others can see as they hop online. He also talked about analyzing your processes after an outage, to improve the handling of future issues.\n\n## A whirlwind tour of Etsy's monitoring stack\n\nEtsy is able to deploy their application at any moment in time. Doing this requires both great CI tools, but also even better monitoring tools. Having power tools like ganglia, graphite, splunk, logstash. They are able to gain great insight into their application.\n\n## Wiff: The Wayfair Network Sniffer\n\nWireshark as a Service, wiff is a network traffic logging tool developed at wayfair. Able to log traffic throughout the network layer, wiff is able to help you understand your network traffic. \n\nAccording to the presenter Dan Rowe, wiff helped wayfair detect a bug in their cookie generating algorithm.\n\n## Web performance observability\n\n[Web Rockit](http://webrockit.io/) is a simple tool that detects web loading performace. The tool uses Phantom.js (headless webkit browser) to load the page and gather statistics during the load. These statistics can help you determine what is going on when your webpage loads. \n\n## Lightning Talks\n\nThe one talk that stood out to me at the lightning talks is never manage your software like a [17th century ship](http://pete.io/Jra5).\n\n## Puppet Afterparty\n\nWhile the line for the beer was long, and the food was in short supply the puppet party was amazing. Ping pong filled the air, whilst tech nerds played board games. The people that work at puppet were very friendly and eager to talk about programming. \n","html":"<ul>\n<li><a href=\"https://blog.tommyparnell.com/watching-the-watchers-monitorama-day-one/\">Day One</a></li>\n</ul>\n\n<p>Day 2 was full of math based paranoia, math, and puppet(s)....</p>\n\n<h2 id=\"auditingallthethingsthefutureofsmartermonitoringanddetection\">Auditing all the things\": The future of smarter monitoring and detection</h2>\n\n<p>Jen Andre started off with a talk about auditd, and how to audit everything in your frinastructure. Using custom logging tools you can watch the command flow for every logged in session, even when the session su's to a different user.</p>\n\n<h2 id=\"isthereanechoinhereapplyingaudiodspalgorithmstomonitoring\">Is There An Echo In Here?: Applying Audio DSP algorithms to monitoring</h2>\n\n<p>DSP (Digital Signal Processing) applied to monitoring data, could convert a very noisey graph, into a very readable one as Noah Kantrowitz pointed out in the second talk of the day.</p>\n\n<h2 id=\"amelangeofmethodsformanipulatingmonitoreddata\">A Melange of Methods for Manipulating Monitored Data</h2>\n\n<p>Dr Neil J. Gunther talked about how he is applying maths (yes plural :P) to gathered data metrics. He points out that you should never trust your data (even if it was gathered acuratly), and always trust in your instincts. </p>\n\n<h2 id=\"thefinalcrontab\">The Final Crontab</h2>\n\n<p>Crontabber is a jobs engine produced at Mozzilla. Selena Deckelmann talks about how it works, and why it is better than regular cron. The huge advantage to use it, is the jobs can have dependancies to each other.</p>\n\n<h2 id=\"thisoneweirdtimeseriesmathtrick\">This One Weird Time-Series Math Trick</h2>\n\n<p>Baron Schwartz delivered a very math centric talk about using math (like sliding averages, holt-winters, etc.) to properly analize your data.</p>\n\n<h2 id=\"thelifecycleofanoutage\">The Lifecycle of an Outage</h2>\n\n<p>Scott Sanders talks was about how hipchat, and hubot are coming together to help dealing with a problem. He noted at github the bots can embed graph data into hip chat that others can see as they hop online. He also talked about analyzing your processes after an outage, to improve the handling of future issues.</p>\n\n<h2 id=\"awhirlwindtourofetsysmonitoringstack\">A whirlwind tour of Etsy's monitoring stack</h2>\n\n<p>Etsy is able to deploy their application at any moment in time. Doing this requires both great CI tools, but also even better monitoring tools. Having power tools like ganglia, graphite, splunk, logstash. They are able to gain great insight into their application.</p>\n\n<h2 id=\"wiffthewayfairnetworksniffer\">Wiff: The Wayfair Network Sniffer</h2>\n\n<p>Wireshark as a Service, wiff is a network traffic logging tool developed at wayfair. Able to log traffic throughout the network layer, wiff is able to help you understand your network traffic. </p>\n\n<p>According to the presenter Dan Rowe, wiff helped wayfair detect a bug in their cookie generating algorithm.</p>\n\n<h2 id=\"webperformanceobservability\">Web performance observability</h2>\n\n<p><a href=\"http://webrockit.io/\">Web Rockit</a> is a simple tool that detects web loading performace. The tool uses Phantom.js (headless webkit browser) to load the page and gather statistics during the load. These statistics can help you determine what is going on when your webpage loads. </p>\n\n<h2 id=\"lightningtalks\">Lightning Talks</h2>\n\n<p>The one talk that stood out to me at the lightning talks is never manage your software like a <a href=\"http://pete.io/Jra5\">17th century ship</a>.</p>\n\n<h2 id=\"puppetafterparty\">Puppet Afterparty</h2>\n\n<p>While the line for the beer was long, and the food was in short supply the puppet party was amazing. Ping pong filled the air, whilst tech nerds played board games. The people that work at puppet were very friendly and eager to talk about programming. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1399474135521,"created_by":1,"updated_at":1399475299180,"updated_by":1,"published_at":1399475071804,"published_by":1},{"id":32,"uuid":"40a9dd14-af70-4c85-83ea-7b104ef9e7d2","title":"Must Have Tool: NDepend","slug":"must-have-tool-ndepend","markdown":"Code quality tooling has become a bigger, and bigger industry. Tools like [Resharper](http://www.jetbrains.com/resharper/), and [stylecop](http://stylecop.codeplex.com/releases/view/79972) have been telling us how bad us human beings are at developing code.\n\nThe one problem I have always had with these tools is they dont go above and beyond to help you understand your code at a higher level.\n\n\n## So what is NDepend?\n\n![NDepend Logo](/content/images/2014/May/ndep.PNG)\n\nAccording to [their website](http://www.ndepend.com/Features.aspx) NDepend does everything from code rules, code querying, comparing builds, CI reporting, complexity diagramming, and the list goes on and on.\n\nWhen I first heard of it, I assume it was more resharper, and less stylecop, but I was wrong.\n\n## My Code Quality Beginnings...\n\nBefore I go on about NDepend I have to tell you my history with code quality tools. \n\n### JS Lint == /sadface \n\nI first learned of code quality tools, when I heard about [JSLint](http://www.jslint.com/). As JavaScript was my first programming language, I naturally thought I was amazing at it. However being a weakly type language, with horrible origins, it was easy to make bad code.\n\nThe first code I pumped into JS lint returned with thousands of changes I needed to make, and I wasn't sure where to start. JSLint did a good job of destroying my ego, and de-motivating me as a human being. I took personal offense to it, even though it was trying to help me. Furthermore because it didn't really integrate into my IDE, it was harder for me to track down issues.\n\n### Stylecop \n\n![](/content/images/2014/May/91wmm.jpg)\n\nMy next attempt at using code quality tools was stylecop. Stylecop is a simple C# visual studio plugin that tells you where your code does not follow best practices. The first time I ran my code though stylecop it threw back over 700 warnings. The fact that it found so much to change was great, but the fact that everything was a warning, and nothing was an error was very concerning. Especially since I knew some bad code was in that codebase.\n\nAlso with the overall lack of visualization stylecop was less than perfect. You would have to double click on every warning, and hope it brought you to the proper offending code.\n\n### Mono.Gendarme\n\nSo recently I started using Gendarme to do code analyzation. I commit code, [jenkins](http://jenkins-ci.org/) builds it, gendarme analyzes it, and jenkins would host my gendarme graphs. This was great, because jenkins could show the code gendarme was complaining about. Gendarme does not make everything warnings, and it does a good job at analyzing code.\n\nMy major problem with this, is that I'd have to commit bad code to the code base, then go back and fix the problems. Instead of fixing them before they landed in jenkins lap.\n\n### Resharper\n\n\nNow before I go on I have to mention Resharper. Resharper is a developer productivity tool that uses a lot of coding standards/rules to make sure your code does not suck. However this is no replacement for a true code quality tool. Resharper is more about productivity (fixing lambdas, making sure your linq statements are readable, etc.). The big difference is that Resharper lacks in the reporting deparment, it does not capture trends, and does not enforce certain best practice rules. \n\nResharper only looks at source code, where as most other static analysis tools also look at compiled IL code as well.\n\n## NDepend: First Impressions\n\n>NDepend runs extremely fast, and it never gets in your way.\n\nSo I when first fired up Visual Studio, and started using NDepend I was blown away with the performance. NDepend Runs extremely fast, and never crashes visual studio.  I needed a few minutes to process what I was looking at, and before long I realized NDepend had summerized my whole code base into one very sweet dashboard. As I clicked around the fun started to really begin...\n\n\n![](/content/images/2014/May/ndepdash.PNG)\n\n\n![Sample NDepend Dasbboard](/content/images/2014/May/NDependDash.PNG)\n\n\n\n## NDepend: Organized Code Quality\n\nSo the major feature I was blown away by with NDepend was how clean, and organized the code rules are. The tool really tells you which things you need to fix **now**, and which things can wait. You can easily turn rules on, and off with a click a checkbox. Everything is grouped together nicely. \n\n![Code Quality dashboard](/content/images/2014/May/errorsOrganized.PNG)\n\n>NDepend uses a code querying engine (basically `linqTo<YourCodeHere>`).\n\n The code quality rules, uses the NDepends querying engine to get your code. When you click on a rule the Linq query used will be displayed in a separate window. You can use this window to create your own rules, using the same querying engine. The following is a query to find code that should not be declared public.\n \n<pre>\n //<Name>Avoid public methods not publicly visible</Name>\n// Matched methods are declared public but are not publicly visible by assemblies consumers.\n// Their visibility level must be decreased.\n\nwarnif count > 0\nfrom m in JustMyCode.Methods where \n   !m.IsPubliclyVisible && m.IsPublic &&\n\n   // Eliminate virtual methods\n   !m.IsVirtual &&\n   // Eliminate interface and delegate types\n   !m.ParentType.IsInterface &&\n   !m.ParentType.IsDelegate &&\n   // Eliminate default constructors\n   !(m.IsConstructor && m.NbParameters == 0) &&\n   // Eliminate operators that must be declared public\n   !m.IsOperator &&\n   // Eliminate methods generated by compiler\n   !m.IsGeneratedByCompiler \nselect m\n\n</pre>\n\n## NDepend: Code Dependency Management\n\nThe other feature, and its probably more of a series of features is how NDepend manages code dependency. This does this with some awesome interactive graphs. The [documents](http://www.ndepend.com/Doc_VS_Arch.aspx#Dep) show pretty much all the graphs, and I wont get into it all, but from a high level they provide great visualizations of your code. \n\n>Graphing everything from class inheritance, to dependency graphs NDepend brings a new level of graphing to code quality tools.\n\nThe tool allows you to find poor architectural decisions, and helps you correct them in the early days. Before the bad design decisions really bite you.\n \n## But wait there's more!\n\nIf you thought this was a simple visual studio plugin, you would be wrong.\n\n>Having code quality in the build system is a must. I have always made sure code quality was also being measured in my CI pipline, and you should to.\n\nNDepend plugs into your build system to provide long term trend reporting. These reports can include LOC trends, which are compared against rule violation trends. NDepend reports can show your Test code coverage, code complexity, and code composition as your application matures.\n\nWith an optional separate GUI, command line tool, and pluggable rules engine, NDepend provides a new level of code quality management.\n\n\n## tl;dr?\n\nNDepend is a code quality tool that really shows your code smells in new ways. with long term trend reporting, heat maps, and more graphs than you will ever need. NDepend will help your team grow a codebase that is clean, and free from dodgy code.","html":"<p>Code quality tooling has become a bigger, and bigger industry. Tools like <a href=\"http://www.jetbrains.com/resharper/\">Resharper</a>, and <a href=\"http://stylecop.codeplex.com/releases/view/79972\">stylecop</a> have been telling us how bad us human beings are at developing code.</p>\n\n<p>The one problem I have always had with these tools is they dont go above and beyond to help you understand your code at a higher level.</p>\n\n<h2 id=\"sowhatisndepend\">So what is NDepend?</h2>\n\n<p><img src=\"/content/images/2014/May/ndep.PNG\" alt=\"NDepend Logo\" /></p>\n\n<p>According to <a href=\"http://www.ndepend.com/Features.aspx\">their website</a> NDepend does everything from code rules, code querying, comparing builds, CI reporting, complexity diagramming, and the list goes on and on.</p>\n\n<p>When I first heard of it, I assume it was more resharper, and less stylecop, but I was wrong.</p>\n\n<h2 id=\"mycodequalitybeginnings\">My Code Quality Beginnings...</h2>\n\n<p>Before I go on about NDepend I have to tell you my history with code quality tools. </p>\n\n<h3 id=\"jslintsadface\">JS Lint == /sadface</h3>\n\n<p>I first learned of code quality tools, when I heard about <a href=\"http://www.jslint.com/\">JSLint</a>. As JavaScript was my first programming language, I naturally thought I was amazing at it. However being a weakly type language, with horrible origins, it was easy to make bad code.</p>\n\n<p>The first code I pumped into JS lint returned with thousands of changes I needed to make, and I wasn't sure where to start. JSLint did a good job of destroying my ego, and de-motivating me as a human being. I took personal offense to it, even though it was trying to help me. Furthermore because it didn't really integrate into my IDE, it was harder for me to track down issues.</p>\n\n<h3 id=\"stylecop\">Stylecop</h3>\n\n<p><img src=\"/content/images/2014/May/91wmm.jpg\" alt=\"\" /></p>\n\n<p>My next attempt at using code quality tools was stylecop. Stylecop is a simple C# visual studio plugin that tells you where your code does not follow best practices. The first time I ran my code though stylecop it threw back over 700 warnings. The fact that it found so much to change was great, but the fact that everything was a warning, and nothing was an error was very concerning. Especially since I knew some bad code was in that codebase.</p>\n\n<p>Also with the overall lack of visualization stylecop was less than perfect. You would have to double click on every warning, and hope it brought you to the proper offending code.</p>\n\n<h3 id=\"monogendarme\">Mono.Gendarme</h3>\n\n<p>So recently I started using Gendarme to do code analyzation. I commit code, <a href=\"http://jenkins-ci.org/\">jenkins</a> builds it, gendarme analyzes it, and jenkins would host my gendarme graphs. This was great, because jenkins could show the code gendarme was complaining about. Gendarme does not make everything warnings, and it does a good job at analyzing code.</p>\n\n<p>My major problem with this, is that I'd have to commit bad code to the code base, then go back and fix the problems. Instead of fixing them before they landed in jenkins lap.</p>\n\n<h3 id=\"resharper\">Resharper</h3>\n\n<p>Now before I go on I have to mention Resharper. Resharper is a developer productivity tool that uses a lot of coding standards/rules to make sure your code does not suck. However this is no replacement for a true code quality tool. Resharper is more about productivity (fixing lambdas, making sure your linq statements are readable, etc.). The big difference is that Resharper lacks in the reporting deparment, it does not capture trends, and does not enforce certain best practice rules. </p>\n\n<p>Resharper only looks at source code, where as most other static analysis tools also look at compiled IL code as well.</p>\n\n<h2 id=\"ndependfirstimpressions\">NDepend: First Impressions</h2>\n\n<blockquote>\n  <p>NDepend runs extremely fast, and it never gets in your way.</p>\n</blockquote>\n\n<p>So I when first fired up Visual Studio, and started using NDepend I was blown away with the performance. NDepend Runs extremely fast, and never crashes visual studio.  I needed a few minutes to process what I was looking at, and before long I realized NDepend had summerized my whole code base into one very sweet dashboard. As I clicked around the fun started to really begin...</p>\n\n<p><img src=\"/content/images/2014/May/ndepdash.PNG\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2014/May/NDependDash.PNG\" alt=\"Sample NDepend Dasbboard\" /></p>\n\n<h2 id=\"ndependorganizedcodequality\">NDepend: Organized Code Quality</h2>\n\n<p>So the major feature I was blown away by with NDepend was how clean, and organized the code rules are. The tool really tells you which things you need to fix <strong>now</strong>, and which things can wait. You can easily turn rules on, and off with a click a checkbox. Everything is grouped together nicely. </p>\n\n<p><img src=\"/content/images/2014/May/errorsOrganized.PNG\" alt=\"Code Quality dashboard\" /></p>\n\n<blockquote>\n  <p>NDepend uses a code querying engine (basically <code>linqTo&lt;YourCodeHere&gt;</code>).</p>\n</blockquote>\n\n<p>The code quality rules, uses the NDepends querying engine to get your code. When you click on a rule the Linq query used will be displayed in a separate window. You can use this window to create your own rules, using the same querying engine. The following is a query to find code that should not be declared public.</p>\n\n<pre>\n //<Name>Avoid public methods not publicly visible</Name>\n// Matched methods are declared public but are not publicly visible by assemblies consumers.\n// Their visibility level must be decreased.\n\nwarnif count > 0\nfrom m in JustMyCode.Methods where \n   !m.IsPubliclyVisible && m.IsPublic &&\n\n   // Eliminate virtual methods\n   !m.IsVirtual &&\n   // Eliminate interface and delegate types\n   !m.ParentType.IsInterface &&\n   !m.ParentType.IsDelegate &&\n   // Eliminate default constructors\n   !(m.IsConstructor && m.NbParameters == 0) &&\n   // Eliminate operators that must be declared public\n   !m.IsOperator &&\n   // Eliminate methods generated by compiler\n   !m.IsGeneratedByCompiler \nselect m\n\n</pre>\n\n<h2 id=\"ndependcodedependencymanagement\">NDepend: Code Dependency Management</h2>\n\n<p>The other feature, and its probably more of a series of features is how NDepend manages code dependency. This does this with some awesome interactive graphs. The <a href=\"http://www.ndepend.com/Doc_VS_Arch.aspx#Dep\">documents</a> show pretty much all the graphs, and I wont get into it all, but from a high level they provide great visualizations of your code. </p>\n\n<blockquote>\n  <p>Graphing everything from class inheritance, to dependency graphs NDepend brings a new level of graphing to code quality tools.</p>\n</blockquote>\n\n<p>The tool allows you to find poor architectural decisions, and helps you correct them in the early days. Before the bad design decisions really bite you.</p>\n\n<h2 id=\"butwaittheresmore\">But wait there's more!</h2>\n\n<p>If you thought this was a simple visual studio plugin, you would be wrong.</p>\n\n<blockquote>\n  <p>Having code quality in the build system is a must. I have always made sure code quality was also being measured in my CI pipline, and you should to.</p>\n</blockquote>\n\n<p>NDepend plugs into your build system to provide long term trend reporting. These reports can include LOC trends, which are compared against rule violation trends. NDepend reports can show your Test code coverage, code complexity, and code composition as your application matures.</p>\n\n<p>With an optional separate GUI, command line tool, and pluggable rules engine, NDepend provides a new level of code quality management.</p>\n\n<h2 id=\"tldr\">tl;dr?</h2>\n\n<p>NDepend is a code quality tool that really shows your code smells in new ways. with long term trend reporting, heat maps, and more graphs than you will ever need. NDepend will help your team grow a codebase that is clean, and free from dodgy code.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1400893457961,"created_by":1,"updated_at":1439213501395,"updated_by":1,"published_at":1400898797947,"published_by":1},{"id":33,"uuid":"d47ac9eb-d35a-4e6e-bd0c-d6c4d5866691","title":"Anti-Forgery Tokens in NancyFX with Razor","slug":"anti-forgery-tokens-in-nancyfx-with-razor","markdown":"Getting started with anti-forgery tokens in NancyFX with razor views is pretty simple.\n\nTo start you need to enable csrf in application startup. \n\n```csharp\n\n protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n {\n  \tCsrf.Enable(pipelines);\n    base.ApplicationStartup(container, pipelines);\n }\n\n```\n\nNow you need to create a token on the get request that returns the form\n\n\n```csharp\n\n\n Get[\"/\"] = x =>\n            {\n                this.CreateNewCsrfToken();\n                return View[\"Index\"];\n            };\n\n\n```\n\nNow in your view you need to render the token\n\n\n```csharp\n\n<form method=\"POST\">\n    Username <input type=\"text\" name=\"Username\" />\n    <br />\n    Password <input name=\"Password\" type=\"password\" />\n    <br />\n    <input type=\"submit\" value=\"Login\" />\n    @Html.AntiForgeryToken()\n</form>\n\n```\n\nFinally you need to authenticate the token on the post request\n\n\n```csharp\nPost[\"/\"] = x =>\n{\n\ttry\n\t{\n\t\tthis.ValidateCsrfToken();\n\t}\n\tcatch (CsrfValidationException)\n\t{\n\t\treturn Response.AsText(\"Csrf Token not valid.\").WithStatusCode(403);\n\t}\n    //do something\n};\n\n\n\n```","html":"<p>Getting started with anti-forgery tokens in NancyFX with razor views is pretty simple.</p>\n\n<p>To start you need to enable csrf in application startup. </p>\n\n<pre><code class=\"csharp\"> protected override void ApplicationStartup(TinyIoCContainer container, IPipelines pipelines)\n {\n      Csrf.Enable(pipelines);\n    base.ApplicationStartup(container, pipelines);\n }\n</code></pre>\n\n<p>Now you need to create a token on the get request that returns the form</p>\n\n<pre><code class=\"csharp\"> Get[\"/\"] = x =&gt;\n            {\n                this.CreateNewCsrfToken();\n                return View[\"Index\"];\n            };\n</code></pre>\n\n<p>Now in your view you need to render the token</p>\n\n<pre><code class=\"csharp\">&lt;form method=\"POST\"&gt;  \n    Username &lt;input type=\"text\" name=\"Username\" /&gt;\n    &lt;br /&gt;\n    Password &lt;input name=\"Password\" type=\"password\" /&gt;\n    &lt;br /&gt;\n    &lt;input type=\"submit\" value=\"Login\" /&gt;\n    @Html.AntiForgeryToken()\n&lt;/form&gt;\n</code></pre>\n\n<p>Finally you need to authenticate the token on the post request</p>\n\n<pre><code class=\"csharp\">Post[\"/\"] = x =&gt;  \n{\n    try\n    {\n        this.ValidateCsrfToken();\n    }\n    catch (CsrfValidationException)\n    {\n        return Response.AsText(\"Csrf Token not valid.\").WithStatusCode(403);\n    }\n    //do something\n};\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1402529653367,"created_by":1,"updated_at":1402531234034,"updated_by":1,"published_at":1402529669712,"published_by":1},{"id":34,"uuid":"ff9e2ec8-d302-4c08-b924-a594a132e1e5","title":"Excel Interop cannot open my file!","slug":"excel-interop-cannot-open-my-file","markdown":"So a while back I made a website that uses the Excel interop (long story). Since I made it a while ago, the IIS configuration is not automated, and must be done artisanally.\n\nRecently I have been working on moving it to a new server. I installed Excel, and the website. \n\n**Everything seemed ok until sysprep happend!**\n\n![](/content/images/2014/Jun/jackie.PNG)\n\nSo I immediately was not pleased. First I started ripping apart everything profile related with IIS, and nothing.\n\nEventually I stumbled across [something on stack overflow](http://stackoverflow.com/a/7386967/3671357) to summarize make sure `C:\\Windows\\SysWOW64\\config\\systemprofile` contains a folder called `Desktop`. If you are on 32 bit you need `c:\\Windows\\System32\\config\\systemprofile` to contain the `Desktop` folder.\n\n\n![](/content/images/2014/Jun/Capture3.PNG)\n\nPretty much desperate, and out of options I gave it a shot. Somehow it was the fix, although it pains me to say this.\n\n![](/content/images/2014/Jun/really-seriously-truly.png)\n","html":"<p>So a while back I made a website that uses the Excel interop (long story). Since I made it a while ago, the IIS configuration is not automated, and must be done artisanally.</p>\n\n<p>Recently I have been working on moving it to a new server. I installed Excel, and the website. </p>\n\n<p><strong>Everything seemed ok until sysprep happend!</strong></p>\n\n<p><img src=\"/content/images/2014/Jun/jackie.PNG\" alt=\"\" /></p>\n\n<p>So I immediately was not pleased. First I started ripping apart everything profile related with IIS, and nothing.</p>\n\n<p>Eventually I stumbled across <a href=\"http://stackoverflow.com/a/7386967/3671357\">something on stack overflow</a> to summarize make sure <code>C:\\Windows\\SysWOW64\\config\\systemprofile</code> contains a folder called <code>Desktop</code>. If you are on 32 bit you need <code>c:\\Windows\\System32\\config\\systemprofile</code> to contain the <code>Desktop</code> folder.</p>\n\n<p><img src=\"/content/images/2014/Jun/Capture3.PNG\" alt=\"\" /></p>\n\n<p>Pretty much desperate, and out of options I gave it a shot. Somehow it was the fix, although it pains me to say this.</p>\n\n<p><img src=\"/content/images/2014/Jun/really-seriously-truly.png\" alt=\"\" /></p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1403997960138,"created_by":1,"updated_at":1403998467707,"updated_by":1,"published_at":1403998077851,"published_by":1},{"id":35,"uuid":"bf213fb2-a3d2-4b80-bc7f-597953b0b047","title":"Using Action<>, Func<> to hide using statements","slug":"using-action-func-to-hide-using-statements","markdown":"Ok so to give you all some background. I always write my data access with a repository pattern in c#. Now I often use dapper, however I'd guess this problem would also apply with Entity framework.\n\nEverytime I start writing my database access I always start with something like...\n\n```csharp\n\npublic void InsertSomething(string something)\n{\n\tusing(var x = new SqlConnection())\n    {\n    }\n}\n\n\n```\n\n...and honestly pretty soon I am living in `using` statement hell.\n\nNow I tried to mitigate this in the past with IDisposable, but when I'd do some weak reference dependancy injection magic things usually got borked. I like to see using statements in action. I like know that things are getting disposed. However the verbosity, and sheer pain of it makes me want to puke. So one day I came up with the following.\n\n\n<script src=\"https://gist.github.com/tparnell8/f248f559dd89c8dc4b42.js\"></script>\n[Gist Link](https://gist.github.com/f248f559dd89c8dc4b42.git)\n\n## Ok? How do I use this?\n\nOk here is a basic example below using the [Dapper](https://code.google.com/p/dapper-dot-net/) orm.\n\nSo basically we create our db class passing in the type of database connection we wish to use in `<>`. In this case we are using Sql server but in theory we could also use Postgres. We are making an annonymous function that gets passed x, which will be a database connection. This connection will already be created, with the proper connection string. We are then going to call dapper's QueryAsync which will return an IEnumerable of `MyReturnType` after calling MySproc. The Database connection will be disposed of without us having to worry.\n\n```csharp\n var db = new DataBase<SqlConnection>(\"connectionstring\");\n var result = db.QueryDatabaseAsync(x => x.QueryAsync<MyReturnType>(\"MySproc\",\n               \n                new\n                {\n                    MySprocParameter = \"awesome\"\n                },\n                commandType: CommandType.StoredProcedure\n\n                ));\n\n\n```\n\n## Action<>, Func<> Class<> what is this?\n\nOk, so I know as a new c# programmer generics seem intimidating. So I will walk you through this.\n\n### MyClass<>\n\nYou may have classes ask for a generic. This means they are asking for a class. **Note** the word class. This will **not** be an object.\n\nFirst the line `public class DatabaseBase<T> where T : class, IDbConnection, new()` declares that this class is public. This class is called DataBase. This class requires a generic which we will call T in this class. T will have to be a class (not interface, nor struct, or enum). This class must inhert from IDbConnection. This class can also be created without a constructor. Now Notice in my gist, where I am using my `using` statements. You will see `new T()` that is because we are newing the class we have passed as a generic.\n\n### Func< T,TR>\n\nNext up is a Func. Now Functions are a delegate, or method that when ran have a return type. Functions **Must have a return**. In this case the T is a passed in paramter. This means the delegate must be able to handle an IDbConnection somehow and return a TR.\n\nIn the following example we have a method declaration that takes in a function that has a result. This method also returns the result of the function (note the TR return type).\n\n```csharp\npublic TResult QueryDatabase<TResult>(Func<T, TResult> action)\n        {\n            using (var x = new T())\n            {\n                x.ConnectionString = ConnectionString;\n                return action(x);\n            }\n        }\n```\n\n### Action< T >\n\n`Action<T>` is essentially the same as `Func<T,TR>` execpt actions do not have a return type. This would be more like a void than anything else. The T is a passed in parameter to the function. So you can pass in something like a database connection, but you will not have a return. Simple use case sql insert statement. ","html":"<p>Ok so to give you all some background. I always write my data access with a repository pattern in c#. Now I often use dapper, however I'd guess this problem would also apply with Entity framework.</p>\n\n<p>Everytime I start writing my database access I always start with something like...</p>\n\n<pre><code class=\"csharp\">public void InsertSomething(string something)  \n{\n    using(var x = new SqlConnection())\n    {\n    }\n}\n</code></pre>\n\n<p>...and honestly pretty soon I am living in <code>using</code> statement hell.</p>\n\n<p>Now I tried to mitigate this in the past with IDisposable, but when I'd do some weak reference dependancy injection magic things usually got borked. I like to see using statements in action. I like know that things are getting disposed. However the verbosity, and sheer pain of it makes me want to puke. So one day I came up with the following.</p>\n\n<script src=\"https://gist.github.com/tparnell8/f248f559dd89c8dc4b42.js\"></script>  \n\n<p><a href=\"https://gist.github.com/f248f559dd89c8dc4b42.git\">Gist Link</a></p>\n\n<h2 id=\"okhowdoiusethis\">Ok? How do I use this?</h2>\n\n<p>Ok here is a basic example below using the <a href=\"https://code.google.com/p/dapper-dot-net/\">Dapper</a> orm.</p>\n\n<p>So basically we create our db class passing in the type of database connection we wish to use in <code>&lt;&gt;</code>. In this case we are using Sql server but in theory we could also use Postgres. We are making an annonymous function that gets passed x, which will be a database connection. This connection will already be created, with the proper connection string. We are then going to call dapper's QueryAsync which will return an IEnumerable of <code>MyReturnType</code> after calling MySproc. The Database connection will be disposed of without us having to worry.</p>\n\n<pre><code class=\"csharp\"> var db = new DataBase&lt;SqlConnection&gt;(\"connectionstring\");\n var result = db.QueryDatabaseAsync(x =&gt; x.QueryAsync&lt;MyReturnType&gt;(\"MySproc\",\n\n                new\n                {\n                    MySprocParameter = \"awesome\"\n                },\n                commandType: CommandType.StoredProcedure\n\n                ));\n</code></pre>\n\n<h2 id=\"actionfuncclasswhatisthis\">Action&lt;>, Func&lt;> Class&lt;> what is this?</h2>\n\n<p>Ok, so I know as a new c# programmer generics seem intimidating. So I will walk you through this.</p>\n\n<h3 id=\"myclass\">MyClass&lt;></h3>\n\n<p>You may have classes ask for a generic. This means they are asking for a class. <strong>Note</strong> the word class. This will <strong>not</strong> be an object.</p>\n\n<p>First the line <code>public class DatabaseBase&lt;T&gt; where T : class, IDbConnection, new()</code> declares that this class is public. This class is called DataBase. This class requires a generic which we will call T in this class. T will have to be a class (not interface, nor struct, or enum). This class must inhert from IDbConnection. This class can also be created without a constructor. Now Notice in my gist, where I am using my <code>using</code> statements. You will see <code>new T()</code> that is because we are newing the class we have passed as a generic.</p>\n\n<h3 id=\"functtr\">Func&lt; T,TR></h3>\n\n<p>Next up is a Func. Now Functions are a delegate, or method that when ran have a return type. Functions <strong>Must have a return</strong>. In this case the T is a passed in paramter. This means the delegate must be able to handle an IDbConnection somehow and return a TR.</p>\n\n<p>In the following example we have a method declaration that takes in a function that has a result. This method also returns the result of the function (note the TR return type).</p>\n\n<pre><code class=\"csharp\">public TResult QueryDatabase&lt;TResult&gt;(Func&lt;T, TResult&gt; action)  \n        {\n            using (var x = new T())\n            {\n                x.ConnectionString = ConnectionString;\n                return action(x);\n            }\n        }\n</code></pre>\n\n<h3 id=\"actiont\">Action&lt; T ></h3>\n\n<p><code>Action&lt;T&gt;</code> is essentially the same as <code>Func&lt;T,TR&gt;</code> execpt actions do not have a return type. This would be more like a void than anything else. The T is a passed in parameter to the function. So you can pass in something like a database connection, but you will not have a return. Simple use case sql insert statement. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1404633362869,"created_by":1,"updated_at":1404667097902,"updated_by":1,"published_at":1404633446443,"published_by":1},{"id":37,"uuid":"f0d1517f-15a7-4069-b144-57fa4d82cfac","title":"Binding SSL Certs on Windows Installer XML (WiX) deployed Web Applications","slug":"binding-ssl-certs-on-windows-installer-xml-wix-deployed-web-applications","markdown":"This tutorial is about using SSL certs with WiX for IIS websites. For those of you whom didn't know, WiX is an MSI generator. You can even deploy IIS applications with WiX's MSI's.\n\n## Warning: I suck at wix\n\nNow I am going to start of by saying, I am far from an expert on wix. \n\n>If someone knows a better way please comment below. Tell me I am wrong\n\n## Danger: Some WiX Knowledge Required\n\nOk so before I go on, I am not going to explain everything from scratch.\n\n>I'm assuming you might know the basics of WiX here, and you have done iis things with it.\n\n## Show me Teh Codez...\n\n\n\nOk here it goes...In your fragment that declares your website you need to declare a binary. This says basically bundle the binary code from this file into the msi. This can go right under your fragment tag. The **sourceFile** tag should be the path to your certificate. \n\n```XML\n<Binary Id=\"certBinary\" SourceFile=\".\\IRCool.org.pfx\"/>\n\n```\n\n### Declare your IIS Instance things!\n\n\nOk...So I'm hoping you know how the iis stuff with wix works if you have read up to this point (and heeded my warnings)\n\nWhen you go to declare your component the iis certificate declaration needs to be a child of the component tag. The certificate needs to be the same level as your website tag.\n\nThe binary key in the certificate tag needs to match the ID of the binary tag we declared. I like to add it to local machine, personal store. Request **must** be no. Obviously the PFXPassword needs to be the password to your pfx file.\n\n```\n\n<iis:Certificate Id=\"cert\" BinaryKey=\"certBinary\" Name=\"IRCool.org\" StoreLocation=\"localMachine\" StoreName=\"personal\" PFXPassword=\"mypasswordisawesome\" Request=\"no\" />\n                            \n\n```\n\n\n### Lets bind this\n\nOk so now we have our certificate declared in IIS. We need to bind against it. So you will probably end up with something like the following:\n\nYou have declared a website, in it you have added 2 web addresses. A web address that is on port 443, and is secure. Another one that is on 80, and is not. You will have declared a certificate reference that matches your iis certificate tag.\n\n```\n\n <iis:WebSite Id='IRCool' Description='IRCool' Directory='Install_Web' StartOnInstall='yes' ConfigureIfExists='yes' AutoStart='yes'>\n                              <iis:WebAddress Id='SecIRCool' Port='443' Header='IRCool' Secure='yes' />\n                              <iis:WebAddress Id='IRCool' Port='80' Header='IRCool' />\n                              <iis:WebApplication Id='IRCoolApp' WebAppPool='IRCoolAppPool' Name='IRCool' />\n                              <iis:CertificateRef Id='cert' />\n                            </iis:WebSite>\n\n```\n\n## Ok..how do I redirect my port 80?\n\nSo I know there **has** to be a better way here. I'm not sure how to configure IIS to do this with wix. However according to [Stack Overflow](http://stackoverflow.com/a/4945950) you could redirect on begin request in MVC4+ (or you could do the following in [NancyFX](http://nancyfx.org/)).\n\n\n```csharp\n\nprotected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)\n        {\n            pipelines.BeforeRequest += (x) => x.Request.Url.IsSecure\n                ? new RedirectResponse(x.Request.Url.ToString().Replace(\"http:\", \"https:\"))\n                : null;\n            base.RequestStartup(container, pipelines, context);\n        }\n\n```\n\n## tl;dr?\n\nYou should end up with a fragment that resembles this: \n\n```\n<Fragment>\n    <Binary Id=\"certBinary\" SourceFile=\".\\IRCool.org.pfx\"/>\n\t\t<Directory Id=\"TARGETDIR\" Name=\"SourceDir\">\n\t\t\t<Directory Id=\"IISMain\" Name='inetpub'>\n\t\t\t\t<Directory Id=\"PubFolderName\" Name=\"PubFolderName\">\n\t\t\t\t\t<Component Id='WebsiteConfig' Guid='{YOURGUIDHERE}' Win64=\"yes\">\n\t\t\t\t\t\t<iis:Certificate Id=\"cert\" BinaryKey=\"certBinary\" Name=\"IRCool.org\" StoreLocation=\"localMachine\" StoreName=\"personal\" PFXPassword=\"mypasswordisawesome\" Request=\"no\" />\n\t\t\t\t\t\t<iis:WebSite Id='IRCool' Description='IRCool' Directory='PubFolderName' StartOnInstall='yes' ConfigureIfExists='yes' AutoStart='yes'>\n\t\t\t\t\t\t\t\t\t  <iis:WebAddress Id='SecIRCool' Port='443' Header='IRCool' Secure='yes' />\n\t\t\t\t\t\t\t\t\t  <iis:WebAddress Id='IRCool' Port='80' Header='IRCool' />\n\t\t\t\t\t\t\t\t\t  <iis:WebApplication Id='IRCoolApp' WebAppPool='IRCoolAppPool' Name='IRCool' />\n\t\t\t\t\t\t\t\t\t  <iis:CertificateRef Id='cert' />\n\t\t\t\t\t\t\t\t\t</iis:WebSite>\n\t\t\t\t\t\t\t\t\t<iis:WebAppPool Id='IRCoolAppPool' Identity=\"localSystem\" RecycleMinutes=\"0\" IdleTimeout=\"0\" ManagedPipelineMode='Integrated' ManagedRuntimeVersion='v4.0' Name='IRCool' />\n\t\t\t\t\t</Component>\n\t\t\t\t</Directory>\n\t\t\t</Directory>\n        </Directory>\n\t<Fragment>\n\n```","html":"<p>This tutorial is about using SSL certs with WiX for IIS websites. For those of you whom didn't know, WiX is an MSI generator. You can even deploy IIS applications with WiX's MSI's.</p>\n\n<h2 id=\"warningisuckatwix\">Warning: I suck at wix</h2>\n\n<p>Now I am going to start of by saying, I am far from an expert on wix. </p>\n\n<blockquote>\n  <p>If someone knows a better way please comment below. Tell me I am wrong</p>\n</blockquote>\n\n<h2 id=\"dangersomewixknowledgerequired\">Danger: Some WiX Knowledge Required</h2>\n\n<p>Ok so before I go on, I am not going to explain everything from scratch.</p>\n\n<blockquote>\n  <p>I'm assuming you might know the basics of WiX here, and you have done iis things with it.</p>\n</blockquote>\n\n<h2 id=\"showmetehcodez\">Show me Teh Codez...</h2>\n\n<p>Ok here it goes...In your fragment that declares your website you need to declare a binary. This says basically bundle the binary code from this file into the msi. This can go right under your fragment tag. The <strong>sourceFile</strong> tag should be the path to your certificate. </p>\n\n<pre><code class=\"XML\">&lt;Binary Id=\"certBinary\" SourceFile=\".\\IRCool.org.pfx\"/&gt;\n</code></pre>\n\n<h3 id=\"declareyouriisinstancethings\">Declare your IIS Instance things!</h3>\n\n<p>Ok...So I'm hoping you know how the iis stuff with wix works if you have read up to this point (and heeded my warnings)</p>\n\n<p>When you go to declare your component the iis certificate declaration needs to be a child of the component tag. The certificate needs to be the same level as your website tag.</p>\n\n<p>The binary key in the certificate tag needs to match the ID of the binary tag we declared. I like to add it to local machine, personal store. Request <strong>must</strong> be no. Obviously the PFXPassword needs to be the password to your pfx file.</p>\n\n<pre><code>&lt;iis:Certificate Id=\"cert\" BinaryKey=\"certBinary\" Name=\"IRCool.org\" StoreLocation=\"localMachine\" StoreName=\"personal\" PFXPassword=\"mypasswordisawesome\" Request=\"no\" /&gt;\n</code></pre>\n\n<h3 id=\"letsbindthis\">Lets bind this</h3>\n\n<p>Ok so now we have our certificate declared in IIS. We need to bind against it. So you will probably end up with something like the following:</p>\n\n<p>You have declared a website, in it you have added 2 web addresses. A web address that is on port 443, and is secure. Another one that is on 80, and is not. You will have declared a certificate reference that matches your iis certificate tag.</p>\n\n<pre><code> &lt;iis:WebSite Id='IRCool' Description='IRCool' Directory='Install_Web' StartOnInstall='yes' ConfigureIfExists='yes' AutoStart='yes'&gt;\n                              &lt;iis:WebAddress Id='SecIRCool' Port='443' Header='IRCool' Secure='yes' /&gt;\n                              &lt;iis:WebAddress Id='IRCool' Port='80' Header='IRCool' /&gt;\n                              &lt;iis:WebApplication Id='IRCoolApp' WebAppPool='IRCoolAppPool' Name='IRCool' /&gt;\n                              &lt;iis:CertificateRef Id='cert' /&gt;\n                            &lt;/iis:WebSite&gt;\n</code></pre>\n\n<h2 id=\"okhowdoiredirectmyport80\">Ok..how do I redirect my port 80?</h2>\n\n<p>So I know there <strong>has</strong> to be a better way here. I'm not sure how to configure IIS to do this with wix. However according to <a href=\"http://stackoverflow.com/a/4945950\">Stack Overflow</a> you could redirect on begin request in MVC4+ (or you could do the following in <a href=\"http://nancyfx.org/\">NancyFX</a>).</p>\n\n<pre><code class=\"csharp\">protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)  \n        {\n            pipelines.BeforeRequest += (x) =&gt; x.Request.Url.IsSecure\n                ? new RedirectResponse(x.Request.Url.ToString().Replace(\"http:\", \"https:\"))\n                : null;\n            base.RequestStartup(container, pipelines, context);\n        }\n</code></pre>\n\n<h2 id=\"tldr\">tl;dr?</h2>\n\n<p>You should end up with a fragment that resembles this: </p>\n\n<pre><code>&lt;Fragment&gt;  \n    &lt;Binary Id=\"certBinary\" SourceFile=\".\\IRCool.org.pfx\"/&gt;\n        &lt;Directory Id=\"TARGETDIR\" Name=\"SourceDir\"&gt;\n            &lt;Directory Id=\"IISMain\" Name='inetpub'&gt;\n                &lt;Directory Id=\"PubFolderName\" Name=\"PubFolderName\"&gt;\n                    &lt;Component Id='WebsiteConfig' Guid='{YOURGUIDHERE}' Win64=\"yes\"&gt;\n                        &lt;iis:Certificate Id=\"cert\" BinaryKey=\"certBinary\" Name=\"IRCool.org\" StoreLocation=\"localMachine\" StoreName=\"personal\" PFXPassword=\"mypasswordisawesome\" Request=\"no\" /&gt;\n                        &lt;iis:WebSite Id='IRCool' Description='IRCool' Directory='PubFolderName' StartOnInstall='yes' ConfigureIfExists='yes' AutoStart='yes'&gt;\n                                      &lt;iis:WebAddress Id='SecIRCool' Port='443' Header='IRCool' Secure='yes' /&gt;\n                                      &lt;iis:WebAddress Id='IRCool' Port='80' Header='IRCool' /&gt;\n                                      &lt;iis:WebApplication Id='IRCoolApp' WebAppPool='IRCoolAppPool' Name='IRCool' /&gt;\n                                      &lt;iis:CertificateRef Id='cert' /&gt;\n                                    &lt;/iis:WebSite&gt;\n                                    &lt;iis:WebAppPool Id='IRCoolAppPool' Identity=\"localSystem\" RecycleMinutes=\"0\" IdleTimeout=\"0\" ManagedPipelineMode='Integrated' ManagedRuntimeVersion='v4.0' Name='IRCool' /&gt;\n                    &lt;/Component&gt;\n                &lt;/Directory&gt;\n            &lt;/Directory&gt;\n        &lt;/Directory&gt;\n    &lt;Fragment&gt;\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1406007470033,"created_by":1,"updated_at":1406080715228,"updated_by":1,"published_at":1406009827246,"published_by":1},{"id":38,"uuid":"bb578513-cb44-4430-88fa-b5faee4421a1","title":"New Series: Windows myths debunked!","slug":"windows-net-myths-debunked","markdown":"Over the last 8 years the demand to scale has ever increased. \n\n>We have gone from curating machines like your favorite pets, and started spinning up, and destroying VM's at an ever increasing pace.\n\nAs engineers the Unix like platforms, have always been easier to work with. Personally I enjoy linux, I love package managers, I love ssh, and configurations are much easier. That being said, lately I have been interacting a lot with Windows servers. \n\n2014 was my first year really attending a lot of conferences. One thing I have seen a lot at these conferences are misconceptions about Windows itself, and the .NET environment. Granted, I still love Linux a ton, but I also believe Windows is a viable platform to run on. \n\nThis blog post starts a **series** of posts to convince people that Windows can be a viable platform. I'll also use this series to talk about things I like about .NET. Personally, I believe azure has proven the viability of using windows on a large scale.\n\n## Package Management\n\n> When I want to install xyz program on my linux box, I just type apt-get package name, like to see you do that on windows! ~ SomeRandomDude\n\nThis is the most common thing I have heard. I would like to direct **everyone's** attention to an amazing open source project called [Chocolatey](https://chocolatey.org/)\n\nChocolatey is a package manager for windows. Much like apt-get, chocolatey can download and install packages from the chocolatey website, or a locally hosted store.\n\nThe cool part about chocolatey? Completely open sourced, and driven by the community! Chocolatey was not developed at microsoft, but some engineers whom simply wanted apt-get like functionality in windows. \n\nMicrosoft is now embracing this effort, in the next version of [Windows Management Framework](http://blogs.technet.com/b/windowsserver/archive/2014/04/03/windows-management-framework-v5-preview.aspx) Microsoft will release OneGet, a repository manager for windows. Under the bonnet driving OneGet by default, Chocolatey! Much like apt, to simply install puppet I can type `choco install puppet`.\n\n","html":"<p>Over the last 8 years the demand to scale has ever increased. </p>\n\n<blockquote>\n  <p>We have gone from curating machines like your favorite pets, and started spinning up, and destroying VM's at an ever increasing pace.</p>\n</blockquote>\n\n<p>As engineers the Unix like platforms, have always been easier to work with. Personally I enjoy linux, I love package managers, I love ssh, and configurations are much easier. That being said, lately I have been interacting a lot with Windows servers. </p>\n\n<p>2014 was my first year really attending a lot of conferences. One thing I have seen a lot at these conferences are misconceptions about Windows itself, and the .NET environment. Granted, I still love Linux a ton, but I also believe Windows is a viable platform to run on. </p>\n\n<p>This blog post starts a <strong>series</strong> of posts to convince people that Windows can be a viable platform. I'll also use this series to talk about things I like about .NET. Personally, I believe azure has proven the viability of using windows on a large scale.</p>\n\n<h2 id=\"packagemanagement\">Package Management</h2>\n\n<blockquote>\n  <p>When I want to install xyz program on my linux box, I just type apt-get package name, like to see you do that on windows! ~ SomeRandomDude</p>\n</blockquote>\n\n<p>This is the most common thing I have heard. I would like to direct <strong>everyone's</strong> attention to an amazing open source project called <a href=\"https://chocolatey.org/\">Chocolatey</a></p>\n\n<p>Chocolatey is a package manager for windows. Much like apt-get, chocolatey can download and install packages from the chocolatey website, or a locally hosted store.</p>\n\n<p>The cool part about chocolatey? Completely open sourced, and driven by the community! Chocolatey was not developed at microsoft, but some engineers whom simply wanted apt-get like functionality in windows. </p>\n\n<p>Microsoft is now embracing this effort, in the next version of <a href=\"http://blogs.technet.com/b/windowsserver/archive/2014/04/03/windows-management-framework-v5-preview.aspx\">Windows Management Framework</a> Microsoft will release OneGet, a repository manager for windows. Under the bonnet driving OneGet by default, Chocolatey! Much like apt, to simply install puppet I can type <code>choco install puppet</code>.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1415083199339,"created_by":1,"updated_at":1424656672688,"updated_by":1,"published_at":1424172055794,"published_by":1},{"id":39,"uuid":"0220a878-0bed-401b-a16d-cc63e1fdec88","title":"Mono, not just a sickness","slug":"mono-not-just-a-sickness","markdown":"In the old days, when programming in .NET you were signing yourself up to a lifetime of windows server, however things have changed.\n\n## About me\n\nI am an avid user of Linux. My laptop, Linux; my gaming computer, linux; this blog? Linux. Safe to say I love the NIX environment. \n\nI love C-like languages. My first language was JavaScript, then Java, eventually c#. I dislike ruby except for small scripts, and I would rather stab myself than use PHP. \n\nOver time I have really grown to love c#. \n\n>With Generics, Dynamic typing, async's, lamda expressions, nuget packages (c#-like npm modules), c# has a rich ecosystem of features.\n\nThe one thing that has killed me, until recently is I have not been able to run my c# code on Linux.\n\n## Mono Runtime\n\nFor those of you whom do not know, [mono](http://www.mono-project.com/) is an open source implementation of the .NET stack that runs on Linux, and Windows. This means that people can host their code on both platforms, but other people whom prefer linux can actually contribute to the c# community.\n\n### Working with Mono\n\nEarlier this year a [colleague](http://blog.normmaclennan.com/), and I started working on a project at vistaprint that used mono. Here are some tips we learned.\n\n* Mono might be missing some libraries. Use [mono-Gendarme](http://www.mono-project.com/docs/tools+libraries/tools/gendarme/) as part of your build process to detect any compatibility issues.\n* Use [monodevelop](http://monodevelop.com/) as your IDE, trust me its on-par with Visual Studio.\n * Make sure you are on 5.0 or higher. \n * Use [this PPA](https://launchpad.net/~ermshiperete/+archive/ubuntu/monodevelop) on Ubuntu, and install monodevelop-current\n* Use frameworks, or that build against mono. \n * We had great luck with [Nancyfx](http://nancyfx.org/)\n* Build file paths using Path.Combine, never hardcode paths\n * This is because windows paths use `\\` and Linux paths use `/` as the seperator\n* [Fluent DB](https://www.nuget.org/packages/FluentMigrator/) can build your database regardless of SQL server type (MS, postgre, etc)\n\n\n### Finding Help\n\nWe put more help on a [advocacy site](http://usemono.net). This is a NancyFx site, built on Travis CI, deployed to heroku. The sites' [github page, and wiki](https://github.com/maclennann/usemono-net) contain aditional knowledge. \n\nAlso [Jabbr.net](jabbr.net) is a great source to find .NET dev's whom are always ready to answer a questions.\n\n### Myths?\n\n> MSFT is going to sue and or shutdown mono\n\n* Control + F [this blog post](http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx) for the word mono\n\n> Mono does not support *Insert current version of .NET*\n\nCompatibility can be found [here](http://www.mono-project.com/docs/about-mono/compatibility/) Although I'm betting that it supports pretty much everything current at the time of *you* reading this.\n\n> Mono has poor GC performance\n\nI have seen this with the Generational collector, I suggest you switch to using the SGEN collector.\n\n## Mono Successes?\n\nI wanted to come into this blog with a huge list of success stories for mono. However I didn't have the time, and I didn't want to seem like I was being paid by said people. \n\nI guess the one huge success story I will point to is [Xamarin](http://xamarin.com/). Xamarin runs your mobile apps on all phones using c#, and guess what? Mono. Actually the Xamarin people are the ones working on mono, and (one could assume) funding it through the xamarin platform. I'd love to say I was being paid by xamarin to say this, but I am not. Heck my Xamarin license just expired.\n\n\n\n## tl;dr \n\nGive mono a shot, and start hosting on linux. Mono has great support for the various .NET Versions. I recommend using [NancyFx](http://nancyfx.org/) web framework, and not MVC.","html":"<p>In the old days, when programming in .NET you were signing yourself up to a lifetime of windows server, however things have changed.</p>\n\n<h2 id=\"aboutme\">About me</h2>\n\n<p>I am an avid user of Linux. My laptop, Linux; my gaming computer, linux; this blog? Linux. Safe to say I love the NIX environment. </p>\n\n<p>I love C-like languages. My first language was JavaScript, then Java, eventually c#. I dislike ruby except for small scripts, and I would rather stab myself than use PHP. </p>\n\n<p>Over time I have really grown to love c#. </p>\n\n<blockquote>\n  <p>With Generics, Dynamic typing, async's, lamda expressions, nuget packages (c#-like npm modules), c# has a rich ecosystem of features.</p>\n</blockquote>\n\n<p>The one thing that has killed me, until recently is I have not been able to run my c# code on Linux.</p>\n\n<h2 id=\"monoruntime\">Mono Runtime</h2>\n\n<p>For those of you whom do not know, <a href=\"http://www.mono-project.com/\">mono</a> is an open source implementation of the .NET stack that runs on Linux, and Windows. This means that people can host their code on both platforms, but other people whom prefer linux can actually contribute to the c# community.</p>\n\n<h3 id=\"workingwithmono\">Working with Mono</h3>\n\n<p>Earlier this year a <a href=\"http://blog.normmaclennan.com/\">colleague</a>, and I started working on a project at vistaprint that used mono. Here are some tips we learned.</p>\n\n<ul>\n<li>Mono might be missing some libraries. Use <a href=\"http://www.mono-project.com/docs/tools+libraries/tools/gendarme/\">mono-Gendarme</a> as part of your build process to detect any compatibility issues.</li>\n<li>Use <a href=\"http://monodevelop.com/\">monodevelop</a> as your IDE, trust me its on-par with Visual Studio.\n<ul><li>Make sure you are on 5.0 or higher. </li>\n<li>Use <a href=\"https://launchpad.net/~ermshiperete/+archive/ubuntu/monodevelop\">this PPA</a> on Ubuntu, and install monodevelop-current</li></ul></li>\n<li>Use frameworks, or that build against mono. \n<ul><li>We had great luck with <a href=\"http://nancyfx.org/\">Nancyfx</a></li></ul></li>\n<li>Build file paths using Path.Combine, never hardcode paths\n<ul><li>This is because windows paths use <code>\\</code> and Linux paths use <code>/</code> as the seperator</li></ul></li>\n<li><a href=\"https://www.nuget.org/packages/FluentMigrator/\">Fluent DB</a> can build your database regardless of SQL server type (MS, postgre, etc)</li>\n</ul>\n\n<h3 id=\"findinghelp\">Finding Help</h3>\n\n<p>We put more help on a <a href=\"http://usemono.net\">advocacy site</a>. This is a NancyFx site, built on Travis CI, deployed to heroku. The sites' <a href=\"https://github.com/maclennann/usemono-net\">github page, and wiki</a> contain aditional knowledge. </p>\n\n<p>Also <a href=\"jabbr.net\">Jabbr.net</a> is a great source to find .NET dev's whom are always ready to answer a questions.</p>\n\n<h3 id=\"myths\">Myths?</h3>\n\n<blockquote>\n  <p>MSFT is going to sue and or shutdown mono</p>\n</blockquote>\n\n<ul>\n<li>Control + F <a href=\"http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx\">this blog post</a> for the word mono</li>\n</ul>\n\n<blockquote>\n  <p>Mono does not support <em>Insert current version of .NET</em></p>\n</blockquote>\n\n<p>Compatibility can be found <a href=\"http://www.mono-project.com/docs/about-mono/compatibility/\">here</a> Although I'm betting that it supports pretty much everything current at the time of <em>you</em> reading this.</p>\n\n<blockquote>\n  <p>Mono has poor GC performance</p>\n</blockquote>\n\n<p>I have seen this with the Generational collector, I suggest you switch to using the SGEN collector.</p>\n\n<h2 id=\"monosuccesses\">Mono Successes?</h2>\n\n<p>I wanted to come into this blog with a huge list of success stories for mono. However I didn't have the time, and I didn't want to seem like I was being paid by said people. </p>\n\n<p>I guess the one huge success story I will point to is <a href=\"http://xamarin.com/\">Xamarin</a>. Xamarin runs your mobile apps on all phones using c#, and guess what? Mono. Actually the Xamarin people are the ones working on mono, and (one could assume) funding it through the xamarin platform. I'd love to say I was being paid by xamarin to say this, but I am not. Heck my Xamarin license just expired.</p>\n\n<h2 id=\"tldr\">tl;dr</h2>\n\n<p>Give mono a shot, and start hosting on linux. Mono has great support for the various .NET Versions. I recommend using <a href=\"http://nancyfx.org/\">NancyFx</a> web framework, and not MVC.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1415085947187,"created_by":1,"updated_at":1424656688840,"updated_by":1,"published_at":1415086105708,"published_by":1},{"id":40,"uuid":"69b910d6-6d56-42af-ba10-7d6de49e9b7f","title":"Working with Entity framework (Code First)","slug":"orm-showdown-dapper-vs-entityframework-part-1","markdown":"[Entity Framework](http://msdn.microsoft.com/en-us/data/ef.aspx) is the ORM that has been pushed by the MSFT giant over the last few years to the .NET community. \n\n## Working with Entity Framework \n\nEntity framework comes in two flavors `Code First` and `Database First`\n\nCode first is MSFT's way of using Entity Framework to scaffold your database from code. This huge feature allows you, the developer, to not write any SQL to create the database. \n\n#### Database Philosophy \n\nMSFT's tutorials with EF really push you toward having Entity Framework create the database, and use some `Linq` tricks to generate all the SQL. Now one of the huge downsites to this philosophy is that there is no stored procedures you can magically change to *fix* any database performance issues. This means any changes to alter the way you query should be done with a new deployment of the application. This also means that you will not have the oppertunity to profile any sprocs, and try to gain CPU cycles in the database. If you are looking for high performance I would look toward using [Dapper](https://github.com/StackExchange/dapper-dot-net) instead. The benefit for using EF, is honestly developer time. You can get started much faster using Entity Framework's code first approach.\n\n\n#### Getting Started with Code First\n\nTo put it simply make a class(or classes) and make a context which contains a `set` of those classes. Make sure you **first** add the entity framework [nuget package](https://www.nuget.org/packages/entityframework).\n\n\n```csharp\n\n    public class Employee\n    {\n        [Key]\n        public int Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n\n    }\n    public class SomethingElse\n    {\n        [Key]\n        public int Id { get; set; }\n        public string Yup { get; set; }\n        public string ImCool { get; set; }\n\n    }\n    public class ApplicationDbContext : DbContext\n    {\n        public ApplicationDbContext()\n            : base(\"DefaultConnection\")\n        {\n        }\n        public DbSet<Employee> EmployeesetSet { get; set; }\n        public DbSet<SomethingElse> SomethingElseSet { get; set; }\n        \n\n    }\n    \n\n\n```\n\nthen in the package console window type `enable-migrations` this will create a migrations folder and a configuration. If you wish your code to auto create the database on start, then add ` AutomaticMigrationsEnabled = true;` to the `Configurations.cs` file that is created.\n\nThen simply type `add-migration` give it a name, and the migration will look something like the following. \n\n```csharp\n\n  \n    public partial class one : DbMigration\n    {\n        public override void Up()\n        {\n            CreateTable(\n                \"dbo.Employees\",\n                c => new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        FirstName = c.String(),\n                        LastName = c.String(),\n                    })\n                .PrimaryKey(t => t.Id);\n            \n            CreateTable(\n                \"dbo.SomethingElses\",\n                c => new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        Yup = c.String(),\n                        ImCool = c.String(),\n                    })\n                .PrimaryKey(t => t.Id);\n            \n        }\n        \n        public override void Down()\n        {\n            DropTable(\"dbo.SomethingElses\");\n            DropTable(\"dbo.Employees\");\n        }\n    }\n\n\n```\n\nYou can then type update-database, and it will update the database. Note: the connection string is defined in the web config, and is declared on the following line.\n\nYourDbContext.cs\n\n`public ApplicationDbContext()\n            : base(\"DefaultConnection\")`\n\nWeb.config:\n\n```\n< connectionStrings>\n    < add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;AttachDbFilename=|DataDirectory|\\aspnet-WebApplication11-20141116030948.mdf;Initial Catalog=aspnet-WebApplication11-20141116030948;Integrated Security=True\"\n      providerName=\"System.Data.SqlClient\" />\n  </ connectionStrings>\n  \n```\n  \n  See we have a connectionstring in our webconfig called DefaultConnection, and using our base constructor we are naming that as our connection. ","html":"<p><a href=\"http://msdn.microsoft.com/en-us/data/ef.aspx\">Entity Framework</a> is the ORM that has been pushed by the MSFT giant over the last few years to the .NET community. </p>\n\n<h2 id=\"workingwithentityframework\">Working with Entity Framework</h2>\n\n<p>Entity framework comes in two flavors <code>Code First</code> and <code>Database First</code></p>\n\n<p>Code first is MSFT's way of using Entity Framework to scaffold your database from code. This huge feature allows you, the developer, to not write any SQL to create the database. </p>\n\n<h4 id=\"databasephilosophy\">Database Philosophy</h4>\n\n<p>MSFT's tutorials with EF really push you toward having Entity Framework create the database, and use some <code>Linq</code> tricks to generate all the SQL. Now one of the huge downsites to this philosophy is that there is no stored procedures you can magically change to <em>fix</em> any database performance issues. This means any changes to alter the way you query should be done with a new deployment of the application. This also means that you will not have the oppertunity to profile any sprocs, and try to gain CPU cycles in the database. If you are looking for high performance I would look toward using <a href=\"https://github.com/StackExchange/dapper-dot-net\">Dapper</a> instead. The benefit for using EF, is honestly developer time. You can get started much faster using Entity Framework's code first approach.</p>\n\n<h4 id=\"gettingstartedwithcodefirst\">Getting Started with Code First</h4>\n\n<p>To put it simply make a class(or classes) and make a context which contains a <code>set</code> of those classes. Make sure you <strong>first</strong> add the entity framework <a href=\"https://www.nuget.org/packages/entityframework\">nuget package</a>.</p>\n\n<pre><code class=\"language-csharp\">    public class Employee\n    {\n        [Key]\n        public int Id { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n\n    }\n    public class SomethingElse\n    {\n        [Key]\n        public int Id { get; set; }\n        public string Yup { get; set; }\n        public string ImCool { get; set; }\n\n    }\n    public class ApplicationDbContext : DbContext\n    {\n        public ApplicationDbContext()\n            : base(\"DefaultConnection\")\n        {\n        }\n        public DbSet&lt;Employee&gt; EmployeesetSet { get; set; }\n        public DbSet&lt;SomethingElse&gt; SomethingElseSet { get; set; }\n\n\n    }\n</code></pre>\n\n<p>then in the package console window type <code>enable-migrations</code> this will create a migrations folder and a configuration. If you wish your code to auto create the database on start, then add <code>AutomaticMigrationsEnabled = true;</code> to the <code>Configurations.cs</code> file that is created.</p>\n\n<p>Then simply type <code>add-migration</code> give it a name, and the migration will look something like the following. </p>\n\n<pre><code class=\"language-csharp\">    public partial class one : DbMigration\n    {\n        public override void Up()\n        {\n            CreateTable(\n                \"dbo.Employees\",\n                c =&gt; new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        FirstName = c.String(),\n                        LastName = c.String(),\n                    })\n                .PrimaryKey(t =&gt; t.Id);\n\n            CreateTable(\n                \"dbo.SomethingElses\",\n                c =&gt; new\n                    {\n                        Id = c.Int(nullable: false, identity: true),\n                        Yup = c.String(),\n                        ImCool = c.String(),\n                    })\n                .PrimaryKey(t =&gt; t.Id);\n\n        }\n\n        public override void Down()\n        {\n            DropTable(\"dbo.SomethingElses\");\n            DropTable(\"dbo.Employees\");\n        }\n    }\n</code></pre>\n\n<p>You can then type update-database, and it will update the database. Note: the connection string is defined in the web config, and is declared on the following line.</p>\n\n<p>YourDbContext.cs</p>\n\n<p><code>public ApplicationDbContext()\n            : base(\"DefaultConnection\")</code></p>\n\n<p>Web.config:</p>\n\n<pre><code>&lt; connectionStrings&gt;  \n    &lt; add name=\"DefaultConnection\" connectionString=\"Data Source=(LocalDb)\\v11.0;AttachDbFilename=|DataDirectory|\\aspnet-WebApplication11-20141116030948.mdf;Initial Catalog=aspnet-WebApplication11-20141116030948;Integrated Security=True\"\n      providerName=\"System.Data.SqlClient\" /&gt;\n  &lt;/ connectionStrings&gt;\n</code></pre>\n\n<p>See we have a connectionstring in our webconfig called DefaultConnection, and using our base constructor we are naming that as our connection. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1416168418014,"created_by":1,"updated_at":1423494266029,"updated_by":1,"published_at":1423425573430,"published_by":1},{"id":41,"uuid":"3eb0e804-5d2b-4087-9bb4-8d92fd09cc95","title":"Hosting NancyFx with OWIN on IIS","slug":"nancyfx-owin-iis","markdown":"So I was quite confused about hosting Nancyfx on OWIN under IIS. [Parts](https://github.com/NancyFx/Nancy/wiki/Managing-static-content#extra-steps-required-when-using-microsoftowinhostsystemweb) of the Nancy wiki led me slightly astray.\n\nHere is the simple guide.\n\nMake sure you Install the following nuget packages (if you havn't already).\n\n```\nNancy.Owin\nMicrosoft.Owin.Host.SystemWeb\n\n```\n\n\nOwin uses a class called Startup.cs to do basic configuration. We need to add nancy to the app, and then add additional StageMarkers used by the ASP pipeline. \n\nStartup.cs\n\n```csharp\n\nusing Microsoft.Owin.Extensions;\nusing Owin;\n\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseNancy();\n        app.UseStageMarker(PipelineStage.MapHandler);\n    }\n}\n\n\n```\n\n## Static Files\n\nHere you need to make a choice, do you want to have IIS manage the static files, or use the OWIN module. Personally I go for IIS. I don't have any data on this, but I have a feeling IIS might be faster to serve static content.\n\n#### IIS Static Hosting\n\nrunAllManagedModulesForAllRequests when set to true does not allow **Native** IIS modules to run like the static files module. So we will want to turn that off if we want IIS to handle static files.\n\nweb.config\n\n```\n\n<system.webServer>\n    <modules runAllManagedModulesForAllRequests=\"false\" />\n</system.webServer>\n\n```\n\n#### OWIN Static Hosting\n\nNuget Package\n\n`Install-Package Microsoft.Owin.StaticFiles`\n\n\nWeb.config\n\n```\n\n<system.webServer>\n    <modules runAllManagedModulesForAllRequests=\"true\" />\n</system.webServer>\n\n```\n\nStartup.cs\n\n```csharp\n\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseFileServer(new FileServerOptions()\n        {\n        RequestPath = new PathString(\"/foo\"),\n        FileSystem = new PhysicalFileSystem(@\".\\web\"),\n        });\n        app.UseNancy();\n        app.UseStageMarker(PipelineStage.MapHandler);\n    }\n}\n\n\n\n```\n\n### Put, Head, Delete\n\nif you need Put, Head or Delete requests add the following to your webconfig\n\n\n```\n\n<system.webServer>\n<handlers>\n      <remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" />\n      <remove name=\"OPTIONSVerbHandler\" />\n      <remove name=\"TRACEVerbHandler\" />\n      <add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" />\n</handlers>\n</system.webServer>\n\n\n```\n\n\n## Windows Authentication\n\nTo use Windows authentication you need to have the authentication type in your web.config\n\n\n```\n\t<system.web>\n  <authentication mode=\"Windows\"/>\n  \t</system.web>\n\n```\n\nTo actually be able to get the username of the user in code, you can use the following (assume .net 45).\n\n```csharp\n\npublic class User : IUserIdentity\n{\n    private readonly ClaimsPrincipal claimsPrincipal;\n\n    public User(ClaimsPrincipal claimsPrincipal)\n    {\n        this.claimsPrincipal = claimsPrincipal;\n    }\n\n    public string UserName { get { return claimsPrincipal.Identity.Name; } }\n    public IEnumerable<string> Claims { get { return claimsPrincipal.Claims.Select(c => c.ToString()); } }\n}\npublic class Bootstrapper : DefaultNancyBootstrapper\n{\n    protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)\n    {\n        pipelines.BeforeRequest += ctx =>\n        {\n            ctx.CurrentUser = new User(Thread.CurrentPrincipal as ClaimsPrincipal);\n            return null;\n        };\n    }\n\n}\n\n```\n\n","html":"<p>So I was quite confused about hosting Nancyfx on OWIN under IIS. <a href=\"https://github.com/NancyFx/Nancy/wiki/Managing-static-content#extra-steps-required-when-using-microsoftowinhostsystemweb\">Parts</a> of the Nancy wiki led me slightly astray.</p>\n\n<p>Here is the simple guide.</p>\n\n<p>Make sure you Install the following nuget packages (if you havn't already).</p>\n\n<pre><code>Nancy.Owin  \nMicrosoft.Owin.Host.SystemWeb\n</code></pre>\n\n<p>Owin uses a class called Startup.cs to do basic configuration. We need to add nancy to the app, and then add additional StageMarkers used by the ASP pipeline. </p>\n\n<p>Startup.cs</p>\n\n<pre><code class=\"language-csharp\">using Microsoft.Owin.Extensions;  \nusing Owin;\n\npublic class Startup  \n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseNancy();\n        app.UseStageMarker(PipelineStage.MapHandler);\n    }\n}\n</code></pre>\n\n<h2 id=\"staticfiles\">Static Files</h2>\n\n<p>Here you need to make a choice, do you want to have IIS manage the static files, or use the OWIN module. Personally I go for IIS. I don't have any data on this, but I have a feeling IIS might be faster to serve static content.</p>\n\n<h4 id=\"iisstatichosting\">IIS Static Hosting</h4>\n\n<p>runAllManagedModulesForAllRequests when set to true does not allow <strong>Native</strong> IIS modules to run like the static files module. So we will want to turn that off if we want IIS to handle static files.</p>\n\n<p>web.config</p>\n\n<pre><code>&lt;system.webServer&gt;  \n    &lt;modules runAllManagedModulesForAllRequests=\"false\" /&gt;\n&lt;/system.webServer&gt;\n</code></pre>\n\n<h4 id=\"owinstatichosting\">OWIN Static Hosting</h4>\n\n<p>Nuget Package</p>\n\n<p><code>Install-Package Microsoft.Owin.StaticFiles</code></p>\n\n<p>Web.config</p>\n\n<pre><code>&lt;system.webServer&gt;  \n    &lt;modules runAllManagedModulesForAllRequests=\"true\" /&gt;\n&lt;/system.webServer&gt;\n</code></pre>\n\n<p>Startup.cs</p>\n\n<pre><code class=\"language-csharp\">public class Startup  \n{\n    public void Configuration(IAppBuilder app)\n    {\n        app.UseFileServer(new FileServerOptions()\n        {\n        RequestPath = new PathString(\"/foo\"),\n        FileSystem = new PhysicalFileSystem(@\".\\web\"),\n        });\n        app.UseNancy();\n        app.UseStageMarker(PipelineStage.MapHandler);\n    }\n}\n</code></pre>\n\n<h3 id=\"putheaddelete\">Put, Head, Delete</h3>\n\n<p>if you need Put, Head or Delete requests add the following to your webconfig</p>\n\n<pre><code>&lt;system.webServer&gt;  \n&lt;handlers&gt;  \n      &lt;remove name=\"ExtensionlessUrlHandler-Integrated-4.0\" /&gt;\n      &lt;remove name=\"OPTIONSVerbHandler\" /&gt;\n      &lt;remove name=\"TRACEVerbHandler\" /&gt;\n      &lt;add name=\"ExtensionlessUrlHandler-Integrated-4.0\" path=\"*.\" verb=\"*\" type=\"System.Web.Handlers.TransferRequestHandler\" preCondition=\"integratedMode,runtimeVersionv4.0\" /&gt;\n&lt;/handlers&gt;  \n&lt;/system.webServer&gt;\n</code></pre>\n\n<h2 id=\"windowsauthentication\">Windows Authentication</h2>\n\n<p>To use Windows authentication you need to have the authentication type in your web.config</p>\n\n<pre><code>    &lt;system.web&gt;\n  &lt;authentication mode=\"Windows\"/&gt;\n      &lt;/system.web&gt;\n</code></pre>\n\n<p>To actually be able to get the username of the user in code, you can use the following (assume .net 45).</p>\n\n<pre><code class=\"language-csharp\">public class User : IUserIdentity  \n{\n    private readonly ClaimsPrincipal claimsPrincipal;\n\n    public User(ClaimsPrincipal claimsPrincipal)\n    {\n        this.claimsPrincipal = claimsPrincipal;\n    }\n\n    public string UserName { get { return claimsPrincipal.Identity.Name; } }\n    public IEnumerable&lt;string&gt; Claims { get { return claimsPrincipal.Claims.Select(c =&gt; c.ToString()); } }\n}\npublic class Bootstrapper : DefaultNancyBootstrapper  \n{\n    protected override void RequestStartup(TinyIoCContainer container, IPipelines pipelines, NancyContext context)\n    {\n        pipelines.BeforeRequest += ctx =&gt;\n        {\n            ctx.CurrentUser = new User(Thread.CurrentPrincipal as ClaimsPrincipal);\n            return null;\n        };\n    }\n\n}\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1424794021390,"created_by":1,"updated_at":1426466357145,"updated_by":1,"published_at":1426453482903,"published_by":1},{"id":43,"uuid":"65309591-316d-4cf4-8058-7a9bfee510bf","title":"Using Bower with a traditional MVC.NET app (While thinking about vNext).","slug":"using-bower-and-grunt-with-a-net-app","markdown":"Where I work .NET rules supreme. Personally I really don't care that much about the technology so long as it supports really good workflows. One of my major issues with nuget is that is very opinionated. \n\nIn nuget, js script files always end up dumping out to a `Scripts` folder, and while you can maintain your own scripts elsewhere, nuget just is not really great for client side JS as a whole.\n\n## Why Bower?\n\nOne of the major reasons I do not like nuget for js, is because nuget was built for .net assemblies. This means the rest of the development community outside of .net has to either put their things in nuget, or just not worry about it. What usually ends up happening is someone in the .net community decides to maintain pushing a js package into nuget. This is clearly known at MSFT since the vNEXT templates ship with bower as default. Bower is a package management written on top of npm, that supports pushing script files into a directory. Simple right?\n\n## Show me code.....\n\n**The Goal:** Try to maintain the same folder structure as current vNEXT templates on current .net applications. Use bower instead of nuget.\n\n```\nwwwroot/\n\t-lib/\n    \t--jquery/\n        \t---css/\n            ---js/\nControllers/\nModels/\n\n\n\n```\n\n\nSo the first thing we need to do is define our bower task. Now I literally ripped the following off the vNEXT template. Essentially how this works is we define a grunt task to use bower and define the output folder. I am dumping the output from bower in a wwwroot/lib folder, just as the vNEXT projects are going to go.\n\n**Gruntfile.js**\n```javascript\n\n/// <binding BeforeBuild='bower' />\n// This file in the main entry point for defining grunt tasks and using grunt plugins.\n// Click here to learn more. http://go.microsoft.com/fwlink/?LinkID=513275&clcid=0x409\n\nmodule.exports = function (grunt) {\n    grunt.initConfig({\n        bower: {\n            install: {\n                options: {\n                    targetDir: \"wwwroot/lib\",\n                    layout: \"byComponent\",\n                    cleanTargetDir: false\n                }\n            }\n        }\n    });\n\n    // This command registers the default task which will install bower packages into wwwroot/lib\n    grunt.registerTask(\"default\", [\"bower:install\"]);\n\n    // The following line loads the grunt plugins.\n    // This line needs to be at the end of this this file.\n    grunt.loadNpmTasks(\"grunt-bower-task\");\n};\n\n\n```\n\n\n**bower.json**\n\n```\n\n{\n    \"name\": \"myProject\",\n    \"private\": true,\n    \"dependencies\": {\n        \"bootstrap\": \"3.0.0\",\n        \"jquery\": \"1.10.2\"\n    },\n    \"exportsOverride\": {\n        \"bootstrap\": {\n            \"js\": \"dist/js/*.*\",\n            \"css\": \"dist/css/*.*\",\n            \"fonts\": \"dist/fonts/*.*\"\n        }\n        \"jquery\": {\n            \"\": \"jquery.{js,min.js,min.map}\"\n        }\n    }\n}\n```\n\n## What about msbuild?\n\nOk here comes the **tough** part. To work around msbuild I included the following xml in my csproj which should import the files in the wwwroot folder during build. I like to put this before the closing `</Project>` node.\n\n```\n  <Target Name=\"BeforeBuild\">\n      <ItemGroup>\n      <Content Include=\"wwwroot\\lib\\**\\*.css\" />\n      <Content Include=\"wwwroot\\lib\\**\\*.js\" />\n  </ItemGroup>\n  </Target>\n\n```\n\nYou could also in theory get really silly (**Not Recommended**) and call grunt during build. Although I did the opposite and **called msbuild from grunt**, which in my opinion is better.\n\n```\n  <Target Name=\"BeforeBuild\">\n      <ItemGroup>\n\t\t<Exec Command=\"npm install\"/>\n\t\t<Exec Command=\"node -e require('grunt').tasks()\"/> \n  </ItemGroup>\n  </Target>\n```\n\n### Custom Targets\n\nSo at my current employer we have a custom build engine, and for some reason the Content includes didn't work well with that. To mitigate this I included the following nodes as a child of the project node. I then called msbuild with the target of `CoreContent` which triggered the copy during the publishing. Now if a developer uses vs to publish, it will use the Content Include, and if our build system calls it, we will use the custom target.\n\n```\n\n<ItemGroup>\n   <CoreContent Include=\"wwwroot\\lib\\**\\*.css\" />\n   <CoreContent Include=\"wwwroot\\lib\\**\\*.js\" />\n </ItemGroup>\n <Target Name=\"CoreContent\">\n  <copy SourceFiles=\"@(CoreContent)\" DestinationFolder=\"$(WebProjectOutputDir)\\wwwroot\\lib\\%(RecursiveDir)%(Filename)%(Extension)\" />\n </Target>\n\n```","html":"<p>Where I work .NET rules supreme. Personally I really don't care that much about the technology so long as it supports really good workflows. One of my major issues with nuget is that is very opinionated. </p>\n\n<p>In nuget, js script files always end up dumping out to a <code>Scripts</code> folder, and while you can maintain your own scripts elsewhere, nuget just is not really great for client side JS as a whole.</p>\n\n<h2 id=\"whybower\">Why Bower?</h2>\n\n<p>One of the major reasons I do not like nuget for js, is because nuget was built for .net assemblies. This means the rest of the development community outside of .net has to either put their things in nuget, or just not worry about it. What usually ends up happening is someone in the .net community decides to maintain pushing a js package into nuget. This is clearly known at MSFT since the vNEXT templates ship with bower as default. Bower is a package management written on top of npm, that supports pushing script files into a directory. Simple right?</p>\n\n<h2 id=\"showmecode\">Show me code.....</h2>\n\n<p><strong>The Goal:</strong> Try to maintain the same folder structure as current vNEXT templates on current .net applications. Use bower instead of nuget.</p>\n\n<pre><code>wwwroot/  \n    -lib/\n        --jquery/\n            ---css/\n            ---js/\nControllers/  \nModels/\n</code></pre>\n\n<p>So the first thing we need to do is define our bower task. Now I literally ripped the following off the vNEXT template. Essentially how this works is we define a grunt task to use bower and define the output folder. I am dumping the output from bower in a wwwroot/lib folder, just as the vNEXT projects are going to go.</p>\n\n<p><strong>Gruntfile.js</strong></p>\n\n<pre><code class=\"language-javascript\">/// &lt;binding BeforeBuild='bower' /&gt;\n// This file in the main entry point for defining grunt tasks and using grunt plugins.\n// Click here to learn more. http://go.microsoft.com/fwlink/?LinkID=513275&amp;clcid=0x409\n\nmodule.exports = function (grunt) {  \n    grunt.initConfig({\n        bower: {\n            install: {\n                options: {\n                    targetDir: \"wwwroot/lib\",\n                    layout: \"byComponent\",\n                    cleanTargetDir: false\n                }\n            }\n        }\n    });\n\n    // This command registers the default task which will install bower packages into wwwroot/lib\n    grunt.registerTask(\"default\", [\"bower:install\"]);\n\n    // The following line loads the grunt plugins.\n    // This line needs to be at the end of this this file.\n    grunt.loadNpmTasks(\"grunt-bower-task\");\n};\n</code></pre>\n\n<p><strong>bower.json</strong></p>\n\n<pre><code>{\n    \"name\": \"myProject\",\n    \"private\": true,\n    \"dependencies\": {\n        \"bootstrap\": \"3.0.0\",\n        \"jquery\": \"1.10.2\"\n    },\n    \"exportsOverride\": {\n        \"bootstrap\": {\n            \"js\": \"dist/js/*.*\",\n            \"css\": \"dist/css/*.*\",\n            \"fonts\": \"dist/fonts/*.*\"\n        }\n        \"jquery\": {\n            \"\": \"jquery.{js,min.js,min.map}\"\n        }\n    }\n}\n</code></pre>\n\n<h2 id=\"whataboutmsbuild\">What about msbuild?</h2>\n\n<p>Ok here comes the <strong>tough</strong> part. To work around msbuild I included the following xml in my csproj which should import the files in the wwwroot folder during build. I like to put this before the closing <code>&lt;/Project&gt;</code> node.</p>\n\n<pre><code>  &lt;Target Name=\"BeforeBuild\"&gt;\n      &lt;ItemGroup&gt;\n      &lt;Content Include=\"wwwroot\\lib\\**\\*.css\" /&gt;\n      &lt;Content Include=\"wwwroot\\lib\\**\\*.js\" /&gt;\n  &lt;/ItemGroup&gt;\n  &lt;/Target&gt;\n</code></pre>\n\n<p>You could also in theory get really silly (<strong>Not Recommended</strong>) and call grunt during build. Although I did the opposite and <strong>called msbuild from grunt</strong>, which in my opinion is better.</p>\n\n<pre><code>  &lt;Target Name=\"BeforeBuild\"&gt;\n      &lt;ItemGroup&gt;\n        &lt;Exec Command=\"npm install\"/&gt;\n        &lt;Exec Command=\"node -e require('grunt').tasks()\"/&gt; \n  &lt;/ItemGroup&gt;\n  &lt;/Target&gt;\n</code></pre>\n\n<h3 id=\"customtargets\">Custom Targets</h3>\n\n<p>So at my current employer we have a custom build engine, and for some reason the Content includes didn't work well with that. To mitigate this I included the following nodes as a child of the project node. I then called msbuild with the target of <code>CoreContent</code> which triggered the copy during the publishing. Now if a developer uses vs to publish, it will use the Content Include, and if our build system calls it, we will use the custom target.</p>\n\n<pre><code>&lt;ItemGroup&gt;  \n   &lt;CoreContent Include=\"wwwroot\\lib\\**\\*.css\" /&gt;\n   &lt;CoreContent Include=\"wwwroot\\lib\\**\\*.js\" /&gt;\n &lt;/ItemGroup&gt;\n &lt;Target Name=\"CoreContent\"&gt;\n  &lt;copy SourceFiles=\"@(CoreContent)\" DestinationFolder=\"$(WebProjectOutputDir)\\wwwroot\\lib\\%(RecursiveDir)%(Filename)%(Extension)\" /&gt;\n &lt;/Target&gt;\n</code></pre>","image":null,"featured":1,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1427161469027,"created_by":1,"updated_at":1442095513876,"updated_by":1,"published_at":1427166038407,"published_by":1},{"id":44,"uuid":"202d8dd2-e382-4b2a-84c0-507b1fb6e4f0","title":"Tip Badges in ghost","slug":"tip-badges-in-ghost","markdown":"So I am a huge fan of ghost, and I love providing my content free of charge. That being said server hosting costs money.\n\n I added a tips badge to the bottom of my blog posts (see below) to try to offset the costs.\n\nHow I did this was simple. I signed up for a [gratipay](https://gratipay.com) account. Once signed in I went to the widgets section of my profile and found my badge. \n\n![](/content/images/2015/04/Capture.PNG)\n\nI took the image tag and wrapped it around an `a` tag that will link to my profile.\n\n```\n<a href=\"https://gratipay.com/TommyParnell\">\n<img src=\"https://img.shields.io/gratipay/TommyParnell.svg\">\n</a>\n\n\n```\n\nI then went into my themes folder at `content/themes/ghostium` where I found a file called `post.hbs`\n\nI scrolled to where I found the part that the author website url is injected. I then added in the badge from gratify\n\n**Before**\n```\n\n {{#if author.website}}\n   <p class=\"post-author-website\">\n   <a href=\"{{author.website}}\" rel=\"nofollow\">{{author.website}}</a>\n   </p>\n {{/if}}\n\n```\n\n**After**\n\n```\n {{#if author.website}}\n   <p class=\"post-author-website\">\n   <a href=\"{{author.website}}\" rel=\"nofollow\">{{author.website}}</a>\n   </p>\n {{/if}}\n <p>\n <a href=\"https://gratipay.com/TommyParnell\"><img src=\"https://img.shields.io/gratipay/TommyParnell.svg\"></a>\n</p>\n\n\n```\n\n## Badge at the top of the page\n\nif you want the badge at the top of the page you can add the code explained above before the `{{#post}}` tag in the post.hbs file","html":"<p>So I am a huge fan of ghost, and I love providing my content free of charge. That being said server hosting costs money.</p>\n\n<p>I added a tips badge to the bottom of my blog posts (see below) to try to offset the costs.</p>\n\n<p>How I did this was simple. I signed up for a <a href=\"https://gratipay.com\">gratipay</a> account. Once signed in I went to the widgets section of my profile and found my badge. </p>\n\n<p><img src=\"/content/images/2015/04/Capture.PNG\" alt=\"\" /></p>\n\n<p>I took the image tag and wrapped it around an <code>a</code> tag that will link to my profile.</p>\n\n<pre><code>&lt;a href=\"https://gratipay.com/TommyParnell\"&gt;  \n&lt;img src=\"https://img.shields.io/gratipay/TommyParnell.svg\"&gt;  \n&lt;/a&gt;\n</code></pre>\n\n<p>I then went into my themes folder at <code>content/themes/ghostium</code> where I found a file called <code>post.hbs</code></p>\n\n<p>I scrolled to where I found the part that the author website url is injected. I then added in the badge from gratify</p>\n\n<p><strong>Before</strong></p>\n\n<pre><code> {{#if author.website}}\n   &lt;p class=\"post-author-website\"&gt;\n   &lt;a href=\"{{author.website}}\" rel=\"nofollow\"&gt;{{author.website}}&lt;/a&gt;\n   &lt;/p&gt;\n {{/if}}\n</code></pre>\n\n<p><strong>After</strong></p>\n\n<pre><code> {{#if author.website}}\n   &lt;p class=\"post-author-website\"&gt;\n   &lt;a href=\"{{author.website}}\" rel=\"nofollow\"&gt;{{author.website}}&lt;/a&gt;\n   &lt;/p&gt;\n {{/if}}\n &lt;p&gt;\n &lt;a href=\"https://gratipay.com/TommyParnell\"&gt;&lt;img src=\"https://img.shields.io/gratipay/TommyParnell.svg\"&gt;&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n\n<h2 id=\"badgeatthetopofthepage\">Badge at the top of the page</h2>\n\n<p>if you want the badge at the top of the page you can add the code explained above before the <code>{{#post}}</code> tag in the post.hbs file</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1428175864171,"created_by":1,"updated_at":1428177884945,"updated_by":1,"published_at":1428176681949,"published_by":1},{"id":45,"uuid":"881bc194-e0af-4e56-8296-6d9e6e9a37ec","title":"Why I love bitbucket, and why I (almost) never use it.","slug":"why-i-love-bitbucket-and-why-i-almost-never-use-it","markdown":"Github has become the defacto online source hosting provider. More projects than ever before use github, and it has become a predominate force in the open source community. I use github quite a bit, and I love it. \n\n## What is bitbucket?\n\nIf you are unfamiliar, bitbucket is [Atlassian's](https://www.atlassian.com/) version of github. Bitbucket provides online hosting of code. Free public repo's, and it even stands apart from github by providing free private repos.\n\n## What makes bucket so good?\n\nI am a huge fan of controlling releases through version control branches. I also enjoy tools that prevent me from doing the wrong thing.\n\nWhen I use github, and I want to have other developers work with me on a repository, I have to give them access to the repo. Unless you are an organization, giving someone access gives them full commit access on every branch, which can be detrimental.\n\nBitbucket allows for branch permissioning, which is a feature that I really believe in. For example if you wish to lock down release branches from commits directly, you can do that. Github on the other hand does not allow this level of control, unless you have organizational rights.\n\nBitbucket has the ability to prevent history re-writes including force pushes, which jenkins developers [found out](https://news.ycombinator.com/item?id=6713742) was a feature they wish they had.\n\n## Why I don't use bitbucket (often)\n\nSo overall I love bitbucket, except I hardly use it. Most of the coding I do, I open source. I want people to find my code, and contribute to it. Anyone can work open source projects in bitbucket, but the platform does not provide a great way for people to discover repositories. To put it simply, bitbucket was ment for people working in teams, while Github was ment for social coding. \n\nIf I work on a startup, or something where I have a real team. We will use bitbucket, and even pay for additional features. I have taken advantage of the free repos in bitbucket, quite a bit.\n\nOverall, both services are pretty solid. Use what will work best for you, not what everyone is currently using.","html":"<p>Github has become the defacto online source hosting provider. More projects than ever before use github, and it has become a predominate force in the open source community. I use github quite a bit, and I love it. </p>\n\n<h2 id=\"whatisbitbucket\">What is bitbucket?</h2>\n\n<p>If you are unfamiliar, bitbucket is <a href=\"https://www.atlassian.com/\">Atlassian's</a> version of github. Bitbucket provides online hosting of code. Free public repo's, and it even stands apart from github by providing free private repos.</p>\n\n<h2 id=\"whatmakesbucketsogood\">What makes bucket so good?</h2>\n\n<p>I am a huge fan of controlling releases through version control branches. I also enjoy tools that prevent me from doing the wrong thing.</p>\n\n<p>When I use github, and I want to have other developers work with me on a repository, I have to give them access to the repo. Unless you are an organization, giving someone access gives them full commit access on every branch, which can be detrimental.</p>\n\n<p>Bitbucket allows for branch permissioning, which is a feature that I really believe in. For example if you wish to lock down release branches from commits directly, you can do that. Github on the other hand does not allow this level of control, unless you have organizational rights.</p>\n\n<p>Bitbucket has the ability to prevent history re-writes including force pushes, which jenkins developers <a href=\"https://news.ycombinator.com/item?id=6713742\">found out</a> was a feature they wish they had.</p>\n\n<h2 id=\"whyidontusebitbucketoften\">Why I don't use bitbucket (often)</h2>\n\n<p>So overall I love bitbucket, except I hardly use it. Most of the coding I do, I open source. I want people to find my code, and contribute to it. Anyone can work open source projects in bitbucket, but the platform does not provide a great way for people to discover repositories. To put it simply, bitbucket was ment for people working in teams, while Github was ment for social coding. </p>\n\n<p>If I work on a startup, or something where I have a real team. We will use bitbucket, and even pay for additional features. I have taken advantage of the free repos in bitbucket, quite a bit.</p>\n\n<p>Overall, both services are pretty solid. Use what will work best for you, not what everyone is currently using.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1436665833092,"created_by":1,"updated_at":1436667286419,"updated_by":1,"published_at":1436667178795,"published_by":1},{"id":46,"uuid":"6c08d2a7-97f4-4e5f-a3ce-084e1455575c","title":"VS 2015, Getting Resharper Experience Without Resharper","slug":"vs-2015-getting-resharper-experiance-without-resharper","markdown":"Resharper has long dominated the c# landscape as the tool of tools. Roslyn shipping with VS 2015, the quick actions light bulb, and the community analyzers, all combine to produce a resharper-like experience.\n\n## Showing Overloads/Param Info\n\nAutomatically showing documentation for parameters, and overloads for some reason is always off for me. To get the parameters information you must turn it in in `Text Editor -> Lanuage -> General -> Parameter Info` The parameter info should show auto-magically, but you can also type <kbd>Control</kbd> +<kbd>Shift</kbd>+<kbd>Space</kbd> to invoke the dialog.\n\n![](/content/images/2015/08/paramInfoExample.png)\n\n![](/content/images/2015/08/paramInfoSetting.PNG)\n\n## Refactoring\n\n\nRefactoring is a **huge** part of Resharper. I recently stumbled across a [fantastic] refactoring extension called [Refactoring Essentials](http://vsrefactoringessentials.com/)\n\nYou can install this into your project as a nuget package or install it as a visual studio extension. \n\nRefactoring Essentials does not just include refactors, but it also includes a bunch of code quality analyzers, and adjustments.\n\n## Code Analysis\n\nThere are 2 fantastic code analyzers I really enjoy. The first is [Code Cracker](http://code-cracker.github.io/) Code cracker has lots of refactorizations to produce higher quality, more readable code. \n\nThe second one I like is the [FxCop](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers/) analyzer produced by the Roslyn team. This one uses rules from FxCop to produce refactors to suit best practices in the CLR.\n\n## Auto Format\n\nI have had good luck with the [Continuous Formatting](https://vlasovstudio.com/continuous-formatting/), but its a paid product. If you don't want to pay for code formatting, I'd suggest using the [Code Maid](http://www.codemaid.net/) Extension. Both extensions are fantastic, and I think Code Maid does a really good job at reorganizing code. To say the least I have both extensions installed. \n\n## Working without resharper\n\n\nThe first thing that I realized is that intellisense does not auto complete as many classes as resharper. I notice that resharper auto completes classes even without any `using` statement in the current file. However the new Roslyn quick actions will suggest using things from different namespaces if the names are close enough. \n\n![](/content/images/2015/08/usingStatementExample.png)\n\n### Invoking the Light bulb\n\nI find the best way to invoke the light bulb is by hitting <kbd>Control</kbd>+<kbd>.</kbd> you can then hit <kbd>Enter</kbd> to select the action in the list.\n\n## Other Extensions I cannot live without\n\nThis is an additional list of VS extensions that make me happy.\n\n* [NDepend](http://www.ndepend.com/) Paid product, totally worth it. view my [blog post about it](/must-have-tool-ndepend/)\n* [Sando Code Search](https://visualstudiogallery.msdn.microsoft.com/06f39a31-20ce-408c-afee-8a02b484db1c) Great little code search tool\n* [Web Essentials](http://vswebessentials.com/) Great web tools for vs\n* [Web Compiler](https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c) auto web compiler (less, js, etc.)\n* [C# Methods code snippets](https://visualstudiogallery.msdn.microsoft.com/d4e9939d-baac-43d4-bece-960eb57e02c1) method code snippets\n\n\nLet me know what your favourite VS tools are below.\n","html":"<p>Resharper has long dominated the c# landscape as the tool of tools. Roslyn shipping with VS 2015, the quick actions light bulb, and the community analyzers, all combine to produce a resharper-like experience.</p>\n\n<h2 id=\"showingoverloadsparaminfo\">Showing Overloads/Param Info</h2>\n\n<p>Automatically showing documentation for parameters, and overloads for some reason is always off for me. To get the parameters information you must turn it in in <code>Text Editor -&gt; Lanuage -&gt; General -&gt; Parameter Info</code> The parameter info should show auto-magically, but you can also type <kbd>Control</kbd> +<kbd>Shift</kbd>+<kbd>Space</kbd> to invoke the dialog.</p>\n\n<p><img src=\"/content/images/2015/08/paramInfoExample.png\" alt=\"\" /></p>\n\n<p><img src=\"/content/images/2015/08/paramInfoSetting.PNG\" alt=\"\" /></p>\n\n<h2 id=\"refactoring\">Refactoring</h2>\n\n<p>Refactoring is a <strong>huge</strong> part of Resharper. I recently stumbled across a [fantastic] refactoring extension called <a href=\"http://vsrefactoringessentials.com/\">Refactoring Essentials</a></p>\n\n<p>You can install this into your project as a nuget package or install it as a visual studio extension. </p>\n\n<p>Refactoring Essentials does not just include refactors, but it also includes a bunch of code quality analyzers, and adjustments.</p>\n\n<h2 id=\"codeanalysis\">Code Analysis</h2>\n\n<p>There are 2 fantastic code analyzers I really enjoy. The first is <a href=\"http://code-cracker.github.io/\">Code Cracker</a> Code cracker has lots of refactorizations to produce higher quality, more readable code. </p>\n\n<p>The second one I like is the <a href=\"https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers/\">FxCop</a> analyzer produced by the Roslyn team. This one uses rules from FxCop to produce refactors to suit best practices in the CLR.</p>\n\n<h2 id=\"autoformat\">Auto Format</h2>\n\n<p>I have had good luck with the <a href=\"https://vlasovstudio.com/continuous-formatting/\">Continuous Formatting</a>, but its a paid product. If you don't want to pay for code formatting, I'd suggest using the <a href=\"http://www.codemaid.net/\">Code Maid</a> Extension. Both extensions are fantastic, and I think Code Maid does a really good job at reorganizing code. To say the least I have both extensions installed. </p>\n\n<h2 id=\"workingwithoutresharper\">Working without resharper</h2>\n\n<p>The first thing that I realized is that intellisense does not auto complete as many classes as resharper. I notice that resharper auto completes classes even without any <code>using</code> statement in the current file. However the new Roslyn quick actions will suggest using things from different namespaces if the names are close enough. </p>\n\n<p><img src=\"/content/images/2015/08/usingStatementExample.png\" alt=\"\" /></p>\n\n<h3 id=\"invokingthelightbulb\">Invoking the Light bulb</h3>\n\n<p>I find the best way to invoke the light bulb is by hitting <kbd>Control</kbd>+<kbd>.</kbd> you can then hit <kbd>Enter</kbd> to select the action in the list.</p>\n\n<h2 id=\"otherextensionsicannotlivewithout\">Other Extensions I cannot live without</h2>\n\n<p>This is an additional list of VS extensions that make me happy.</p>\n\n<ul>\n<li><a href=\"http://www.ndepend.com/\">NDepend</a> Paid product, totally worth it. view my <a href=\"/must-have-tool-ndepend/\">blog post about it</a></li>\n<li><a href=\"https://visualstudiogallery.msdn.microsoft.com/06f39a31-20ce-408c-afee-8a02b484db1c\">Sando Code Search</a> Great little code search tool</li>\n<li><a href=\"http://vswebessentials.com/\">Web Essentials</a> Great web tools for vs</li>\n<li><a href=\"https://visualstudiogallery.msdn.microsoft.com/3b329021-cd7a-4a01-86fc-714c2d05bb6c\">Web Compiler</a> auto web compiler (less, js, etc.)</li>\n<li><a href=\"https://visualstudiogallery.msdn.microsoft.com/d4e9939d-baac-43d4-bece-960eb57e02c1\">C# Methods code snippets</a> method code snippets</li>\n</ul>\n\n<p>Let me know what your favourite VS tools are below.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1439130349552,"created_by":1,"updated_at":1442242500654,"updated_by":1,"published_at":1439134186603,"published_by":1},{"id":47,"uuid":"064db5ef-71e5-4872-8c16-3d4acb6e1004","title":"Saying goodbye to my VPS (..and my opinions of cloud providers)","slug":"saying-goodbye-to-my-vps","markdown":"I have used [Linode](http://linode.com) for quite a long time now. My blog was hosted on linode, as was my StarBound server. My linode was the CentOS Pet I always wanted. Full of manual Fail2Ban configs, I make sure I fed my VPS every day. I even used cowsay to give me a cool message from my pet every login.\n\n\nThe major reason I moved my things away from Linode, was not the devops story itself. I could have stuck with linode, and used chef or something to manage my former friend. I decided to host everything in [Azure Web apps](http://azure.com). Now before I give you my long ramblings why I like azure; I must tell you. I put everything in azure, because my MSDN gave me free credits. There was no huge scientific analysis behind this. The simple fact that I got free money in Azure was the **only** reason why I started using it. \n\n## PaaS: Enabling Small Services\n\nI really like Platform as a Service solutions. They don't work for everything, but I have hosted countless apps in [Heroku](http://heroku.com), [ElasticBeanstalk](https://aws.amazon.com/), [Azure Web apps](http://azure.com), and even [Github Pages](https://pages.github.com/). This blog is hosted on PaaS, my hubot is hosted on PaaS, and even the things I do at work are on a PaaS Solution.\n\nI don't think PaaS is new. I recall going to ~~freewebs~~ [webs.com](http://webs.com) in the mid 2000's and uploading my html pages. They took care of the hosting. What I do believe is new, is the pivot on this idea to use SCM, and automatic build tools to constantly push these changes. These types of solutions really empower the [unix philosophy](https://en.wikipedia.org/wiki/Unix_philosophy) of making small tools, by simplifying the deployment process.\n\nWe really need to move toward a new agile world, and that includes tools that enable fast development, and deployment. \n\n## Why I was on Linode\n\nI love linode, and when I signed up, Digital Ocean was just getting popular. There are other competitors like RamNode, and you could consider Azure/AWS a competitor as well. The price on Linode is cheaper than AWS, and Azure. The VM's are **really** fast. I am not going to give you metrics, just take my word for it. I ran an Insurgency server with 64 players on a 2 core linode, and the same machine in AWS could not keep up. \n\nI tried Digital Ocean, and they were good. Actually for $5, they were very good. I end up sticking with Linode, because their support is fantastic. I recall filing tickets at 2am and getting a reply within 10 minutes. I also recall the reply being 1000% better than anything I got at AWS, or Azure.\n\n>My Linode never went down in the 600 days I had it, except for the 1 day where they turned it off to double my hardware for free (and I knew about it).\n\n## Why I left Linode\n\nSo my over-arching reason I left Linode was because I wanted to push out changes to my blog really fast. I wanted the ability to make small changes to the html quickly. However, to do this on Linode I would have to construct my own deployment tier, even with [Circle CI](https://circleci.com/) backing me up I knew it wouldn't be trivial. \n\n> I wanted to Focus on what made me special, and not deal with yak shaving a deployment system.\n\n## AWS vs Azure\n\nI see a lot of these blog posts. I'll leave the metrics to [other people](http://www.infoworld.com/article/2610403/cloud-computing/ultimate-cloud-speed-tests--amazon-vs--google-vs--windows-azure.html). I am a huge azure fan, and honestly this is probably going to be a biased review. That being said we use AWS where I work, and it is a **very** robust platform.\n\n### AWS\n\nSo I actually quite like AWS. OpsWork has recently made me want to use AWS more, and ElasticBeanstalk is overall ok. My huge gripe with AWS is that I find getting started quite difficult. AWS requires you create lots of security groups, instance groups, VPS configs, etc. to get started, and to be honest its annoying. \n\nThe UI is quite clunky, in fact I use the CLI to avoid the abysmal UI, and good luck finding all the dependent objects of a parent. P.S. the permissions in AWS are terrible, unless you work at a company where everyone has full access.\n\nOn the plus side the instances spin up quite quick, they are well priced, and you can get what feels like unlimited compute. The storage system (S3) is quite user friendly, and well priced.\n\nElasticBeanstalk is alright, but AWS doesn't really have a good Github -> ElasticBeanstalk story. Also some of the features are only available in US data centres.\n\n\n### Azure\n\nAzure is my favorite. Web Apps are really good at hosting web applications in PHP, Java, Nodejs and .NET. I've had some problems hosting node in azure, but every few weeks it seems to get easier, and easier. The UI is great, except sometimes I feel its not responsive enough (some slow load times). Also Azure only has DNS management through the CLI, which is annoying so most people use Simple DNS.\n\nThe actual VM's are quite good, but without picking up the phone you cannot ask for an absurd amount of compute. Blob storage is quite good, and azure has a very cheap no-SQL PaaS that has the [fastest query times ever](http://www.troyhunt.com/2013/12/working-with-154-million-records-on.html).\n\nAlso Microsoft is surprisingly open with how Azure runs under the hood. They say its all IIS, with ISAPI modules, and Hyper-V. They have the [azure friday](http://azure.microsoft.com/en-us/documentation/videos/azure-friday/) podcast where they de-mystify the whole platform, and the [kudu deployment system](https://github.com/projectkudu/kudu) is open source.\n\n### Overall\n\nOverall I love azure more, but AWS is still very good. I feel like AWS has more granular controls, but Azure tends to get in your way less. Pick your poison, because its all the same. That being said use what you **like** not what everyone is using.\n\n","html":"<p>I have used <a href=\"http://linode.com\">Linode</a> for quite a long time now. My blog was hosted on linode, as was my StarBound server. My linode was the CentOS Pet I always wanted. Full of manual Fail2Ban configs, I make sure I fed my VPS every day. I even used cowsay to give me a cool message from my pet every login.</p>\n\n<p>The major reason I moved my things away from Linode, was not the devops story itself. I could have stuck with linode, and used chef or something to manage my former friend. I decided to host everything in <a href=\"http://azure.com\">Azure Web apps</a>. Now before I give you my long ramblings why I like azure; I must tell you. I put everything in azure, because my MSDN gave me free credits. There was no huge scientific analysis behind this. The simple fact that I got free money in Azure was the <strong>only</strong> reason why I started using it. </p>\n\n<h2 id=\"paasenablingsmallservices\">PaaS: Enabling Small Services</h2>\n\n<p>I really like Platform as a Service solutions. They don't work for everything, but I have hosted countless apps in <a href=\"http://heroku.com\">Heroku</a>, <a href=\"https://aws.amazon.com/\">ElasticBeanstalk</a>, <a href=\"http://azure.com\">Azure Web apps</a>, and even <a href=\"https://pages.github.com/\">Github Pages</a>. This blog is hosted on PaaS, my hubot is hosted on PaaS, and even the things I do at work are on a PaaS Solution.</p>\n\n<p>I don't think PaaS is new. I recall going to <del>freewebs</del> <a href=\"http://webs.com\">webs.com</a> in the mid 2000's and uploading my html pages. They took care of the hosting. What I do believe is new, is the pivot on this idea to use SCM, and automatic build tools to constantly push these changes. These types of solutions really empower the <a href=\"https://en.wikipedia.org/wiki/Unix_philosophy\">unix philosophy</a> of making small tools, by simplifying the deployment process.</p>\n\n<p>We really need to move toward a new agile world, and that includes tools that enable fast development, and deployment. </p>\n\n<h2 id=\"whyiwasonlinode\">Why I was on Linode</h2>\n\n<p>I love linode, and when I signed up, Digital Ocean was just getting popular. There are other competitors like RamNode, and you could consider Azure/AWS a competitor as well. The price on Linode is cheaper than AWS, and Azure. The VM's are <strong>really</strong> fast. I am not going to give you metrics, just take my word for it. I ran an Insurgency server with 64 players on a 2 core linode, and the same machine in AWS could not keep up. </p>\n\n<p>I tried Digital Ocean, and they were good. Actually for $5, they were very good. I end up sticking with Linode, because their support is fantastic. I recall filing tickets at 2am and getting a reply within 10 minutes. I also recall the reply being 1000% better than anything I got at AWS, or Azure.</p>\n\n<blockquote>\n  <p>My Linode never went down in the 600 days I had it, except for the 1 day where they turned it off to double my hardware for free (and I knew about it).</p>\n</blockquote>\n\n<h2 id=\"whyileftlinode\">Why I left Linode</h2>\n\n<p>So my over-arching reason I left Linode was because I wanted to push out changes to my blog really fast. I wanted the ability to make small changes to the html quickly. However, to do this on Linode I would have to construct my own deployment tier, even with <a href=\"https://circleci.com/\">Circle CI</a> backing me up I knew it wouldn't be trivial. </p>\n\n<blockquote>\n  <p>I wanted to Focus on what made me special, and not deal with yak shaving a deployment system.</p>\n</blockquote>\n\n<h2 id=\"awsvsazure\">AWS vs Azure</h2>\n\n<p>I see a lot of these blog posts. I'll leave the metrics to <a href=\"http://www.infoworld.com/article/2610403/cloud-computing/ultimate-cloud-speed-tests--amazon-vs--google-vs--windows-azure.html\">other people</a>. I am a huge azure fan, and honestly this is probably going to be a biased review. That being said we use AWS where I work, and it is a <strong>very</strong> robust platform.</p>\n\n<h3 id=\"aws\">AWS</h3>\n\n<p>So I actually quite like AWS. OpsWork has recently made me want to use AWS more, and ElasticBeanstalk is overall ok. My huge gripe with AWS is that I find getting started quite difficult. AWS requires you create lots of security groups, instance groups, VPS configs, etc. to get started, and to be honest its annoying. </p>\n\n<p>The UI is quite clunky, in fact I use the CLI to avoid the abysmal UI, and good luck finding all the dependent objects of a parent. P.S. the permissions in AWS are terrible, unless you work at a company where everyone has full access.</p>\n\n<p>On the plus side the instances spin up quite quick, they are well priced, and you can get what feels like unlimited compute. The storage system (S3) is quite user friendly, and well priced.</p>\n\n<p>ElasticBeanstalk is alright, but AWS doesn't really have a good Github -> ElasticBeanstalk story. Also some of the features are only available in US data centres.</p>\n\n<h3 id=\"azure\">Azure</h3>\n\n<p>Azure is my favorite. Web Apps are really good at hosting web applications in PHP, Java, Nodejs and .NET. I've had some problems hosting node in azure, but every few weeks it seems to get easier, and easier. The UI is great, except sometimes I feel its not responsive enough (some slow load times). Also Azure only has DNS management through the CLI, which is annoying so most people use Simple DNS.</p>\n\n<p>The actual VM's are quite good, but without picking up the phone you cannot ask for an absurd amount of compute. Blob storage is quite good, and azure has a very cheap no-SQL PaaS that has the <a href=\"http://www.troyhunt.com/2013/12/working-with-154-million-records-on.html\">fastest query times ever</a>.</p>\n\n<p>Also Microsoft is surprisingly open with how Azure runs under the hood. They say its all IIS, with ISAPI modules, and Hyper-V. They have the <a href=\"http://azure.microsoft.com/en-us/documentation/videos/azure-friday/\">azure friday</a> podcast where they de-mystify the whole platform, and the <a href=\"https://github.com/projectkudu/kudu\">kudu deployment system</a> is open source.</p>\n\n<h3 id=\"overall\">Overall</h3>\n\n<p>Overall I love azure more, but AWS is still very good. I feel like AWS has more granular controls, but Azure tends to get in your way less. Pick your poison, because its all the same. That being said use what you <strong>like</strong> not what everyone is using.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1439244318649,"created_by":1,"updated_at":1439247199594,"updated_by":1,"published_at":1439247191839,"published_by":1},{"id":48,"uuid":"67492f7a-f7a6-4e32-9d70-d8425fd67757","title":"Navigating the JavaScript waters in 2015","slug":"navigating-the-javascript-waters-in-2015","markdown":"In this last year I have done much more JavaScript development than I have before. The landscape, and tools have exploded over the last few years. Gone are the days of JQuery widgets, and come forth have advanced virtual dom libraries, JavaScript servers, and multiple package managers. Along with new language features.\n\n## Node.js and io.js\n\nRight now there are two versions of Node.js. Although fairly soon the code bases will [merge back together](http://thenextweb.com/dd/2015/06/16/node-js-and-io-js-are-settling-their-differences-merging-back-together/). \n\nFor those of you whom don't know, node.js is a server side JavaScript environment. io.js was a recent fork of the node.js code base to include newer language features, and updated versions of V8.\n\nIn the long run both of these runtimes will merge to make the Node Foundation. In the short term I'd stick with node, unless you have a compelling reason to use io.\n\n## Package Management\n\n* [Bower](http://bower.io/) - Simple package manager to download files and place them on the file system.\n\n* [jspm](http://jspm.io/) - Client side focused package manager\n\n* [npm](https://www.npmjs.com) - Package manager mostly focused on shipping CommonJS modules, mostly for node.js\n\n\n## Modules\n\nModules are a pattern that encapsulates JavaScript code so scripts do not have to rely on the global namespace, but instead reference the file definitions.\n\n* CommonJS essentially defines module patterns with the use of an exports object.\n* [AMD](http://requirejs.org/docs/whyamd.html) is a module definition designed for files to be downloaded separately, with the browser in mind. \n\n## Great libraries to mention\n\nThese are some of the libraries I have liked. I'm sure I am leaving out many great others.\n\n* [Babel](https://babeljs.io/) - ES6 to ES5 transpiler. People use this to write ES6 code, and have it recompile to ES5 for use with older browsers.\n* [ReactJS](http://facebook.github.io/react/) Client-Side framework for building UI's. Reacts strength is a Virtual DOM system that figures out what to alter in the UI, and just alters those elements, instead of altering the whole document.\n* [Mithril](https://lhorie.github.io/mithril/) - Client Side MVC with Virtual DOM diff system (akin to ReactJS)\n* [Tungstenjs](https://github.com/wayfair/tungstenjs) Virtual DOM system using Mustache server side, with plugins for backbonejs and ambersandjs client side.\n* [Browserify](http://browserify.org/) A library that bundles commonJS modules into a file for use with the browser.\n* [Grunt](http://gruntjs.com/) JavaScript task runner similar to Ant or Rake\n* [Gulp](http://gulpjs.com/) Much like grunt, a JavaScript task framework much like Rake\n","html":"<p>In this last year I have done much more JavaScript development than I have before. The landscape, and tools have exploded over the last few years. Gone are the days of JQuery widgets, and come forth have advanced virtual dom libraries, JavaScript servers, and multiple package managers. Along with new language features.</p>\n\n<h2 id=\"nodejsandiojs\">Node.js and io.js</h2>\n\n<p>Right now there are two versions of Node.js. Although fairly soon the code bases will <a href=\"http://thenextweb.com/dd/2015/06/16/node-js-and-io-js-are-settling-their-differences-merging-back-together/\">merge back together</a>. </p>\n\n<p>For those of you whom don't know, node.js is a server side JavaScript environment. io.js was a recent fork of the node.js code base to include newer language features, and updated versions of V8.</p>\n\n<p>In the long run both of these runtimes will merge to make the Node Foundation. In the short term I'd stick with node, unless you have a compelling reason to use io.</p>\n\n<h2 id=\"packagemanagement\">Package Management</h2>\n\n<ul>\n<li><p><a href=\"http://bower.io/\">Bower</a> - Simple package manager to download files and place them on the file system.</p></li>\n<li><p><a href=\"http://jspm.io/\">jspm</a> - Client side focused package manager</p></li>\n<li><p><a href=\"https://www.npmjs.com\">npm</a> - Package manager mostly focused on shipping CommonJS modules, mostly for node.js</p></li>\n</ul>\n\n<h2 id=\"modules\">Modules</h2>\n\n<p>Modules are a pattern that encapsulates JavaScript code so scripts do not have to rely on the global namespace, but instead reference the file definitions.</p>\n\n<ul>\n<li>CommonJS essentially defines module patterns with the use of an exports object.</li>\n<li><a href=\"http://requirejs.org/docs/whyamd.html\">AMD</a> is a module definition designed for files to be downloaded separately, with the browser in mind. </li>\n</ul>\n\n<h2 id=\"greatlibrariestomention\">Great libraries to mention</h2>\n\n<p>These are some of the libraries I have liked. I'm sure I am leaving out many great others.</p>\n\n<ul>\n<li><a href=\"https://babeljs.io/\">Babel</a> - ES6 to ES5 transpiler. People use this to write ES6 code, and have it recompile to ES5 for use with older browsers.</li>\n<li><a href=\"http://facebook.github.io/react/\">ReactJS</a> Client-Side framework for building UI's. Reacts strength is a Virtual DOM system that figures out what to alter in the UI, and just alters those elements, instead of altering the whole document.</li>\n<li><a href=\"https://lhorie.github.io/mithril/\">Mithril</a> - Client Side MVC with Virtual DOM diff system (akin to ReactJS)</li>\n<li><a href=\"https://github.com/wayfair/tungstenjs\">Tungstenjs</a> Virtual DOM system using Mustache server side, with plugins for backbonejs and ambersandjs client side.</li>\n<li><a href=\"http://browserify.org/\">Browserify</a> A library that bundles commonJS modules into a file for use with the browser.</li>\n<li><a href=\"http://gruntjs.com/\">Grunt</a> JavaScript task runner similar to Ant or Rake</li>\n<li><a href=\"http://gulpjs.com/\">Gulp</a> Much like grunt, a JavaScript task framework much like Rake</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441150781828,"created_by":1,"updated_at":1441153107552,"updated_by":1,"published_at":1441153063250,"published_by":1},{"id":49,"uuid":"77eda3d7-9e6e-4865-8204-f79613f699f7","title":"Razor Websites, lightweight C# web coding","slug":"razor-websites-super-lightweight-c-webdev","markdown":"I was exploring around github, and I stumbled upon an interesting project called [Miniblog](https://github.com/madskristensen/miniblog) which was a lightweight blog engine written in c#. The thing that immediately stood out to me was the lack of a `.csproj` file. \n\n>As I dug around the code I realized this was not a Web App, which most of us were familiar with, but a websites project. I then suddenly realized that the whole thing only used razor!\n\nI am a huge fan of [Nancyfx](http://nancyfx.org/) because its much more lightweight than the MVC framework created at Microsoft. To say the least I am a massive fan of small tools, and micro frameworks. So when I realized this whole thing was powered by razor only I was immediately impressed.\n\nI decided to dig around on the internet to see if anyone else was talking about this. I found out quickly that it has been possible for [some time](http://www.hanselman.com/blog/ExploringASPNETWebPagesAFullyfeaturedMiniBlogUsingJustRazor.aspx), but I didn't find many references about it.\n\nThe one thing that bummed me out about the Miniblog example was that it was not a web app. You can use nuget packages will websites, but you cannot make references to other projects in the solution. This was a problem for me, and unlike websites, web app's are precompiled which reduces application startup time.\n\n## Why use Razor Websites?\n\nThe biggest reason to use razor websites, is the speed. Razor websites have almost no routing code, and are much more lightweight than a full framework. They are good for small projects, but for complex data access applications a more robust framework should be used.\n\n## Creating a razor website as a web app project\n\nTo create a razor website as a web app project, first create an empty web project, and then just add the following nuget packages.\n\n```xml\nMicrosoft.AspNet.Razor\nMicrosoft.AspNet.WebPages\nMicrosoft.Web.Infrastructure\n\n```\n\nNow you can drop razor files anywhere. Your routes will be the location of your razor pages, so for instance your home page should be `Index.cshtml` and it should be at the root of your web project. If you had a file called about.cshtml on the root, the route would be `/about` if it were in a subfolder it would be `/subfolder/about`.\n\nI even did some tricks where I put razor files in a folder called `api` and had logic in those views to deserialize the request body to models, and place them in a datastore. This gave the illusion that my ajax calls were somehow hitting some complex API.\n\n\n## Things to note\n\nThe `@model` will not work in razor. You can pass an object to another view during a render, and that file can get the object with `this.Model`\n\nIf you return something other than text remember to set the content type, and don't hesitate to write directly to the output stream.\n\n```csharp\n    this.Response.ContentType = \"application/json\";\n    this.Response.Write(Newtonsoft.Json.JsonConvert.SerializeObject(Database.Data));\n\n```","html":"<p>I was exploring around github, and I stumbled upon an interesting project called <a href=\"https://github.com/madskristensen/miniblog\">Miniblog</a> which was a lightweight blog engine written in c#. The thing that immediately stood out to me was the lack of a <code>.csproj</code> file. </p>\n\n<blockquote>\n  <p>As I dug around the code I realized this was not a Web App, which most of us were familiar with, but a websites project. I then suddenly realized that the whole thing only used razor!</p>\n</blockquote>\n\n<p>I am a huge fan of <a href=\"http://nancyfx.org/\">Nancyfx</a> because its much more lightweight than the MVC framework created at Microsoft. To say the least I am a massive fan of small tools, and micro frameworks. So when I realized this whole thing was powered by razor only I was immediately impressed.</p>\n\n<p>I decided to dig around on the internet to see if anyone else was talking about this. I found out quickly that it has been possible for <a href=\"http://www.hanselman.com/blog/ExploringASPNETWebPagesAFullyfeaturedMiniBlogUsingJustRazor.aspx\">some time</a>, but I didn't find many references about it.</p>\n\n<p>The one thing that bummed me out about the Miniblog example was that it was not a web app. You can use nuget packages will websites, but you cannot make references to other projects in the solution. This was a problem for me, and unlike websites, web app's are precompiled which reduces application startup time.</p>\n\n<h2 id=\"whyuserazorwebsites\">Why use Razor Websites?</h2>\n\n<p>The biggest reason to use razor websites, is the speed. Razor websites have almost no routing code, and are much more lightweight than a full framework. They are good for small projects, but for complex data access applications a more robust framework should be used.</p>\n\n<h2 id=\"creatingarazorwebsiteasawebappproject\">Creating a razor website as a web app project</h2>\n\n<p>To create a razor website as a web app project, first create an empty web project, and then just add the following nuget packages.</p>\n\n<pre><code class=\"language-xml\">Microsoft.AspNet.Razor  \nMicrosoft.AspNet.WebPages  \nMicrosoft.Web.Infrastructure\n</code></pre>\n\n<p>Now you can drop razor files anywhere. Your routes will be the location of your razor pages, so for instance your home page should be <code>Index.cshtml</code> and it should be at the root of your web project. If you had a file called about.cshtml on the root, the route would be <code>/about</code> if it were in a subfolder it would be <code>/subfolder/about</code>.</p>\n\n<p>I even did some tricks where I put razor files in a folder called <code>api</code> and had logic in those views to deserialize the request body to models, and place them in a datastore. This gave the illusion that my ajax calls were somehow hitting some complex API.</p>\n\n<h2 id=\"thingstonote\">Things to note</h2>\n\n<p>The <code>@model</code> will not work in razor. You can pass an object to another view during a render, and that file can get the object with <code>this.Model</code></p>\n\n<p>If you return something other than text remember to set the content type, and don't hesitate to write directly to the output stream.</p>\n\n<pre><code class=\"language-csharp\">    this.Response.ContentType = \"application/json\";\n    this.Response.Write(Newtonsoft.Json.JsonConvert.SerializeObject(Database.Data));\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441317394392,"created_by":1,"updated_at":1443819633611,"updated_by":1,"published_at":1443819633611,"published_by":1},{"id":50,"uuid":"5d2a279c-b1a4-4f60-b3bc-f92952720b3b","title":"Avoid the Godclass","slug":"avoid-the-godclass","markdown":"I joined a team earlier this year, who own a core set of pages on our website. This part of the site makes us **buckets** of money, and was written by people whom are clearly smarter than me. However every platform is not without its quirks.\n\nMost of the code is C# MVC but a lot of the problems with the platform are more historic architecture, and less `.NET` specific.\n\n#### Dependency Management\n\nThe early creators of the platform had a model we will call WidgetModel. WidgetModel, initially was a basic representation of our view layer before templating.  Over the course of many short deadlines, poor management, and continuous growth, the model became more than a simple model. \n\nTo say the least, parts of the application state ends up being stored in this model, along with Session data. WidgetModel gets passed around everywhere, and way more than half of the codebase took a dependency on the model. Any changes to this model require major application refactors.\n\nI even found SprocketFactory that took in a WidgetModel and added itself to WidgetModel, then called a function in WidgetModel that needed a dependency to SprocketFactory. Just take a moment to grok how terrible that is.\n\n\n\n#### Contexts\n\nSo I'm sure you are thinking, well WidgetModel not great but atleast you can use it always right? **wrong**\n\nOur application was originally a WebForms application, that was ~~transformed~~ pummeled into an MVC architecture. Our version of MVC still has weird ViewState crazyness, and was ultimately bolted on. \n\nWidgetModel has very **deep** dependencies to certain session context objects. These objects are largely **unavailable** in an API request. So WidgetModel must not be used in an API. \n\n#### DI, Not always your friend\n\nNow when I first started I thought it would still be ok, because they must get their dependencies from somewhere. Most paradigms I see in .NET dependencies are given through constructors.\n\nHowever this was not the case. I found the following in all classes that needed WidgetModel.\n\n```csharp\n\n\n    public WidgetModel GodModelRARRRR\n    {\n        get\n        {\n            return RandomDependencyContainer.Get<WidgetModel>();\n        }\n    }\n\n```\n\n\nBasically they got WidgetModel from a dependency injector in a property getter. So whenever someone writes code for our API 3/4 times while developing someone calls a class that calls a class that wants WidgetModel really badly, that causes our whole application to blow up.\n\n\n#### Solving this Problem\n\nWe didn't have the scope to re-write everything. Rewriting most of the code was a year long project by itself. We also needed to keep parts of our app. Our attitude was simple, \n>Rewrite as an SPA. \n\nIf we are entirely a JavaScript SPA, and we only call API's we won't be able to accidentally take a dependency on WidgetModel. This approach is leading us to delete WidgetModel all together. The 1/4 of the app that didn't have the dependency to WidgetModel was actually maintainable. \n\nThe great part about this was, we could burn down most of our code, while keeping a huge chunk that was actually quite maintainable. ","html":"<p>I joined a team earlier this year, who own a core set of pages on our website. This part of the site makes us <strong>buckets</strong> of money, and was written by people whom are clearly smarter than me. However every platform is not without its quirks.</p>\n\n<p>Most of the code is C# MVC but a lot of the problems with the platform are more historic architecture, and less <code>.NET</code> specific.</p>\n\n<h4 id=\"dependencymanagement\">Dependency Management</h4>\n\n<p>The early creators of the platform had a model we will call WidgetModel. WidgetModel, initially was a basic representation of our view layer before templating.  Over the course of many short deadlines, poor management, and continuous growth, the model became more than a simple model. </p>\n\n<p>To say the least, parts of the application state ends up being stored in this model, along with Session data. WidgetModel gets passed around everywhere, and way more than half of the codebase took a dependency on the model. Any changes to this model require major application refactors.</p>\n\n<p>I even found SprocketFactory that took in a WidgetModel and added itself to WidgetModel, then called a function in WidgetModel that needed a dependency to SprocketFactory. Just take a moment to grok how terrible that is.</p>\n\n<h4 id=\"contexts\">Contexts</h4>\n\n<p>So I'm sure you are thinking, well WidgetModel not great but atleast you can use it always right? <strong>wrong</strong></p>\n\n<p>Our application was originally a WebForms application, that was <del>transformed</del> pummeled into an MVC architecture. Our version of MVC still has weird ViewState crazyness, and was ultimately bolted on. </p>\n\n<p>WidgetModel has very <strong>deep</strong> dependencies to certain session context objects. These objects are largely <strong>unavailable</strong> in an API request. So WidgetModel must not be used in an API. </p>\n\n<h4 id=\"dinotalwaysyourfriend\">DI, Not always your friend</h4>\n\n<p>Now when I first started I thought it would still be ok, because they must get their dependencies from somewhere. Most paradigms I see in .NET dependencies are given through constructors.</p>\n\n<p>However this was not the case. I found the following in all classes that needed WidgetModel.</p>\n\n<pre><code class=\"language-csharp\">    public WidgetModel GodModelRARRRR\n    {\n        get\n        {\n            return RandomDependencyContainer.Get&lt;WidgetModel&gt;();\n        }\n    }\n</code></pre>\n\n<p>Basically they got WidgetModel from a dependency injector in a property getter. So whenever someone writes code for our API 3/4 times while developing someone calls a class that calls a class that wants WidgetModel really badly, that causes our whole application to blow up.</p>\n\n<h4 id=\"solvingthisproblem\">Solving this Problem</h4>\n\n<p>We didn't have the scope to re-write everything. Rewriting most of the code was a year long project by itself. We also needed to keep parts of our app. Our attitude was simple,  </p>\n\n<blockquote>\n  <p>Rewrite as an SPA. </p>\n</blockquote>\n\n<p>If we are entirely a JavaScript SPA, and we only call API's we won't be able to accidentally take a dependency on WidgetModel. This approach is leading us to delete WidgetModel all together. The 1/4 of the app that didn't have the dependency to WidgetModel was actually maintainable. </p>\n\n<p>The great part about this was, we could burn down most of our code, while keeping a huge chunk that was actually quite maintainable. </p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441459692220,"created_by":1,"updated_at":1442663677525,"updated_by":1,"published_at":1441465300342,"published_by":1},{"id":51,"uuid":"a686852f-e406-434c-93c3-98e948cf9fa6","title":"Property Injection Antipattern","slug":"property-injection-antipattern","markdown":"","html":"","image":null,"featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441459842864,"created_by":1,"updated_at":1443974118233,"updated_by":1,"published_at":null,"published_by":null},{"id":53,"uuid":"17a07817-23da-4a54-b57a-44f9d5fc8382","title":"Fixing: Could not load file or assembly 'Microsoft.Dnx.Host.Clr'","slug":"fixing-could-not-load-file-or-assembly-microsoft-dnx-host-clr-2","markdown":"So I recently ran into this error where the latest bits could not load Microsoft.Dnx.Host.Clr here is what I did to fix it.\n\n\n* Followed the instructions from the [beta7 announcements](https://github.com/aspnet/Announcements/issues/51)\n * Installed the [latest web tools](http://www.microsoft.com/en-us/download/details.aspx?id=48222) **warning**: there are multiple MSI's in that link. Install the WebToolsExtensions\n* Updated my runtime `dnvm upgrade -u -r clr`\n* Made sure my project was set to use the latest runtime\n* Updated my nuget packages `dnu restore`\n\nAfterwards everything seemed to work.","html":"<p>So I recently ran into this error where the latest bits could not load Microsoft.Dnx.Host.Clr here is what I did to fix it.</p>\n\n<ul>\n<li>Followed the instructions from the <a href=\"https://github.com/aspnet/Announcements/issues/51\">beta7 announcements</a>\n<ul><li>Installed the <a href=\"http://www.microsoft.com/en-us/download/details.aspx?id=48222\">latest web tools</a> <strong>warning</strong>: there are multiple MSI's in that link. Install the WebToolsExtensions</li></ul></li>\n<li>Updated my runtime <code>dnvm upgrade -u -r clr</code></li>\n<li>Made sure my project was set to use the latest runtime</li>\n<li>Updated my nuget packages <code>dnu restore</code></li>\n</ul>\n\n<p>Afterwards everything seemed to work.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1441807698869,"created_by":1,"updated_at":1441834481003,"updated_by":1,"published_at":1441808170899,"published_by":1},{"id":54,"uuid":"5a7410d5-e191-4d77-a02f-b11a5082c81f","title":"Drastically altering view behaviors using custom DisplayFor templates C# MVC","slug":"custom-mvc-display-templates-2","markdown":"One feature that I think is highly under-documented in the C# MVC framework is custom `DisplayFor` and `EditorFor` Templates.\n\nBy simply making folders in your views folder called `DisplayTemplates` and `EditorTemplates` you can use the `DisplayFor(a=>a.TypeHere)` and `EditFor(a=>a.TypeHere)` with any custom types you so choose.\n\n```\n-Controllers\n-Views\n-- Home\n---- DisplayTemplates\n------ CustomTypeName.cshtml\n\n```\n\nSo I thought to myself how this would be useful, and I have come up with a demo in [github](https://github.com/tparnell8/CSharp-MVC-Plugin-Views)\n\nEssentially it goes like this. I have a bootstrap grid that we could fill with multiple tiles. This would be good if you were to show a gallery of images, and perhaps certain tiles would have different behavior. In my example I have 1 tile that displays an image, and another tile that displays some text.\n\nI created an interface called `ITile` and had my ImageTile, and TextTile inherit from this interface.\n\n```csharp\n\n    public class ImageTile : ITile\n    {\n        public string src { get; set; }\n    }\n\n```\n\n```csharp\n    public class TextTile : ITile\n    {\n        public string Text { get; set; }\n    }\n```\n\n```csharp\n    public class ViewModel\n    {\n        public ICollection<ITile> Tiles { get; set; }\n    }\n\n``` \n\nSo my controllers simply creates these tile objects. The main view loops over the tiles and calls a partial view that looks like this.\n\n```csharp\n\n@model DisplayTemplateExample.Web.Models.ITile\n@Html.DisplayFor(a=>a)\n\n```\n\nThen I created 2 templates in `Views/Shared/DisplayTemplates` One named ImageTile.cshtml, and the other named TextTile.cshtml **note:** the razor file names have to line up with the type name.\n\nThen in each of these views I have different html returned\n\n```\n@model DisplayTemplateExample.Web.Models.ImageTile\n\n<a href=\"#\" class=\"thumbnail\">\n    <img src=\"@Model.src\" />\n</a>\n\n```\n\n```\n@model DisplayTemplateExample.Web.Models.TextTile\n<div class=\"thumbnail\">@Model.Text</div>\n```\n\nOk so I'm sure you are now thinking whats the point? My point is that our entire view infrastructure, has no idea the items in the `ITile` collection will create different html. This allows the Controllers to add or change the downstream behavior based on SessionContext, or anything you wish. The ultimate thing this empowers is the ability to create a ***pluggable*** view infrastructure where the type inheritance control what occurs in the view layer. The huge downside is the debugging experience is not stellar.","html":"<p>One feature that I think is highly under-documented in the C# MVC framework is custom <code>DisplayFor</code> and <code>EditorFor</code> Templates.</p>\n\n<p>By simply making folders in your views folder called <code>DisplayTemplates</code> and <code>EditorTemplates</code> you can use the <code>DisplayFor(a=&gt;a.TypeHere)</code> and <code>EditFor(a=&gt;a.TypeHere)</code> with any custom types you so choose.</p>\n\n<pre><code>-Controllers\n-Views\n-- Home\n---- DisplayTemplates\n------ CustomTypeName.cshtml\n</code></pre>\n\n<p>So I thought to myself how this would be useful, and I have come up with a demo in <a href=\"https://github.com/tparnell8/CSharp-MVC-Plugin-Views\">github</a></p>\n\n<p>Essentially it goes like this. I have a bootstrap grid that we could fill with multiple tiles. This would be good if you were to show a gallery of images, and perhaps certain tiles would have different behavior. In my example I have 1 tile that displays an image, and another tile that displays some text.</p>\n\n<p>I created an interface called <code>ITile</code> and had my ImageTile, and TextTile inherit from this interface.</p>\n\n<pre><code class=\"language-csharp\">    public class ImageTile : ITile\n    {\n        public string src { get; set; }\n    }\n</code></pre>\n\n<pre><code class=\"language-csharp\">    public class TextTile : ITile\n    {\n        public string Text { get; set; }\n    }\n</code></pre>\n\n<pre><code class=\"language-csharp\">    public class ViewModel\n    {\n        public ICollection&lt;ITile&gt; Tiles { get; set; }\n    }\n</code></pre>\n\n<p>So my controllers simply creates these tile objects. The main view loops over the tiles and calls a partial view that looks like this.</p>\n\n<pre><code class=\"language-csharp\">@model DisplayTemplateExample.Web.Models.ITile\n@Html.DisplayFor(a=&gt;a)\n</code></pre>\n\n<p>Then I created 2 templates in <code>Views/Shared/DisplayTemplates</code> One named ImageTile.cshtml, and the other named TextTile.cshtml <strong>note:</strong> the razor file names have to line up with the type name.</p>\n\n<p>Then in each of these views I have different html returned</p>\n\n<pre><code>@model DisplayTemplateExample.Web.Models.ImageTile\n\n&lt;a href=\"#\" class=\"thumbnail\"&gt;  \n    &lt;img src=\"@Model.src\" /&gt;\n&lt;/a&gt;\n</code></pre>\n\n<pre><code>@model DisplayTemplateExample.Web.Models.TextTile\n&lt;div class=\"thumbnail\"&gt;@Model.Text&lt;/div&gt;  \n</code></pre>\n\n<p>Ok so I'm sure you are now thinking whats the point? My point is that our entire view infrastructure, has no idea the items in the <code>ITile</code> collection will create different html. This allows the Controllers to add or change the downstream behavior based on SessionContext, or anything you wish. The ultimate thing this empowers is the ability to create a <strong><em>pluggable</em></strong> view infrastructure where the type inheritance control what occurs in the view layer. The huge downside is the debugging experience is not stellar.</p>","image":"","featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":null,"author_id":1,"created_at":1442160527942,"created_by":1,"updated_at":1442328776891,"updated_by":1,"published_at":1442313977379,"published_by":1},{"id":55,"uuid":"263e8f75-b644-4304-b5b1-4755e5f500d4","title":"How .ToLookup() Saved me 4 hours a week, and got me some high praise from my boss","slug":"how-tolookup-saved-me-4-hours-a-week-and-got-me-some-high-praise-from-my-boss","markdown":"I recently created a small utility that is ran in jenkins to create indicies in [ElasticSearch](https://www.elastic.co/webinars/get-started-with-elasticsearch?elektra=home&storm=banner). \n\nThe first versions took around 5 hours to index our massive data into elasticsearch. This was still better than the 9 hours, our old solution took, so no one was complaining. \n\nOne of the major slowdowns was a `.Where()` on a `List<T>`. When I wrote the tool this TODO was written \n\n>//TODO: use some kind of key lookup here, but we need non-unique keys and Dictionaries are unique only\n\nBasically I was doing `.Where(a=>a.Id == SomeVal)`, and from what I can tell in the [source](http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,141) `.NET` was doing this by looping over the whole collection. People smarter than me would point out that this is an `O(n)` operation.\n\nWhat caused the bottleneck was this **huge** collection (I'm talking in the realm of 8000+ entities) we were looping over. I **knew** we wanted to do key lookups, but I cannot know every little thing in the BCL (Base Class Library). The only collection I knew of for key lookups (dictionary) was for **unique keys** only. This was a problem, as my keys were not unique. \n\nOne day while looking at some of the linq extensions I found the [ToLookup()](https://msdn.microsoft.com/en-us/library/system.linq.enumerable.tolookup(v=vs.90).aspx) extension which converted the current collection to an [Lookup](https://msdn.microsoft.com/en-us/library/bb460184(v=vs.90).aspx) class.\n\nAfter reading the documentation I knew this was the perfect collection for me. Essentially it groups multiple entities by key, which means it returns a collection of your results grouped on the keys. This would transform my `O(n)` operation to an `O(1)` operation. Eventually I landed on something like this.\n\n```csharp\n\nvar col = hugeCollection.ToLookup(a=>a.id, a);\n\nvar lookupResults = col[IdToLookup] \n\n```\n\nThis ultimately lead to our application's run time going from 5 hours to 40 minutes. Now really this didn't save me 4 hours as much as it saved jenkins, but it did allow changes we made into elasticsearch faster which means we could make more changes, and tighten our feedback loops.\n","html":"<p>I recently created a small utility that is ran in jenkins to create indicies in <a href=\"https://www.elastic.co/webinars/get-started-with-elasticsearch?elektra=home&amp;storm=banner\">ElasticSearch</a>. </p>\n\n<p>The first versions took around 5 hours to index our massive data into elasticsearch. This was still better than the 9 hours, our old solution took, so no one was complaining. </p>\n\n<p>One of the major slowdowns was a <code>.Where()</code> on a <code>List&lt;T&gt;</code>. When I wrote the tool this TODO was written </p>\n\n<blockquote>\n  <p>//TODO: use some kind of key lookup here, but we need non-unique keys and Dictionaries are unique only</p>\n</blockquote>\n\n<p>Basically I was doing <code>.Where(a=&gt;a.Id == SomeVal)</code>, and from what I can tell in the <a href=\"http://referencesource.microsoft.com/#System.Core/System/Linq/Enumerable.cs,141\">source</a> <code>.NET</code> was doing this by looping over the whole collection. People smarter than me would point out that this is an <code>O(n)</code> operation.</p>\n\n<p>What caused the bottleneck was this <strong>huge</strong> collection (I'm talking in the realm of 8000+ entities) we were looping over. I <strong>knew</strong> we wanted to do key lookups, but I cannot know every little thing in the BCL (Base Class Library). The only collection I knew of for key lookups (dictionary) was for <strong>unique keys</strong> only. This was a problem, as my keys were not unique. </p>\n\n<p>One day while looking at some of the linq extensions I found the <a href=\"https://msdn.microsoft.com/en-us/library/system.linq.enumerable.tolookup(v=vs.90).aspx\">ToLookup()</a> extension which converted the current collection to an <a href=\"https://msdn.microsoft.com/en-us/library/bb460184(v=vs.90).aspx\">Lookup</a> class.</p>\n\n<p>After reading the documentation I knew this was the perfect collection for me. Essentially it groups multiple entities by key, which means it returns a collection of your results grouped on the keys. This would transform my <code>O(n)</code> operation to an <code>O(1)</code> operation. Eventually I landed on something like this.</p>\n\n<pre><code class=\"language-csharp\">var col = hugeCollection.ToLookup(a=&gt;a.id, a);\n\nvar lookupResults = col[IdToLookup] \n</code></pre>\n\n<p>This ultimately lead to our application's run time going from 5 hours to 40 minutes. Now really this didn't save me 4 hours as much as it saved jenkins, but it did allow changes we made into elasticsearch faster which means we could make more changes, and tighten our feedback loops.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":"","meta_description":"","author_id":1,"created_at":1442237768330,"created_by":1,"updated_at":1442919613523,"updated_by":1,"published_at":1442918880000,"published_by":1},{"id":56,"uuid":"4b3b1235-afb7-4616-930c-ea11c34929a4","title":"Less Pager duty, more Yak duty. My (Strange) DevOps (rant) story.","slug":"less-pager-duty-more-yak-duty-my-strange-devops-rant-story","markdown":"Growing up I always wanted to work with electronics, and as soon as I could work I was working with a computer. I currently work as a Software Engineer at [Vistaprint](http://vistaprint.com). I work on the Gallery team, which is an agile development team that works on our platform to display products in a gallery (hence the name). Before I joined the gallery team, I spent most of my career doing ops things.\n\nWhen I started working in the industry I was really interested in working with scaled out infrastructure. Any large compute things I had an interest in, which lead me to be more or less an 'Ops' person. Over the course of this period I did quite a bit of networking, VMware, and LDAP administration. My first real gig was working for a school district. Staff, and students combined was 6000, and we quickly realized the only way for our team of 3 to be effective was to write code. This was my first real introduction into programming (yup, I was a late bloomer to programming).\n\nI always thought programming was something done by PhD types, and I never thought I'd be smart enough to do it. I didn't have the privilege of going to a great University. In fact I got my degree while working in the Industry, this left me with a lot of insecurities early on in my career. I am a creative person, and I always thought I'd be good as a full stack Web Developer. I tried to learn JavaScript in 2005, and decided that programming was too hard, not realizing that js, and the DOM API's were working against me.\n\nI think the first time programming really 'clicked' for me was when I needed to create a script to move around 1000 users from one OU to another in Active Directory. I quickly started Googling on the ol' Bing, and I managed to whip something together with the multitudes of knowledge out there.\n\n>This was the first time that I had a real taste of the power programming can unlock, and that power was intoxicating.\n\nOver the course of my ops career I started creating a lot of tooling to pursue the goal of faster, more flexible infrastructure. During this time I noticed that some of my colleagues really started acting different around me.\n\n>All of a sudden, I felt very alienated from the rest of the operations community, but I wasn't being embraced by most of the developers either.\n\nI think a lot of the culture issues quickly I faced subsided when we had *Insert large amount* of copies of the Phoenix Project floating around the office.\n\nWhile I working on a team with [Sarah Flint](https://www.linkedin.com/profile/view?id=15269002), and [Matt Alioto](https://www.linkedin.com/profile/view?id=75343021) called Automation Task Force (that is the actual name). One of my good friends [Nicholas Pirollo](http://nickpirollo.net/) mentioned I should join the gallery team. This was further reinforced by [Drew Ditto](https://www.linkedin.com/pub/drew-ditto/52/786/927) the lead developer. As someone who spent their entire career in ops, and never thought about being a Software Engineer. I was immediately skeptical if I could even add value to their team. I took the risk, and plunged into what is basically a new career.\n\nThe one amazing thing about Vistaprint...erm..Cimpress is the fluidity at which people can grow, and change their careers (and I'm not getting paid to write this either). I've grown a ton over the last 4 years already. Within a month of saying \"sure I'll come work for you guys\" I was on their team, and was already working on some major changes that I probably shouldn't hint about.\n\nMy being on this team has certainly helped things move a little. A lot of ops people have come to me for dev-centric questions, and I have been increasingly helpful in providing them a perspective of what developers at Cimpress want. While also telling the people on my (new) team, how to structure requests to the ops teams, and how we can make our application(s) more accessible to our operations brethren. That being said I didn't write this to give you the typical 'DevOps' story, but unfortunately as I write this it is slowly turning out this way.\n\nI feel that I have matured a lot. I have really started to understand the problems developers around me face, when they have little domain knowledge on what would be more traditional IT things. I am not really good at understanding human relationships, but this move as certainly made me realize how two groups of very similar people can be different. The one thing that has really irked me lately is both of these groups of people have more things in common, than differences. Yet both groups seem hell bent to point out each others failings.\n\nI guess my whole point in this whole thing is to try to gain someone else's perspective. That is probably what mixed Developer/Ops teams try to gain. Lets be honest dev's and op's have more or less a symbiotic relationship. Even with every cloud technology at you command, you will still need ops people once you get to a certain scale, and ops people cannot administrate systems that don't do anything. Lets come together and get along, for the good of **OUR** industry.\n\n**tl;dr** I was a sysadmin, now a dev. Why Can't we all get along?","html":"<p>Growing up I always wanted to work with electronics, and as soon as I could work I was working with a computer. I currently work as a Software Engineer at <a href=\"http://vistaprint.com\">Vistaprint</a>. I work on the Gallery team, which is an agile development team that works on our platform to display products in a gallery (hence the name). Before I joined the gallery team, I spent most of my career doing ops things.</p>\n\n<p>When I started working in the industry I was really interested in working with scaled out infrastructure. Any large compute things I had an interest in, which lead me to be more or less an 'Ops' person. Over the course of this period I did quite a bit of networking, VMware, and LDAP administration. My first real gig was working for a school district. Staff, and students combined was 6000, and we quickly realized the only way for our team of 3 to be effective was to write code. This was my first real introduction into programming (yup, I was a late bloomer to programming).</p>\n\n<p>I always thought programming was something done by PhD types, and I never thought I'd be smart enough to do it. I didn't have the privilege of going to a great University. In fact I got my degree while working in the Industry, this left me with a lot of insecurities early on in my career. I am a creative person, and I always thought I'd be good as a full stack Web Developer. I tried to learn JavaScript in 2005, and decided that programming was too hard, not realizing that js, and the DOM API's were working against me.</p>\n\n<p>I think the first time programming really 'clicked' for me was when I needed to create a script to move around 1000 users from one OU to another in Active Directory. I quickly started Googling on the ol' Bing, and I managed to whip something together with the multitudes of knowledge out there.</p>\n\n<blockquote>\n  <p>This was the first time that I had a real taste of the power programming can unlock, and that power was intoxicating.</p>\n</blockquote>\n\n<p>Over the course of my ops career I started creating a lot of tooling to pursue the goal of faster, more flexible infrastructure. During this time I noticed that some of my colleagues really started acting different around me.</p>\n\n<blockquote>\n  <p>All of a sudden, I felt very alienated from the rest of the operations community, but I wasn't being embraced by most of the developers either.</p>\n</blockquote>\n\n<p>I think a lot of the culture issues quickly I faced subsided when we had <em>Insert large amount</em> of copies of the Phoenix Project floating around the office.</p>\n\n<p>While I working on a team with <a href=\"https://www.linkedin.com/profile/view?id=15269002\">Sarah Flint</a>, and <a href=\"https://www.linkedin.com/profile/view?id=75343021\">Matt Alioto</a> called Automation Task Force (that is the actual name). One of my good friends <a href=\"http://nickpirollo.net/\">Nicholas Pirollo</a> mentioned I should join the gallery team. This was further reinforced by <a href=\"https://www.linkedin.com/pub/drew-ditto/52/786/927\">Drew Ditto</a> the lead developer. As someone who spent their entire career in ops, and never thought about being a Software Engineer. I was immediately skeptical if I could even add value to their team. I took the risk, and plunged into what is basically a new career.</p>\n\n<p>The one amazing thing about Vistaprint...erm..Cimpress is the fluidity at which people can grow, and change their careers (and I'm not getting paid to write this either). I've grown a ton over the last 4 years already. Within a month of saying \"sure I'll come work for you guys\" I was on their team, and was already working on some major changes that I probably shouldn't hint about.</p>\n\n<p>My being on this team has certainly helped things move a little. A lot of ops people have come to me for dev-centric questions, and I have been increasingly helpful in providing them a perspective of what developers at Cimpress want. While also telling the people on my (new) team, how to structure requests to the ops teams, and how we can make our application(s) more accessible to our operations brethren. That being said I didn't write this to give you the typical 'DevOps' story, but unfortunately as I write this it is slowly turning out this way.</p>\n\n<p>I feel that I have matured a lot. I have really started to understand the problems developers around me face, when they have little domain knowledge on what would be more traditional IT things. I am not really good at understanding human relationships, but this move as certainly made me realize how two groups of very similar people can be different. The one thing that has really irked me lately is both of these groups of people have more things in common, than differences. Yet both groups seem hell bent to point out each others failings.</p>\n\n<p>I guess my whole point in this whole thing is to try to gain someone else's perspective. That is probably what mixed Developer/Ops teams try to gain. Lets be honest dev's and op's have more or less a symbiotic relationship. Even with every cloud technology at you command, you will still need ops people once you get to a certain scale, and ops people cannot administrate systems that don't do anything. Lets come together and get along, for the good of <strong>OUR</strong> industry.</p>\n\n<p><strong>tl;dr</strong> I was a sysadmin, now a dev. Why Can't we all get along?</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1443418443057,"created_by":1,"updated_at":1443419476744,"updated_by":1,"published_at":1443418727374,"published_by":1},{"id":57,"uuid":"b6f7c986-32fa-4863-a466-939b98c5b741","title":"c++,  when should I use the stack or heap?","slug":"c-strings","markdown":"So I have started learning c++ recently, and as a .NET/Java developer I always want to write the following code.\n\n`var s = new myClass()`. \n\nIn c++ you have to manage memory yourself, there is no garbage collector.\n\nIf you do not use the new keyword `var s = myClass()` you will create that class and assign it to s on the `stack`.\n\nAny stack variables will be cleaned at the end of the block, so in this case s will be cleaned. However if you use `var s = new myClass()` s will be allocated onto the **heap** and must be deleted, otherwise memory leaks will occur.\n\nTo clean the variable you must call `delete s` when you are done with the variable, this will cause the memory in the heap to be cleaned.\n\nNow this comes back to *what is a stack and heap* I wrote a [blog post](/value-types-vs-reference-types-in-c-and-why-it-matters/) about value and reference types in c# and this talk touches on a lot of the same subject. Basically a stack in c++ is a 1mb scratch pad of memory, that is really fast to access. The heap is a larger pool of memory for dynamic allocation, but can be slower to access.\n\nSo I was thinking to myself, well when should I allocate on the stack vs heap. The stack is limited in size, and if you go over that size you will cause a stack overflow. Also I want my c++ app to be fast, so I would like to allocate on the stack often, and I don't have to worry about cleaning up stack objects. That being said the heap is still quite fast so I shouldn't avoid the heap. \n\nConsider any or all of the following rules to put objects into the stack. **Note:** You don't need to meet all of them.\n\n#### Stack Allocate:\n* Immutable\n* Under 32 bytes (Ideally around 16 bytes)\n* It won't require being put into heap often\n* Short Lived\n* Embedded in other objects\n","html":"<p>So I have started learning c++ recently, and as a .NET/Java developer I always want to write the following code.</p>\n\n<p><code>var s = new myClass()</code>. </p>\n\n<p>In c++ you have to manage memory yourself, there is no garbage collector.</p>\n\n<p>If you do not use the new keyword <code>var s = myClass()</code> you will create that class and assign it to s on the <code>stack</code>.</p>\n\n<p>Any stack variables will be cleaned at the end of the block, so in this case s will be cleaned. However if you use <code>var s = new myClass()</code> s will be allocated onto the <strong>heap</strong> and must be deleted, otherwise memory leaks will occur.</p>\n\n<p>To clean the variable you must call <code>delete s</code> when you are done with the variable, this will cause the memory in the heap to be cleaned.</p>\n\n<p>Now this comes back to <em>what is a stack and heap</em> I wrote a <a href=\"/value-types-vs-reference-types-in-c-and-why-it-matters/\">blog post</a> about value and reference types in c# and this talk touches on a lot of the same subject. Basically a stack in c++ is a 1mb scratch pad of memory, that is really fast to access. The heap is a larger pool of memory for dynamic allocation, but can be slower to access.</p>\n\n<p>So I was thinking to myself, well when should I allocate on the stack vs heap. The stack is limited in size, and if you go over that size you will cause a stack overflow. Also I want my c++ app to be fast, so I would like to allocate on the stack often, and I don't have to worry about cleaning up stack objects. That being said the heap is still quite fast so I shouldn't avoid the heap. </p>\n\n<p>Consider any or all of the following rules to put objects into the stack. <strong>Note:</strong> You don't need to meet all of them.</p>\n\n<h4 id=\"stackallocate\">Stack Allocate:</h4>\n\n<ul>\n<li>Immutable</li>\n<li>Under 32 bytes (Ideally around 16 bytes)</li>\n<li>It won't require being put into heap often</li>\n<li>Short Lived</li>\n<li>Embedded in other objects</li>\n</ul>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1443974298136,"created_by":1,"updated_at":1445180424740,"updated_by":1,"published_at":1444341445786,"published_by":1},{"id":58,"uuid":"94d21089-354d-47a9-ac4d-2282f4506f5a","title":"Why I avoid switch statements in c++","slug":"why-i-avoid-cplusplus-switch-statements","markdown":"So one thing that kills me a lot in c++ is the switch statement. As you all know switch statements look like the following.\n\n```cpp\nauto s = 0;\n\nswitch(s)\n{\n   case 0:\n      doSomething();\n      break;\n   case 1: \n     doSomething1();\n     break;\n\n}\n\n```\n\nNow the first thing that bothers me about C++ switch statements is that, you can fall through a case. What I mean by that is that if `case 0` did not have a `break;` statement, you will go directly into the next case (and execute `doSomething1()`)\n\nThis often bites me in particular, becase I forget to add the `break;`\n\n### Switching on strings\n\nIn c++ strings are not supported as a type. Strings in c++ are actually char Arrays, which means that the switch statement cannot infer switching on strings like Java or C#.\n\nSo ultimately switching on strings cannot be done, and if/else if is what has to be used for strings.\n\nSo I can't use `switch` except for the other common types, and I can shoot myself in the foot with the behavior of the switch. So I avoid it completely.","html":"<p>So one thing that kills me a lot in c++ is the switch statement. As you all know switch statements look like the following.</p>\n\n<pre><code class=\"language-cpp\">auto s = 0;\n\nswitch(s)  \n{\n   case 0:\n      doSomething();\n      break;\n   case 1: \n     doSomething1();\n     break;\n\n}\n</code></pre>\n\n<p>Now the first thing that bothers me about C++ switch statements is that, you can fall through a case. What I mean by that is that if <code>case 0</code> did not have a <code>break;</code> statement, you will go directly into the next case (and execute <code>doSomething1()</code>)</p>\n\n<p>This often bites me in particular, becase I forget to add the <code>break;</code></p>\n\n<h3 id=\"switchingonstrings\">Switching on strings</h3>\n\n<p>In c++ strings are not supported as a type. Strings in c++ are actually char Arrays, which means that the switch statement cannot infer switching on strings like Java or C#.</p>\n\n<p>So ultimately switching on strings cannot be done, and if/else if is what has to be used for strings.</p>\n\n<p>So I can't use <code>switch</code> except for the other common types, and I can shoot myself in the foot with the behavior of the switch. So I avoid it completely.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1443975998072,"created_by":1,"updated_at":1444944879851,"updated_by":1,"published_at":1444944879851,"published_by":1},{"id":59,"uuid":"8ccc3cc4-bab5-45bf-ac1c-7aa4298de53c","title":"Moving from beta 7 to beta 8 in ASP.NET 5 (MVC 6)","slug":"moving-from-beta-7-to-beta-8-in-asp-net-5-mvc-6","markdown":"So Beta 8 was recently [announced](http://blogs.msdn.com/b/webdev/archive/2015/10/15/announcing-availability-of-asp-net-5-beta8.aspx), and I thought I'd update [DotNetMashups](http://dotnetmashup.azurewebsites.net) to beta 8.\n\nIn case you havn't been paying attention, recently it was announced that [helios](https://github.com/aspnet/Announcements/issues/69) was no longer a thing. Helios was the loader for ASP.NET 5 in IIS. Instead they are using the [http Platform Handler](https://azure.microsoft.com/en-us/blog/announcing-the-release-of-the-httpplatformhandler-module-for-iis-8/) to proxy the connections to [kestrel](https://github.com/aspnet/KestrelHttpServer).\n\nSo I thought that this was going to be a difficult update. I loaded the [announcements repo](https://github.com/aspnet/Announcements/milestones/1.0.0-beta8) in my browser and got to work. You can view the [Pull request here](https://github.com/tparnell8/DotNetMashup/pull/8/files).\n\nThe first thing I did was update my visual studio tools, do a `dnvm update`, then update my packages to use beta8. I then ran into was 2 build errors in my startup.cs It seemed that `app.UseErrorPage();` was renamed to `app.UseDeveloperExceptionPage();` which seems like a sensible rename. The second thing was that `app.UseErrorHandler(\"/Home/Error\");` became `app.UseExceptionHandler(\"/Home/Error\");` again 100% sensible.\n\nI deleted my hosting.ini, I changed my web command from using `\"web\": \"Microsoft.AspNet.Hosting --config hosting.ini\"` to `\"web\": \"Microsoft.AspNet.Server.Kestrel\"` and I set my web.config to look like the following. That was basically it. Overall really simple!\n\n```language-markup\n<configuration>\n  <system.webServer>\n    <handlers>\n      <add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\" modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" />\n    </handlers>\n    <httpPlatform processPath=\"%DNX_PATH%\" arguments=\"%DNX_ARGS%\" stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\" />\n  </system.webServer>\n</configuration>\n\n```\n","html":"<p>So Beta 8 was recently <a href=\"http://blogs.msdn.com/b/webdev/archive/2015/10/15/announcing-availability-of-asp-net-5-beta8.aspx\">announced</a>, and I thought I'd update <a href=\"http://dotnetmashup.azurewebsites.net\">DotNetMashups</a> to beta 8.</p>\n\n<p>In case you havn't been paying attention, recently it was announced that <a href=\"https://github.com/aspnet/Announcements/issues/69\">helios</a> was no longer a thing. Helios was the loader for ASP.NET 5 in IIS. Instead they are using the <a href=\"https://azure.microsoft.com/en-us/blog/announcing-the-release-of-the-httpplatformhandler-module-for-iis-8/\">http Platform Handler</a> to proxy the connections to <a href=\"https://github.com/aspnet/KestrelHttpServer\">kestrel</a>.</p>\n\n<p>So I thought that this was going to be a difficult update. I loaded the <a href=\"https://github.com/aspnet/Announcements/milestones/1.0.0-beta8\">announcements repo</a> in my browser and got to work. You can view the <a href=\"https://github.com/tparnell8/DotNetMashup/pull/8/files\">Pull request here</a>.</p>\n\n<p>The first thing I did was update my visual studio tools, do a <code>dnvm update</code>, then update my packages to use beta8. I then ran into was 2 build errors in my startup.cs It seemed that <code>app.UseErrorPage();</code> was renamed to <code>app.UseDeveloperExceptionPage();</code> which seems like a sensible rename. The second thing was that <code>app.UseErrorHandler(\"/Home/Error\");</code> became <code>app.UseExceptionHandler(\"/Home/Error\");</code> again 100% sensible.</p>\n\n<p>I deleted my hosting.ini, I changed my web command from using <code>\"web\": \"Microsoft.AspNet.Hosting --config hosting.ini\"</code> to <code>\"web\": \"Microsoft.AspNet.Server.Kestrel\"</code> and I set my web.config to look like the following. That was basically it. Overall really simple!</p>\n\n<pre><code class=\"language-markup\">&lt;configuration&gt;  \n  &lt;system.webServer&gt;\n    &lt;handlers&gt;\n      &lt;add name=\"httpPlatformHandler\" path=\"*\" verb=\"*\" modules=\"httpPlatformHandler\" resourceType=\"Unspecified\" /&gt;\n    &lt;/handlers&gt;\n    &lt;httpPlatform processPath=\"%DNX_PATH%\" arguments=\"%DNX_ARGS%\" stdoutLogEnabled=\"false\" startupTimeLimit=\"3600\" /&gt;\n  &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1445177819547,"created_by":1,"updated_at":1445649108015,"updated_by":1,"published_at":1445178404128,"published_by":1},{"id":60,"uuid":"9411c76c-8d32-4de6-bfd5-f04c29e406f3","title":"Wiring up client side logs into c#/node.js logging frameworks","slug":"wiring-up-client-side-logs-into-c-sharp-logging-frameworks","markdown":"Around a year ago I joined a new team where I work, and this team was starting to undertake a full rewrite of their code. We were going from a full c#/mvc app to a tiny c# api, and a very big SPA.\n\nEarly one one of the **huge** things to do was to make sure that our JavaScript error logs could land in our Log4Net infrastructure. I started to write something to do just that, and as I was coding I quickly realized this was less trivial that it sounded. We had something internal we could use, but it was tied to a lot of other code that we didn't want to pull in.\n\nI started Bingling around and I stumbled across [jsnlog](http://jsnlog.com/). JSN log lets you quickly wire up your client side logs to your server. I have been able to get PR's into the [code base](https://github.com/mperdeck/jsnlog) and the guy behind it has been very friendly to me when I have had questions.\n\nWhen you install the nuget package it drops this into your app_start.\n\n```csharp\n\nusing System;\nusing System.Web.Routing;\nusing System.Web.Mvc;\n\n[assembly: WebActivatorEx.PostApplicationStartMethod(\n    typeof(EmptyLog4Net.App_Start.JSNLogConfig), \"PostStart\")]\n\nnamespace EmptyLog4Net.App_Start {\n    public static class JSNLogConfig {\n        public static void PostStart() {\n            // Insert a route that ignores the jsnlog.logger route. That way, \n\t\t\t// requests for jsnlog.logger will get through to the handler defined\n            // in web.config.\n\t\t\t//\n\t\t\t// The route must take this particular form, including the constraint, \n\t\t\t// otherwise ActionLink will be confused by this route and generate the wrong URLs.\n\t\t\t\n            var jsnlogRoute = new Route(\"{*jsnloglogger}\", new StopRoutingHandler());\n            jsnlogRoute.Constraints = new RouteValueDictionary {{ \"jsnloglogger\", @\"jsnlog\\.logger(/.*)?\" }};\n            RouteTable.Routes.Insert(0, jsnlogRoute);\n        }\n    }\n}\n```\n\nThe whole thing is a html handler, so this code just simply makes sure the handler gets the first route.\n\nWhen you are going to render a page you have to inject this razor:\n\n`@Html.Raw(JSNLog.JavascriptLogging.Configure())` and the jsnlog javascript file.\n\nThen whenever you want to log anything client side you can do the following.\n\n```language-javascript\nJL(\"jsLogger\").fatal(\"client log message\");\n```\n\nYou can also set jsnlog as the global js error handler.\n\n```language-javascript\nwindow.onerror = function (errorMsg, url, lineNumber, column, errorObj) {\n    // Send object with all data to server side log, using severity fatal, \n    // from logger \"onerrorLogger\"\n    JL(\"onerrorLogger\").fatalException({\n        \"msg\": \"Exception!\", \n        \"errorMsg\": errorMsg, \"url\": url, \n        \"line number\": lineNumber, \"column\": column\n    }, errorObj);\n        \n    // Tell browser to run its own error handler as well   \n    return false;\n}\n\n```\n\nThe docs are quite good, and it seems to work fine as a commonjs module (since we browserify things). The tool is super configurable through the web.config, and you can change the url it logs to. \n\n\n```markup\n\n<configuration>\n    ...\n\n    <!-- Example of web.config based configuration -->\n    <jsnlog maxMessages=\"5\">\n        <logger name=\"mylogger\" level=\"INFO\" />\n\n        <ajaxAppender name=\"myappender\" batchSize=\"2\" />\n        <logger name=\"mylogger2\" appenders=\"myappender\"/>\n    </jsnlog>\n</configuration>\n\n```\n\n\nJSNLog is a great way to get your client side logs into your server infrastructure fast. The library has fantastic support for node, and every major [.NET logging framework](https://www.nuget.org/packages?q=jsnlog). Someone in the community even made a php plugin! The [examples](https://github.com/mperdeck/jsnlogSimpleWorkingDemos) are endless\n\nOverall I am really pleased with JSNLog, it filled a need that I needed, and it meant I was able to focus on what I did best, not figure out how logging worked.","html":"<p>Around a year ago I joined a new team where I work, and this team was starting to undertake a full rewrite of their code. We were going from a full c#/mvc app to a tiny c# api, and a very big SPA.</p>\n\n<p>Early one one of the <strong>huge</strong> things to do was to make sure that our JavaScript error logs could land in our Log4Net infrastructure. I started to write something to do just that, and as I was coding I quickly realized this was less trivial that it sounded. We had something internal we could use, but it was tied to a lot of other code that we didn't want to pull in.</p>\n\n<p>I started Bingling around and I stumbled across <a href=\"http://jsnlog.com/\">jsnlog</a>. JSN log lets you quickly wire up your client side logs to your server. I have been able to get PR's into the <a href=\"https://github.com/mperdeck/jsnlog\">code base</a> and the guy behind it has been very friendly to me when I have had questions.</p>\n\n<p>When you install the nuget package it drops this into your app_start.</p>\n\n<pre><code class=\"language-csharp\">using System;  \nusing System.Web.Routing;  \nusing System.Web.Mvc;\n\n[assembly: WebActivatorEx.PostApplicationStartMethod(\n    typeof(EmptyLog4Net.App_Start.JSNLogConfig), \"PostStart\")]\n\nnamespace EmptyLog4Net.App_Start {  \n    public static class JSNLogConfig {\n        public static void PostStart() {\n            // Insert a route that ignores the jsnlog.logger route. That way, \n            // requests for jsnlog.logger will get through to the handler defined\n            // in web.config.\n            //\n            // The route must take this particular form, including the constraint, \n            // otherwise ActionLink will be confused by this route and generate the wrong URLs.\n\n            var jsnlogRoute = new Route(\"{*jsnloglogger}\", new StopRoutingHandler());\n            jsnlogRoute.Constraints = new RouteValueDictionary {{ \"jsnloglogger\", @\"jsnlog\\.logger(/.*)?\" }};\n            RouteTable.Routes.Insert(0, jsnlogRoute);\n        }\n    }\n}\n</code></pre>\n\n<p>The whole thing is a html handler, so this code just simply makes sure the handler gets the first route.</p>\n\n<p>When you are going to render a page you have to inject this razor:</p>\n\n<p><code>@Html.Raw(JSNLog.JavascriptLogging.Configure())</code> and the jsnlog javascript file.</p>\n\n<p>Then whenever you want to log anything client side you can do the following.</p>\n\n<pre><code class=\"language-javascript\">JL(\"jsLogger\").fatal(\"client log message\");  \n</code></pre>\n\n<p>You can also set jsnlog as the global js error handler.</p>\n\n<pre><code class=\"language-javascript\">window.onerror = function (errorMsg, url, lineNumber, column, errorObj) {  \n    // Send object with all data to server side log, using severity fatal, \n    // from logger \"onerrorLogger\"\n    JL(\"onerrorLogger\").fatalException({\n        \"msg\": \"Exception!\", \n        \"errorMsg\": errorMsg, \"url\": url, \n        \"line number\": lineNumber, \"column\": column\n    }, errorObj);\n\n    // Tell browser to run its own error handler as well   \n    return false;\n}\n</code></pre>\n\n<p>The docs are quite good, and it seems to work fine as a commonjs module (since we browserify things). The tool is super configurable through the web.config, and you can change the url it logs to. </p>\n\n<pre><code class=\"language-markup\">&lt;configuration&gt;  \n    ...\n\n    &lt;!-- Example of web.config based configuration --&gt;\n    &lt;jsnlog maxMessages=\"5\"&gt;\n        &lt;logger name=\"mylogger\" level=\"INFO\" /&gt;\n\n        &lt;ajaxAppender name=\"myappender\" batchSize=\"2\" /&gt;\n        &lt;logger name=\"mylogger2\" appenders=\"myappender\"/&gt;\n    &lt;/jsnlog&gt;\n&lt;/configuration&gt;\n</code></pre>\n\n<p>JSNLog is a great way to get your client side logs into your server infrastructure fast. The library has fantastic support for node, and every major <a href=\"https://www.nuget.org/packages?q=jsnlog\">.NET logging framework</a>. Someone in the community even made a php plugin! The <a href=\"https://github.com/mperdeck/jsnlogSimpleWorkingDemos\">examples</a> are endless</p>\n\n<p>Overall I am really pleased with JSNLog, it filled a need that I needed, and it meant I was able to focus on what I did best, not figure out how logging worked.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1446384127797,"created_by":1,"updated_at":1446385984167,"updated_by":1,"published_at":1446385223556,"published_by":1},{"id":61,"uuid":"bf06a6af-b816-40cb-a0b9-639f7f01a086","title":"Securing AWS Elasticsearch Service with .NET NEST API (and why I love open source)","slug":"securing-aws-elasticsearch-service-and-nest-api","markdown":"Around 6 months ago I started a project, and part of that project was to move us away from an old search tool to use elasticsearch.\n\nFor those of you whom are unfamiliar [elasticsearch](https://www.elastic.co/) is a web service over [Lucene](https://lucene.apache.org/core/) which provides a document database that can perform complex transforms on text specifically designed for search. Elasticsearch does things like stop word removal and [stemming](https://www.elastic.co/guide/en/elasticsearch/guide/current/controlling-stemming.html) to provide a fantasic way to perform searches.\n\nI was browsing my twitter feed one day and I saw this thread.\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/jdcooke0117\">@jdcooke0117</a> Like off the bottom of the charts? Because you couldn&#39;t even run ES before but now you can?</p>&mdash; Norm MacLennan (@nromdotcom) <a href=\"https://twitter.com/nromdotcom/status/649723904563396608\">October 1, 2015</a></blockquote>\n\n\nI got curious as ES usually stands for Elasticsearch, and I quickly found out that AWS [announced](https://aws.amazon.com/blogs/aws/new-amazon-elasticsearch-service/) Elasticsearch as service. \n\nThis was pretty huge for me since a few months before I struggled to string together some code that someone else at my company wrote to get elasticsearch working in AWS, and to be honest it was not fun. Managing elasticsearch in AWS is far from great.\n\n\nWe started out with a basic 'domain' (which is AWS' term for an elasticsearch cluster) and we got up and running pretty fast. The 'domains' seemed to have almost all the API's we needed, and it worked with the [NEST client](http://nest.azurewebsites.net/).\n\nWhen we were just trying it out we didn't bother securing it, but when we needed to secure the instance, we realized things were not so fun. AWS lets you block access by ip which doesn't help because EC2 instances have different ip addresses as the time, or you can use IAM roles, except you can't just target existing machines you have to sign the requests. \n\nEventually we bit the bullet and decided to sign our requests to the cluster. Unfortunatly the SDK doesn't provide a utility to sign any ol' http requests. I started digging through the AWS docs to figure out how to sign requests, and I was getting worried, as the docs do not make it seem easy to pull off. As an act of desperation I dived into nuget and just typed aws elasticsearch, which I then stumbled across a [project that was published only days before](https://github.com/bcuff/elasticsearch-net-aws).\n\nThis project totally saved my bacon. Brandon's library plugged right into the .NET sdk, and auth'd our requests to aws without us having to figure out all that crypo. Within moments of finding it I filed an [issue](https://github.com/bcuff/elasticsearch-net-aws/issues/1) thanking Brandon as it really helped me out. \n\nThe Elasticsearch service offering by Amazon is pretty awesome. Like any platform its less flexible then hosting the instances yourself. You have to live with the plugins they ship, but on the plus side you get a full cluster, with monitoring, and a knob to turn up instances, or storage space without having to worry about the details.\n\n<script src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","html":"<p>Around 6 months ago I started a project, and part of that project was to move us away from an old search tool to use elasticsearch.</p>\n\n<p>For those of you whom are unfamiliar <a href=\"https://www.elastic.co/\">elasticsearch</a> is a web service over <a href=\"https://lucene.apache.org/core/\">Lucene</a> which provides a document database that can perform complex transforms on text specifically designed for search. Elasticsearch does things like stop word removal and <a href=\"https://www.elastic.co/guide/en/elasticsearch/guide/current/controlling-stemming.html\">stemming</a> to provide a fantasic way to perform searches.</p>\n\n<p>I was browsing my twitter feed one day and I saw this thread.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/jdcooke0117\">@jdcooke0117</a> Like off the bottom of the charts? Because you couldn&#39;t even run ES before but now you can?</p>&mdash; Norm MacLennan (@nromdotcom) <a href=\"https://twitter.com/nromdotcom/status/649723904563396608\">October 1, 2015</a></blockquote>\n\n<p>I got curious as ES usually stands for Elasticsearch, and I quickly found out that AWS <a href=\"https://aws.amazon.com/blogs/aws/new-amazon-elasticsearch-service/\">announced</a> Elasticsearch as service. </p>\n\n<p>This was pretty huge for me since a few months before I struggled to string together some code that someone else at my company wrote to get elasticsearch working in AWS, and to be honest it was not fun. Managing elasticsearch in AWS is far from great.</p>\n\n<p>We started out with a basic 'domain' (which is AWS' term for an elasticsearch cluster) and we got up and running pretty fast. The 'domains' seemed to have almost all the API's we needed, and it worked with the <a href=\"http://nest.azurewebsites.net/\">NEST client</a>.</p>\n\n<p>When we were just trying it out we didn't bother securing it, but when we needed to secure the instance, we realized things were not so fun. AWS lets you block access by ip which doesn't help because EC2 instances have different ip addresses as the time, or you can use IAM roles, except you can't just target existing machines you have to sign the requests. </p>\n\n<p>Eventually we bit the bullet and decided to sign our requests to the cluster. Unfortunatly the SDK doesn't provide a utility to sign any ol' http requests. I started digging through the AWS docs to figure out how to sign requests, and I was getting worried, as the docs do not make it seem easy to pull off. As an act of desperation I dived into nuget and just typed aws elasticsearch, which I then stumbled across a <a href=\"https://github.com/bcuff/elasticsearch-net-aws\">project that was published only days before</a>.</p>\n\n<p>This project totally saved my bacon. Brandon's library plugged right into the .NET sdk, and auth'd our requests to aws without us having to figure out all that crypo. Within moments of finding it I filed an <a href=\"https://github.com/bcuff/elasticsearch-net-aws/issues/1\">issue</a> thanking Brandon as it really helped me out. </p>\n\n<p>The Elasticsearch service offering by Amazon is pretty awesome. Like any platform its less flexible then hosting the instances yourself. You have to live with the plugins they ship, but on the plus side you get a full cluster, with monitoring, and a knob to turn up instances, or storage space without having to worry about the details.</p>\n\n<script src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1446860478430,"created_by":1,"updated_at":1446912250278,"updated_by":1,"published_at":1446861931903,"published_by":1},{"id":62,"uuid":"6fa2e966-bf63-445d-9219-7b27a6a03de5","title":"How the ASP.NET team made the web framework I have always wanted","slug":"how-the-asp-net-team-dived-into-my-head-and-made-the-webframework-i-have-always-wanted","markdown":"So I know I do a lot of blogging about C#, or JavaScript, but I actually do a lot of nodejs apps as well as other languages. For a very long time I have not found the stack of my dreams. .NET has always been very close but there were multiple things about the app model that I was not a fan of. I think NancyFX has been the closest framework to my dreams in .NET land.\n\n\n## .NET 4x and my gripes\n\n.NET 4x is the current generation of the application model. Made over 15 years ago, it makes a lot of assumptions about development that are not true today. No builtin dependency injection, and the ASP.NET pipeline being baked into IIS, it is less than fun to work with.\n\n#### JS frameworks\n\n\nSo the first huge gripe for me in asp 4.x land is when I go file->New I get a project that has bootstrap from nuget. The first time I saw this I was fine with it, however as bower got more mature I really started to hate it. You can't delete the js file and restore it at build time so you have to add toxicity to your git repo by holding onto the file. \n\n\n#### CS proj (and javascript)\n\nI really enjoy using Atom, or Webstorm for Javscript. Visual studio is not in my mind when working on JavaScript applications. However when I work on SPA's for ol' .NET the files would have to have a csproj reference if I wanted to make a web deploy package that contained the file. The only other [route I found](https://blog.tommyparnell.com/using-bower-and-grunt-with-a-net-app/) was to make some special MSBUILD tasks that included adding a whole folder as content at build time. This was fine until I'd work with someone whom really liked using VS for programming and none of my files were in the csproj. \n\n#### Webapi vs MVC\n\nI'm not going to go into too much detail on this, but if you have worked in .net at all you know the pains of webapi and MVC.  Webapi was a separate framework that looked really similar as MVC to host rest APIs. They had similar functionality with action filters, but when you would try to use a webapi actionfilter for MVC you wouldn't be able to without your class inheriting from both interfaces and thus requiring additional work. They had very similar models but ultimately different implementations and namespaces making working with them both a pain.\n\n#### Windows\n\nI am a long time Linux guy. I love having tail, grep, awk, sed, and the various other tools that come by default in the bourne shell. I often enjoy using zsh. I really wanted to love .NET, because I really do enjoy writing C#, but not supporting linux was a huge bummer for a long time. My [coworker ](normmaclennan.com) and I had a site about mono and how to [get started](https://github.com/maclennann/usemono-net/wiki/Getting-Started-with-Mono). We were self hosting Nancy in Nginx and it was awesome, but we couldn't use anything that didn't have great support at work. When containers started to get big, all my colleagues writing Java were showing me their ECS clusters while I was (and still am) over here hoping that IIS would install under 2 minutes in EC2. I have many problems with windows, beyond those gripes, but I won't go into them here. To say the least I will be keeping ubuntu on my machine from now on.\n\n\n## The future and .NET 5x\n\n.NET 5 is a huge reboot over the existing application model. Self hosting on a web server called [Kestrel](https://github.com/aspnet/KestrelHttpServer) This application model has **many** distinctions which I always wanted. \n\n#### Choices\n\nThe whole thing is built on one simple philosophy, and this philosophy I LOVE. This is that if you want something you can include it, if you don't want something you can exclude it. For example if you really want static files then include the static files package, if you don't then don't include it. This approach allows people to really juice the performance of their application, and was the basis for NodeJS development. Also with MacOS and Linux support, your choice has now extended past Windows.\n\n#### Dependency Injection \n\nThe Application Model has a built in dependency injector that works very well. If you need something get it from the DI container. If you controllers need things just have a constructor that requires those types, the DI container will take care of it for you. No more downloading Autofac and messing around trying to set that kind of thing up.\n\n#### Modern Javascript support\n\nAll of your client side javascript (bower packages, etc) can go into a folder called wwwroot. This folder takes on the root path at runtime, and everything is always included which means using bower to get deps is 100% possible. You need minification? Use what the JS community has. \n\n#### No more csproj\n\nSo its 5pm on a friday. I have just added a file to my project, git committed, and the build failed. I go and realize that I forgot to save my csproj file and thus the build is missing a file. This happens to me more than I dare to admit. In the future everything works off the local disk, no more csproj xml, thus no more failed builds for ceremonious xml files.\n\n\nOverall the future looks really bright for .NET I really hope they can escape the mentality of .NET == windows and hopefully get some more traditional Linux people on the stack.","html":"<p>So I know I do a lot of blogging about C#, or JavaScript, but I actually do a lot of nodejs apps as well as other languages. For a very long time I have not found the stack of my dreams. .NET has always been very close but there were multiple things about the app model that I was not a fan of. I think NancyFX has been the closest framework to my dreams in .NET land.</p>\n\n<h2 id=\"net4xandmygripes\">.NET 4x and my gripes</h2>\n\n<p>.NET 4x is the current generation of the application model. Made over 15 years ago, it makes a lot of assumptions about development that are not true today. No builtin dependency injection, and the ASP.NET pipeline being baked into IIS, it is less than fun to work with.</p>\n\n<h4 id=\"jsframeworks\">JS frameworks</h4>\n\n<p>So the first huge gripe for me in asp 4.x land is when I go file->New I get a project that has bootstrap from nuget. The first time I saw this I was fine with it, however as bower got more mature I really started to hate it. You can't delete the js file and restore it at build time so you have to add toxicity to your git repo by holding onto the file. </p>\n\n<h4 id=\"csprojandjavascript\">CS proj (and javascript)</h4>\n\n<p>I really enjoy using Atom, or Webstorm for Javscript. Visual studio is not in my mind when working on JavaScript applications. However when I work on SPA's for ol' .NET the files would have to have a csproj reference if I wanted to make a web deploy package that contained the file. The only other <a href=\"https://blog.tommyparnell.com/using-bower-and-grunt-with-a-net-app/\">route I found</a> was to make some special MSBUILD tasks that included adding a whole folder as content at build time. This was fine until I'd work with someone whom really liked using VS for programming and none of my files were in the csproj. </p>\n\n<h4 id=\"webapivsmvc\">Webapi vs MVC</h4>\n\n<p>I'm not going to go into too much detail on this, but if you have worked in .net at all you know the pains of webapi and MVC.  Webapi was a separate framework that looked really similar as MVC to host rest APIs. They had similar functionality with action filters, but when you would try to use a webapi actionfilter for MVC you wouldn't be able to without your class inheriting from both interfaces and thus requiring additional work. They had very similar models but ultimately different implementations and namespaces making working with them both a pain.</p>\n\n<h4 id=\"windows\">Windows</h4>\n\n<p>I am a long time Linux guy. I love having tail, grep, awk, sed, and the various other tools that come by default in the bourne shell. I often enjoy using zsh. I really wanted to love .NET, because I really do enjoy writing C#, but not supporting linux was a huge bummer for a long time. My <a href=\"normmaclennan.com\">coworker </a> and I had a site about mono and how to <a href=\"https://github.com/maclennann/usemono-net/wiki/Getting-Started-with-Mono\">get started</a>. We were self hosting Nancy in Nginx and it was awesome, but we couldn't use anything that didn't have great support at work. When containers started to get big, all my colleagues writing Java were showing me their ECS clusters while I was (and still am) over here hoping that IIS would install under 2 minutes in EC2. I have many problems with windows, beyond those gripes, but I won't go into them here. To say the least I will be keeping ubuntu on my machine from now on.</p>\n\n<h2 id=\"thefutureandnet5x\">The future and .NET 5x</h2>\n\n<p>.NET 5 is a huge reboot over the existing application model. Self hosting on a web server called <a href=\"https://github.com/aspnet/KestrelHttpServer\">Kestrel</a> This application model has <strong>many</strong> distinctions which I always wanted. </p>\n\n<h4 id=\"choices\">Choices</h4>\n\n<p>The whole thing is built on one simple philosophy, and this philosophy I LOVE. This is that if you want something you can include it, if you don't want something you can exclude it. For example if you really want static files then include the static files package, if you don't then don't include it. This approach allows people to really juice the performance of their application, and was the basis for NodeJS development. Also with MacOS and Linux support, your choice has now extended past Windows.</p>\n\n<h4 id=\"dependencyinjection\">Dependency Injection</h4>\n\n<p>The Application Model has a built in dependency injector that works very well. If you need something get it from the DI container. If you controllers need things just have a constructor that requires those types, the DI container will take care of it for you. No more downloading Autofac and messing around trying to set that kind of thing up.</p>\n\n<h4 id=\"modernjavascriptsupport\">Modern Javascript support</h4>\n\n<p>All of your client side javascript (bower packages, etc) can go into a folder called wwwroot. This folder takes on the root path at runtime, and everything is always included which means using bower to get deps is 100% possible. You need minification? Use what the JS community has. </p>\n\n<h4 id=\"nomorecsproj\">No more csproj</h4>\n\n<p>So its 5pm on a friday. I have just added a file to my project, git committed, and the build failed. I go and realize that I forgot to save my csproj file and thus the build is missing a file. This happens to me more than I dare to admit. In the future everything works off the local disk, no more csproj xml, thus no more failed builds for ceremonious xml files.</p>\n\n<p>Overall the future looks really bright for .NET I really hope they can escape the mentality of .NET == windows and hopefully get some more traditional Linux people on the stack.</p>","image":null,"featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":1447504962476,"created_by":1,"updated_at":1447551028990,"updated_by":1,"published_at":1447506923175,"published_by":1}],"users":[{"id":1,"uuid":"d1188764-01d3-4c0a-929c-86081bb9f5e6","name":"Tommy Parnell","slug":"tommy-parnell","password":"$2a$10$x2xwp8w8xNRzc9kdw9WI.eNhPWtTI75tsaqgWMr1PV6cnjTaDD7d.","email":"parnell.tommy@hotmail.com","image":"/content/images/2015/09/486170_10200106207521542_360163524_n__2__2-1.jpg","cover":null,"bio":"I have been a Sysadmin, and a software engineer. I am passionate about Monitoring, DevOps, and Cloud Technologies.\n\nI love  JavaScript. Where I work there is a lot of .net so I blog about that often.","website":"http://blog.tommyparnell.com","location":"Manchester NH","accessibility":null,"status":"active","language":"en_US","meta_title":null,"meta_description":null,"last_login":1446860459468,"created_at":1392587750126,"created_by":1,"updated_at":1446860459468,"updated_by":1,"tour":null}],"roles":[{"id":1,"uuid":"b2cecaf1-7bd1-4977-bf2a-cbc7b593e465","name":"Administrator","description":"Administrators","created_at":1392587733984,"created_by":1,"updated_at":1392587733984,"updated_by":1},{"id":2,"uuid":"7c6ec23b-fa3c-4b44-9ccb-998a07bee33b","name":"Editor","description":"Editors","created_at":1392587733989,"created_by":1,"updated_at":1392587733989,"updated_by":1},{"id":3,"uuid":"c70d4f08-ea1a-4bc5-86b5-a715ba40a4d9","name":"Author","description":"Authors","created_at":1392587733995,"created_by":1,"updated_at":1392587733995,"updated_by":1},{"id":4,"uuid":"39f6b0c3-eb41-414f-91a9-56a36be2114a","name":"Owner","description":"Blog Owner","created_at":1411473476086,"created_by":1,"updated_at":1411473476086,"updated_by":1}],"roles_users":[{"id":1,"role_id":4,"user_id":1}],"permissions":[{"id":4,"uuid":"b594d9df-4874-47ec-8a6a-de53f94c9287","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":1411473476090,"created_by":1,"updated_at":1411473476090,"updated_by":1},{"id":5,"uuid":"9d99c3ec-a8f7-496a-9f78-4e3ac2b53fa3","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":1411473476106,"created_by":1,"updated_at":1411473476106,"updated_by":1},{"id":6,"uuid":"172b6a5a-dba7-413d-906e-f9305d1da3d2","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":1411473476118,"created_by":1,"updated_at":1411473476118,"updated_by":1},{"id":7,"uuid":"858d5aee-a899-4680-98e1-68dd1318d07d","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":1411473476127,"created_by":1,"updated_at":1411473476127,"updated_by":1},{"id":8,"uuid":"3eb0c86a-233a-48ec-9e2b-b2f9a55e563e","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":1411473476130,"created_by":1,"updated_at":1411473476130,"updated_by":1},{"id":9,"uuid":"fedfe02c-f6b5-4941-aea8-206b11fecaa8","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":1411473476134,"created_by":1,"updated_at":1411473476134,"updated_by":1},{"id":10,"uuid":"e740744e-1db1-4e0d-b518-6ad264b1ff59","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":1411473476138,"created_by":1,"updated_at":1411473476138,"updated_by":1},{"id":11,"uuid":"e4ef4366-0c58-4b28-a044-335750a54dd0","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":1411473476144,"created_by":1,"updated_at":1411473476144,"updated_by":1},{"id":12,"uuid":"5f64810c-3d71-4581-b337-0d51019f6157","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":1411473476147,"created_by":1,"updated_at":1411473476147,"updated_by":1},{"id":13,"uuid":"1e516e59-759c-4c24-9e4f-1c82ff5ab75c","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":1411473476151,"created_by":1,"updated_at":1411473476151,"updated_by":1},{"id":14,"uuid":"8fa9248b-97e0-4f73-a358-7b4b8c21d148","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":1411473476153,"created_by":1,"updated_at":1411473476153,"updated_by":1},{"id":15,"uuid":"16a4be23-4973-4d73-8d37-1997b9fcd1d3","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":1411473476161,"created_by":1,"updated_at":1411473476161,"updated_by":1},{"id":16,"uuid":"18be0a41-6405-4f3d-b084-42934e7cc608","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":1411473476165,"created_by":1,"updated_at":1411473476165,"updated_by":1},{"id":17,"uuid":"a3515518-329f-4f50-8579-28e7b9d30631","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":1411473476169,"created_by":1,"updated_at":1411473476169,"updated_by":1},{"id":18,"uuid":"6b929d00-ef6b-4855-9ba2-2b039694f47c","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":1411473476172,"created_by":1,"updated_at":1411473476172,"updated_by":1},{"id":19,"uuid":"275fd3f7-df18-4418-97d0-f505e9dc8dfe","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":1411473476176,"created_by":1,"updated_at":1411473476176,"updated_by":1},{"id":20,"uuid":"d8015490-46dc-43b9-bf44-9dd1c6874c26","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":1411473476179,"created_by":1,"updated_at":1411473476179,"updated_by":1},{"id":21,"uuid":"ba185d31-24cf-4e5c-9fef-2107b0be2bf2","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":1411473476182,"created_by":1,"updated_at":1411473476182,"updated_by":1},{"id":22,"uuid":"2463c34f-e93e-4830-a9b9-97ab5ad791bc","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":1411473476185,"created_by":1,"updated_at":1411473476185,"updated_by":1},{"id":23,"uuid":"35c65c32-c2ba-4460-aa38-4c482a3cd5f8","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":1411473476187,"created_by":1,"updated_at":1411473476187,"updated_by":1},{"id":24,"uuid":"1183a5e2-4b40-4750-8a0f-b4fcfb9d4742","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":1411473476191,"created_by":1,"updated_at":1411473476191,"updated_by":1},{"id":25,"uuid":"981c9950-db2a-4169-99c2-e41d7a3a0924","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":1411473476193,"created_by":1,"updated_at":1411473476193,"updated_by":1},{"id":26,"uuid":"aa5bdf13-7f34-443e-a21b-2794f48bcc04","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":1411473476196,"created_by":1,"updated_at":1411473476196,"updated_by":1},{"id":27,"uuid":"3c5d581d-d4ce-4129-95c2-1cd2e7b83753","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":1411473476201,"created_by":1,"updated_at":1411473476201,"updated_by":1},{"id":28,"uuid":"bcfa4d1c-8835-4fdc-aa70-b8b508735083","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":1411473476204,"created_by":1,"updated_at":1411473476204,"updated_by":1},{"id":29,"uuid":"88e1cf7f-7f56-4360-8c3b-646e5deb6385","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":1411473476206,"created_by":1,"updated_at":1411473476206,"updated_by":1},{"id":30,"uuid":"af5322ef-1f1a-4943-b9ed-cf9362ea8a30","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":1411473476208,"created_by":1,"updated_at":1411473476208,"updated_by":1},{"id":31,"uuid":"e0cf6afd-a959-4580-a867-95c2f67e0246","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":1411473476212,"created_by":1,"updated_at":1411473476212,"updated_by":1},{"id":32,"uuid":"27b1e100-6abf-44b4-bc5d-58d4eb2b2250","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":1411473476215,"created_by":1,"updated_at":1411473476215,"updated_by":1},{"id":33,"uuid":"4503ec93-bf3d-4b84-a961-e7535c7bf9dc","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":1411473476218,"created_by":1,"updated_at":1411473476218,"updated_by":1}],"permissions_users":[],"permissions_roles":[{"id":4,"role_id":1,"permission_id":4},{"id":5,"role_id":1,"permission_id":5},{"id":6,"role_id":1,"permission_id":6},{"id":7,"role_id":1,"permission_id":7},{"id":8,"role_id":1,"permission_id":8},{"id":9,"role_id":1,"permission_id":9},{"id":10,"role_id":1,"permission_id":10},{"id":11,"role_id":1,"permission_id":11},{"id":12,"role_id":1,"permission_id":12},{"id":13,"role_id":1,"permission_id":13},{"id":14,"role_id":1,"permission_id":14},{"id":15,"role_id":1,"permission_id":15},{"id":16,"role_id":1,"permission_id":16},{"id":17,"role_id":1,"permission_id":17},{"id":18,"role_id":1,"permission_id":18},{"id":19,"role_id":1,"permission_id":19},{"id":20,"role_id":1,"permission_id":20},{"id":21,"role_id":1,"permission_id":21},{"id":22,"role_id":1,"permission_id":22},{"id":23,"role_id":1,"permission_id":23},{"id":24,"role_id":1,"permission_id":24},{"id":25,"role_id":1,"permission_id":25},{"id":26,"role_id":1,"permission_id":26},{"id":27,"role_id":1,"permission_id":27},{"id":28,"role_id":1,"permission_id":28},{"id":29,"role_id":1,"permission_id":29},{"id":30,"role_id":1,"permission_id":30},{"id":31,"role_id":1,"permission_id":31},{"id":32,"role_id":1,"permission_id":32},{"id":33,"role_id":1,"permission_id":33},{"id":34,"role_id":2,"permission_id":11},{"id":35,"role_id":2,"permission_id":12},{"id":36,"role_id":2,"permission_id":13},{"id":37,"role_id":2,"permission_id":14},{"id":38,"role_id":2,"permission_id":15},{"id":39,"role_id":2,"permission_id":16},{"id":40,"role_id":2,"permission_id":17},{"id":41,"role_id":2,"permission_id":19},{"id":42,"role_id":2,"permission_id":20},{"id":43,"role_id":2,"permission_id":21},{"id":44,"role_id":2,"permission_id":22},{"id":45,"role_id":2,"permission_id":23},{"id":46,"role_id":2,"permission_id":24},{"id":47,"role_id":2,"permission_id":27},{"id":48,"role_id":2,"permission_id":28},{"id":49,"role_id":2,"permission_id":29},{"id":50,"role_id":2,"permission_id":30},{"id":51,"role_id":2,"permission_id":31},{"id":52,"role_id":2,"permission_id":32},{"id":53,"role_id":2,"permission_id":33},{"id":54,"role_id":3,"permission_id":11},{"id":55,"role_id":3,"permission_id":12},{"id":56,"role_id":3,"permission_id":14},{"id":57,"role_id":3,"permission_id":16},{"id":58,"role_id":3,"permission_id":17},{"id":59,"role_id":3,"permission_id":19},{"id":60,"role_id":3,"permission_id":20},{"id":61,"role_id":3,"permission_id":21},{"id":62,"role_id":3,"permission_id":23},{"id":63,"role_id":3,"permission_id":27},{"id":64,"role_id":3,"permission_id":28},{"id":65,"role_id":3,"permission_id":33}],"settings":[{"id":1,"uuid":"8d0868a2-cc30-4916-8a5b-e9e1ba49f7e2","key":"databaseVersion","value":"004","type":"core","created_at":1392587734029,"created_by":1,"updated_at":1392587734029,"updated_by":1},{"id":2,"uuid":"9d63e00a-ade6-4e22-8636-a28dd43ad402","key":"dbHash","value":"4a635130-0983-4cff-9eae-ea6376030fdf","type":"core","created_at":1392587734030,"created_by":1,"updated_at":1392587734148,"updated_by":1},{"id":3,"uuid":"a1757f41-f0c7-4a71-a4e4-479eb31d8189","key":"nextUpdateCheck","value":"1448126863","type":"core","created_at":1392587734030,"created_by":1,"updated_at":1448040464106,"updated_by":1},{"id":4,"uuid":"8a163f6d-fb1e-446b-988f-09aa56ee03b7","key":"displayUpdateNotification","value":"0.5.0","type":"core","created_at":1392587734031,"created_by":1,"updated_at":1448040464106,"updated_by":1},{"id":5,"uuid":"45fbc3d5-f676-4b0a-ac28-081ca386eb09","key":"title","value":"Tommyparnell.com","type":"blog","created_at":1392587734031,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":6,"uuid":"0709e567-16fe-423e-872e-861e63af35f9","key":"description","value":"My name is Tommy Parnell.\nThis is mostly documentation for myself, but I also write about the troubles I run into (both cultural, and technological) in the software industry.","type":"blog","created_at":1392587734031,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":7,"uuid":"5b2bf391-cdc2-4b60-bebc-e4ffc0993baa","key":"email","value":"parnell.tommy@hotmail.com","type":"blog","created_at":1392587734032,"created_by":1,"updated_at":1440902710883,"updated_by":1},{"id":8,"uuid":"10f44cb2-ac09-4a79-95ef-fb87ef724223","key":"logo","value":"/content/images/2015/09/3459800.jpg","type":"blog","created_at":1392587734033,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":9,"uuid":"8994f30b-7d36-454e-8228-33c7d0541d69","key":"cover","value":"/content/images/2014/Feb/origin_134672066-2.jpg","type":"blog","created_at":1392587734035,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":10,"uuid":"9fbee005-8c08-4960-878e-62e75a61fe13","key":"defaultLang","value":"en_US","type":"blog","created_at":1392587734035,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":11,"uuid":"66bb083d-b177-45d6-8bda-438dbeec734b","key":"postsPerPage","value":"6","type":"blog","created_at":1392587734036,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":12,"uuid":"2f3f9f2d-f43a-4b09-876c-fecc9d4a4dfb","key":"forceI18n","value":"true","type":"blog","created_at":1392587734037,"created_by":1,"updated_at":1445185553157,"updated_by":1},{"id":13,"uuid":"e3dc213a-7be9-4fff-9056-3a1d98586659","key":"permalinks","value":"/:slug/","type":"blog","created_at":1392587734037,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":14,"uuid":"4c833dda-3d83-45cd-8dfe-3f199165c170","key":"activeTheme","value":"ghostium","type":"theme","created_at":1392587734038,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":15,"uuid":"49b7cf19-2b89-43b2-93e4-aa8b086ef492","key":"activePlugins","value":"[]","type":"plugin","created_at":1392587734038,"created_by":1,"updated_at":1392587734038,"updated_by":1},{"id":16,"uuid":"5ac1ebb0-e926-403d-bfae-76dc24b96d39","key":"installedPlugins","value":"[]","type":"plugin","created_at":1392587734038,"created_by":1,"updated_at":1396407214468,"updated_by":1},{"id":17,"uuid":"555b75e8-920f-444a-9265-3ebdedfe52e6","key":"activeApps","value":"[]","type":"app","created_at":1396408482344,"created_by":1,"updated_at":1396408482344,"updated_by":1},{"id":18,"uuid":"12fc11f6-f24f-4a73-a934-5bb75b7570f4","key":"installedApps","value":"[]","type":"app","created_at":1396408482347,"created_by":1,"updated_at":1448027981202,"updated_by":1},{"id":19,"uuid":"0649ebe1-cb41-4bb7-8ef9-9df68f68b004","key":"ghost_head","value":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.css\" />\n<meta name=\"google-site-verification\" content=\"WImkLWJQ4iySMWrLC49UNAZz2pKRiPQKwpaXXQBt_h4\" />","type":"blog","created_at":1423424605734,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":20,"uuid":"6ddf5105-cb52-4822-bd36-ab069330e65c","key":"ghost_foot","value":"<!-- You can safely delete this line if your theme does not require jQuery -->\n<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/0.0.1/prism.min.js\"></script>","type":"blog","created_at":1423424605735,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":21,"uuid":"6a1f07d7-fb81-446b-abd1-67ab8f1c1e0f","key":"labs","value":"{\"codeInjectionUI\":true}","type":"blog","created_at":1423424605735,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":22,"uuid":"e7331932-9f3f-4be1-9889-3b9556b79706","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"}]","type":"blog","created_at":1439166019587,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":23,"uuid":"93338de4-8aea-4514-8c13-a534c51a3850","key":"isPrivate","value":"false","type":"private","created_at":1439166052341,"created_by":1,"updated_at":1445185553173,"updated_by":1},{"id":24,"uuid":"2c5e14c2-5a77-40b9-a36d-02dfe3beca5d","key":"password","value":"null","type":"private","created_at":1439166052341,"created_by":1,"updated_at":1445185553188,"updated_by":1}],"tags":[{"id":1,"uuid":"70b998c8-bd9b-455d-9fa0-dee43d6e26a3","name":"Getting Started","slug":"getting-started","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392587733979,"created_by":1,"updated_at":1392587733979,"updated_by":1,"image":null,"hidden":0},{"id":2,"uuid":"c0268b8a-d140-4877-9a64-3b0b14159113","name":"SOA","slug":"soa","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392611121606,"created_by":1,"updated_at":1392611121606,"updated_by":1,"image":null,"hidden":0},{"id":3,"uuid":"6d2476bf-f0ea-4577-b5b2-50817349b7c0","name":"Service Oriented Architecture","slug":"service-oriented-architecture","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392611121608,"created_by":1,"updated_at":1392611121608,"updated_by":1,"image":null,"hidden":0},{"id":4,"uuid":"4ce7883f-7c5e-4e74-9886-93a6c3eb4d2f","name":"DevOps","slug":"devops","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392611830336,"created_by":1,"updated_at":1392611830336,"updated_by":1,"image":null,"hidden":0},{"id":5,"uuid":"155bf9e8-9463-4dd7-aed2-b33b20929475","name":"Culture","slug":"culture","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392611830337,"created_by":1,"updated_at":1392611830337,"updated_by":1,"image":null,"hidden":0},{"id":6,"uuid":"41561085-9def-46b2-b924-69277aa00d96","name":"recruiting","slug":"recruiting","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392619555149,"created_by":1,"updated_at":1392619555149,"updated_by":1,"image":null,"hidden":0},{"id":7,"uuid":"5a44b5f0-8a60-4055-8935-baa9afc8b96c","name":"You're doing it wrong","slug":"youre-doing-it-wrong","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392619555149,"created_by":1,"updated_at":1392619555149,"updated_by":1,"image":null,"hidden":0},{"id":8,"uuid":"075f6f3d-f863-48d3-a785-e95b726f08a9","name":"tag","slug":"post","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392619555150,"created_by":1,"updated_at":1441651718947,"updated_by":1,"image":null,"hidden":0},{"id":9,"uuid":"b4d6d35d-5f0d-471b-82f4-9ea386df2422","name":"culture","slug":"culture-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392619555150,"created_by":1,"updated_at":1392619555150,"updated_by":1,"image":null,"hidden":0},{"id":10,"uuid":"5c0f809c-84fc-4f47-b292-a38d1b9da2ab","name":"Android","slug":"android","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130566,"created_by":1,"updated_at":1392710130566,"updated_by":1,"image":null,"hidden":0},{"id":11,"uuid":"0be3e012-17db-4fa5-98bb-26b1550fb9e1","name":"Xamarin","slug":"xamarin","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130567,"created_by":1,"updated_at":1392710130567,"updated_by":1,"image":null,"hidden":0},{"id":12,"uuid":"155bded5-70c9-47e0-b0be-042ed02b1592","name":"Development","slug":"development","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130567,"created_by":1,"updated_at":1392710130567,"updated_by":1,"image":null,"hidden":0},{"id":13,"uuid":"481c0f28-22db-467c-8458-4391c7e427fe","name":"Review","slug":"review","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130568,"created_by":1,"updated_at":1392710130568,"updated_by":1,"image":null,"hidden":0},{"id":14,"uuid":"e636d8e0-e7df-44fc-b0cd-e9d0a0167efc","name":"c#","slug":"c","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130568,"created_by":1,"updated_at":1392710130568,"updated_by":1,"image":null,"hidden":0},{"id":15,"uuid":"75a57157-9a62-4199-9be0-8568269b3893","name":"Xamarin For Android","slug":"xamarin-for-android","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392710130568,"created_by":1,"updated_at":1392710130568,"updated_by":1,"image":null,"hidden":0},{"id":16,"uuid":"560a778c-db7b-4c40-a75a-65e16ffbcca0","name":"Testing","slug":"testing","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392962194493,"created_by":1,"updated_at":1392962194493,"updated_by":1,"image":null,"hidden":0},{"id":17,"uuid":"43f73f83-6168-4080-9def-670c33e2263b","name":"QA","slug":"qa","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392962194496,"created_by":1,"updated_at":1392962194496,"updated_by":1,"image":null,"hidden":0},{"id":18,"uuid":"5c8cf536-314a-4c11-b0cb-0d5bb5400339","name":"Jenkins","slug":"jenkins","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392962194496,"created_by":1,"updated_at":1392962194496,"updated_by":1,"image":null,"hidden":0},{"id":19,"uuid":"7588915c-8658-4f8a-acb6-197f9a7c5ace","name":"You","slug":"you","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1392962194497,"created_by":1,"updated_at":1392962194497,"updated_by":1,"image":null,"hidden":0},{"id":20,"uuid":"59825e63-9f1d-4669-8756-07c3f78fb101","name":"non-prod","slug":"non-prod","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393050943282,"created_by":1,"updated_at":1393050943282,"updated_by":1,"image":null,"hidden":0},{"id":21,"uuid":"71c751de-dc5d-46d0-8fb7-5191eea65231","name":"Continuous Improvement","slug":"continuous-improvement","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393050943283,"created_by":1,"updated_at":1393050943283,"updated_by":1,"image":null,"hidden":0},{"id":22,"uuid":"48d9cdbe-d562-428d-924b-9db8b1a05df6","name":"backbone.js","slug":"backbone-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393288149047,"created_by":1,"updated_at":1393288149047,"updated_by":1,"image":null,"hidden":0},{"id":23,"uuid":"f9f81c91-8275-4275-9fdd-858b96d262e4","name":"Javascript","slug":"javascript","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393288149048,"created_by":1,"updated_at":1393288149048,"updated_by":1,"image":null,"hidden":0},{"id":24,"uuid":"34b7ebe9-b7fd-4022-a687-352b30fee73e","name":"smartphone","slug":"smartphone","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393290642758,"created_by":1,"updated_at":1393290642758,"updated_by":1,"image":null,"hidden":0},{"id":25,"uuid":"58238138-065b-478a-8bbd-c84c2d4cf024","name":"phone","slug":"phone","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393290642758,"created_by":1,"updated_at":1393290642758,"updated_by":1,"image":null,"hidden":0},{"id":26,"uuid":"6dad2332-1717-4ad9-98c1-f618d0309002","name":"iPhone","slug":"iphone","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393290642759,"created_by":1,"updated_at":1393290642759,"updated_by":1,"image":null,"hidden":0},{"id":27,"uuid":"dd9e1bdb-8ceb-4c47-bbb1-66738969ec57","name":"ghost","slug":"ghost-post","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455236,"created_by":1,"updated_at":1393363455236,"updated_by":1,"image":null,"hidden":0},{"id":28,"uuid":"ce0d591b-6457-4e37-874e-2ba883c1d734","name":"node.js","slug":"node-js","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455236,"created_by":1,"updated_at":1393363455236,"updated_by":1,"image":null,"hidden":0},{"id":29,"uuid":"e3b8a9a8-26ac-42f7-b46a-2b1789fdf1a2","name":"linux","slug":"linux","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455237,"created_by":1,"updated_at":1393363455237,"updated_by":1,"image":null,"hidden":0},{"id":30,"uuid":"df6cef9f-ddf1-4007-9acc-1e638b2cdefa","name":"robots.txt","slug":"robots-txt","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455237,"created_by":1,"updated_at":1393363455237,"updated_by":1,"image":null,"hidden":0},{"id":31,"uuid":"898b1206-e1e9-457f-a58f-fb30e7e1834a","name":"sitemap","slug":"sitemap","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455238,"created_by":1,"updated_at":1393363455238,"updated_by":1,"image":null,"hidden":0},{"id":32,"uuid":"817829a0-435f-4047-b42c-d64c0f111842","name":"googlebot","slug":"googlebot","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455238,"created_by":1,"updated_at":1393363455238,"updated_by":1,"image":null,"hidden":0},{"id":33,"uuid":"3baa93ae-498d-4c18-8701-bc6d70e6fc77","name":"webmaster tools","slug":"webmaster-tools","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393363455238,"created_by":1,"updated_at":1393363455238,"updated_by":1,"image":null,"hidden":0},{"id":34,"uuid":"1a74d7f0-8ea5-40c2-8028-025b60a6f4dd","name":"HowTo","slug":"howto","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393721331517,"created_by":1,"updated_at":1393721331517,"updated_by":1,"image":null,"hidden":0},{"id":35,"uuid":"b7a8267d-fd09-4a16-8b10-fe2f8e33e99e","name":"Tutorial","slug":"tutorial","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393721344199,"created_by":1,"updated_at":1393721344199,"updated_by":1,"image":null,"hidden":0},{"id":36,"uuid":"1ba7ab97-f71b-46e3-80f9-85eac79a3cd9","name":"nodeBB","slug":"nodebb","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393721389234,"created_by":1,"updated_at":1393721389234,"updated_by":1,"image":null,"hidden":0},{"id":37,"uuid":"d3a6df03-0f1f-4f32-a5a7-2974c16df881","name":"CentOS","slug":"centos","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393721389235,"created_by":1,"updated_at":1393721389235,"updated_by":1,"image":null,"hidden":0},{"id":38,"uuid":"933b5c3c-0bdf-43e0-a65a-c44f282c9741","name":"JavaScript","slug":"javascript-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393721389235,"created_by":1,"updated_at":1393721389235,"updated_by":1,"image":null,"hidden":0},{"id":39,"uuid":"28d12e96-726e-48a0-bdd8-fb2ac6b80406","name":"feedback","slug":"feedback","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1393795740188,"created_by":1,"updated_at":1393795740188,"updated_by":1,"image":null,"hidden":0},{"id":40,"uuid":"4a65c15f-d304-4c3a-bdcc-1c31feecde7a","name":"client side","slug":"client-side","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1395273933828,"created_by":1,"updated_at":1395273933828,"updated_by":1,"image":null,"hidden":0},{"id":41,"uuid":"48a9116d-e930-44ff-83ca-cffbaa0ed43f","name":"error handling","slug":"error-handling","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1395273933829,"created_by":1,"updated_at":1395273933829,"updated_by":1,"image":null,"hidden":0},{"id":42,"uuid":"ec0a6165-deeb-4055-bfb2-2fd7e9ad5175","name":"Nancyfx","slug":"nancyfx","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1395555180201,"created_by":1,"updated_at":1395555180201,"updated_by":1,"image":null,"hidden":0},{"id":43,"uuid":"dbfe426c-41d0-453a-b50f-973bfd8f7ff4","name":"SquishIt","slug":"squishit","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1395555180202,"created_by":1,"updated_at":1395555180202,"updated_by":1,"image":null,"hidden":0},{"id":44,"uuid":"a6c77e45-522d-4a59-9a4b-77a3610560e1","name":"css","slug":"css","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1395555180202,"created_by":1,"updated_at":1395555180202,"updated_by":1,"image":null,"hidden":0},{"id":45,"uuid":"aebc9673-7be7-46a6-baa6-672db35aa3e0","name":"Nancy","slug":"nancy","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1396315412613,"created_by":1,"updated_at":1396315412613,"updated_by":1,"image":null,"hidden":0},{"id":46,"uuid":"773b41d0-a727-4d3c-94e7-8713a72a5f18","name":".net","slug":"-net","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1397096479061,"created_by":1,"updated_at":1397096479061,"updated_by":1,"image":null,"hidden":0},{"id":47,"uuid":"9c5c779d-bbd8-4657-8717-2d7b1bb1111a","name":"Must Have Tool","slug":"must-have-tool","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1397530786366,"created_by":1,"updated_at":1397530786366,"updated_by":1,"image":null,"hidden":0},{"id":48,"uuid":"a1d3c65b-1490-48cb-96ec-b0c248f3491c","name":"reivew","slug":"reivew","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1397530786367,"created_by":1,"updated_at":1397530786367,"updated_by":1,"image":null,"hidden":0},{"id":49,"uuid":"02d9ad11-cc95-4b9a-a6c7-e69e9f7a4534","name":"tools","slug":"tools","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1397530786367,"created_by":1,"updated_at":1397530786367,"updated_by":1,"image":null,"hidden":0},{"id":50,"uuid":"ba00602f-87b9-4066-a75f-e9de062e934e","name":"review","slug":"review-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1397643763069,"created_by":1,"updated_at":1397643763069,"updated_by":1,"image":null,"hidden":0},{"id":51,"uuid":"81125f09-701f-4f53-a5d5-f90fc1991c9d","name":"netbooks","slug":"netbooks","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1398801601534,"created_by":1,"updated_at":1398801601534,"updated_by":1,"image":null,"hidden":0},{"id":52,"uuid":"e98a355e-d051-43fd-b5e6-62da7bd320c6","name":"ChromeOS","slug":"chromeos","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1398801601535,"created_by":1,"updated_at":1398801601535,"updated_by":1,"image":null,"hidden":0},{"id":53,"uuid":"32900b73-d4c7-4944-90cc-68df282eec66","name":"mobility","slug":"mobility","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1398801601535,"created_by":1,"updated_at":1398801601535,"updated_by":1,"image":null,"hidden":0},{"id":54,"uuid":"ec281ad2-9f6c-477b-a301-9e8bb564a117","name":"Monitorama","slug":"monitorama","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1399386082176,"created_by":1,"updated_at":1399386082176,"updated_by":1,"image":null,"hidden":0},{"id":55,"uuid":"6f69457e-86c2-420a-af87-c42d6f470c89","name":"Conference","slug":"conference","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1399386082177,"created_by":1,"updated_at":1399386082177,"updated_by":1,"image":null,"hidden":0},{"id":56,"uuid":"cfe00fa1-012c-48bb-ac24-1e6c371e3305","name":"Diversity","slug":"diversity","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1399386082177,"created_by":1,"updated_at":1399386082177,"updated_by":1,"image":null,"hidden":0},{"id":57,"uuid":"09ed259b-bcbe-48a5-8ef9-14860740938a","name":"wtf","slug":"wtf","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1403998077861,"created_by":1,"updated_at":1403998077861,"updated_by":1,"image":null,"hidden":0},{"id":58,"uuid":"586e54a5-fef9-40b1-a666-5418d5ca3231","name":"Excel","slug":"excel","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1403998077861,"created_by":1,"updated_at":1403998077861,"updated_by":1,"image":null,"hidden":0},{"id":59,"uuid":"14386074-9492-4c23-b55d-b148ad971033","name":"Office Interop","slug":"office-interop","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1403998077861,"created_by":1,"updated_at":1403998077861,"updated_by":1,"image":null,"hidden":0},{"id":60,"uuid":"ca2828a6-7ca9-4680-bdf0-7fec72001b14","name":"generics","slug":"generics","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1404635452509,"created_by":1,"updated_at":1404635452509,"updated_by":1,"image":null,"hidden":0},{"id":61,"uuid":"9cbf6ef2-2fb0-4898-9a2e-d740cdc4854a","name":"mono","slug":"mono","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1415086077805,"created_by":1,"updated_at":1415086077805,"updated_by":1,"image":null,"hidden":0},{"id":62,"uuid":"83690eb1-36c3-4d91-8550-6f46d17a022c","name":"entity framework","slug":"entity-framework","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423425570320,"created_by":1,"updated_at":1423425570320,"updated_by":1,"image":null,"hidden":0},{"id":63,"uuid":"6341cbad-e346-42b3-bd67-459ef6e60a62","name":"asp.net","slug":"asp-net","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1423425570332,"created_by":1,"updated_at":1423425570332,"updated_by":1,"image":null,"hidden":0},{"id":64,"uuid":"17c09c7b-c70a-43fc-a063-51d429051105","name":"windows","slug":"windows","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1424171757666,"created_by":1,"updated_at":1424171757666,"updated_by":1,"image":null,"hidden":0},{"id":65,"uuid":"cb89ba08-201d-4ecb-a6b7-dc88b88bb1e5","name":".n","slug":"-n","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1424171953335,"created_by":1,"updated_at":1424171953335,"updated_by":1,"image":null,"hidden":0},{"id":66,"uuid":"b836acf2-1df8-499b-9dd6-1b6466f4a2eb","name":"IIS","slug":"iis","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1426453469773,"created_by":1,"updated_at":1426453469773,"updated_by":1,"image":null,"hidden":0},{"id":67,"uuid":"0ad74e92-ddb8-47c7-b35b-3f5bbfc6d4df","name":"OWIN","slug":"owin","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1426453469789,"created_by":1,"updated_at":1426453469789,"updated_by":1,"image":null,"hidden":0},{"id":68,"uuid":"531f5d4e-ade4-4fb8-a0ac-c56a846a8bd5","name":"grunt","slug":"grunt","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1427166026298,"created_by":1,"updated_at":1427166026298,"updated_by":1,"image":null,"hidden":0},{"id":69,"uuid":"9f3577ec-4d6a-4f3f-ae2b-76e9c9289787","name":"bower","slug":"bower","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1427166026310,"created_by":1,"updated_at":1427166026310,"updated_by":1,"image":null,"hidden":0},{"id":70,"uuid":"6dab3d97-05a3-44a9-9bb1-78f4ae1a094d","name":"package management","slug":"package-management","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1427166026318,"created_by":1,"updated_at":1427166026318,"updated_by":1,"image":null,"hidden":0},{"id":71,"uuid":"cc9998cb-edeb-4037-918f-edfddb3a15d6","name":"msbuild","slug":"msbuild","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1427166026334,"created_by":1,"updated_at":1427166026334,"updated_by":1,"image":null,"hidden":0},{"id":72,"uuid":"5ea8fa1b-dd3d-463c-84ea-e61458ffddd7","name":"gratipay","slug":"gratipay","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1428176679180,"created_by":1,"updated_at":1428176679180,"updated_by":1,"image":null,"hidden":0},{"id":73,"uuid":"d003927b-6d27-4dc3-b661-895023e4a4ea","name":"git","slug":"git","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1436665849891,"created_by":1,"updated_at":1436665849891,"updated_by":1,"image":null,"hidden":0},{"id":74,"uuid":"b75dc1a8-c060-4baa-b887-21a1f1bc3767","name":"bitbucket","slug":"bitbucket","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1436665862464,"created_by":1,"updated_at":1436665862464,"updated_by":1,"image":null,"hidden":0},{"id":75,"uuid":"4f3b353c-4bfa-4077-925e-910b84f09f19","name":"visual studio","slug":"visual-studio","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439134183856,"created_by":1,"updated_at":1439134183856,"updated_by":1,"image":null,"hidden":0},{"id":76,"uuid":"581b79d1-c5fe-4ded-ba1e-84c632e90cfd","name":"productivity","slug":"productivity","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439134183871,"created_by":1,"updated_at":1439134183871,"updated_by":1,"image":null,"hidden":0},{"id":77,"uuid":"bc37cf25-6ed7-4a07-9dc7-99dd115fefb9","name":"cloud providers","slug":"cloud-providers","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439244518281,"created_by":1,"updated_at":1439244518281,"updated_by":1,"image":null,"hidden":0},{"id":78,"uuid":"9d5ad044-05f0-486f-9ffd-688a0df7d547","name":"linode","slug":"linode","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439244518515,"created_by":1,"updated_at":1439244518515,"updated_by":1,"image":null,"hidden":0},{"id":79,"uuid":"ac72d936-2255-4c72-a28b-489478157438","name":"azure","slug":"azure","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439247199860,"created_by":1,"updated_at":1439247199860,"updated_by":1,"image":null,"hidden":0},{"id":80,"uuid":"e27803f5-e8a4-485a-b3cb-9e49fd76f924","name":"aws","slug":"aws","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1439247200260,"created_by":1,"updated_at":1439247200260,"updated_by":1,"image":null,"hidden":0},{"id":81,"uuid":"db724026-7254-4984-b25f-9b354a51353c","name":"Architecture","slug":"architecture","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1441459954429,"created_by":1,"updated_at":1441459954429,"updated_by":1,"image":null,"hidden":0},{"id":82,"uuid":"6e1bc141-15b2-454c-b04e-4f9125f6c445","name":"MVC","slug":"mvc","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1442172336017,"created_by":1,"updated_at":1442172336017,"updated_by":1,"image":null,"hidden":0},{"id":83,"uuid":"35df97ce-d95d-4a99-b643-55117c36968a","name":"performance","slug":"performance","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1442468684556,"created_by":1,"updated_at":1442468684556,"updated_by":1,"image":null,"hidden":0},{"id":84,"uuid":"d560198e-1341-4bbe-aa17-570f64a78673","name":"c++","slug":"c-2","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1443976564422,"created_by":1,"updated_at":1443976564422,"updated_by":1,"image":null,"hidden":0},{"id":85,"uuid":"3935ac6c-cd82-417a-aac0-252a0f8d5c39","name":"things I avoid","slug":"things-i-avoid","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1443976586479,"created_by":1,"updated_at":1443976586479,"updated_by":1,"image":null,"hidden":0},{"id":86,"uuid":"a08df618-4f72-42eb-b13e-0e3c7a2efd67","name":"asp.net 5","slug":"asp-net-5","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1445180337070,"created_by":1,"updated_at":1445180337070,"updated_by":1,"image":null,"hidden":0},{"id":87,"uuid":"60c95c0c-6a0e-47a6-937b-493cec325bb6","name":"logging","slug":"logging","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446385110014,"created_by":1,"updated_at":1446385110014,"updated_by":1,"image":null,"hidden":0},{"id":88,"uuid":"6db03a7b-a351-4107-a18f-5d46bca80372","name":"library","slug":"library","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446385110045,"created_by":1,"updated_at":1446385110045,"updated_by":1,"image":null,"hidden":0},{"id":89,"uuid":"6705f80b-f73e-402f-8f0e-474b60142099","name":"elasticsearch","slug":"elasticsearch","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446861427684,"created_by":1,"updated_at":1446861427684,"updated_by":1,"image":null,"hidden":0},{"id":90,"uuid":"cb2b4a80-dbd5-4473-96ab-7e801a671d30","name":"nuget","slug":"nuget","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446861427716,"created_by":1,"updated_at":1446861427716,"updated_by":1,"image":null,"hidden":0},{"id":91,"uuid":"984aaf93-b51a-48a0-86b6-c4b507ccafa0","name":"open source","slug":"open-source","description":null,"parent_id":null,"meta_title":null,"meta_description":null,"created_at":1446861427731,"created_by":1,"updated_at":1446861427731,"updated_by":1,"image":null,"hidden":0}],"posts_tags":[{"id":2,"post_id":2,"tag_id":2,"sort_order":0},{"id":3,"post_id":2,"tag_id":3,"sort_order":1},{"id":4,"post_id":2,"tag_id":4,"sort_order":2},{"id":5,"post_id":2,"tag_id":5,"sort_order":3},{"id":6,"post_id":5,"tag_id":6,"sort_order":0},{"id":7,"post_id":5,"tag_id":7,"sort_order":1},{"id":9,"post_id":5,"tag_id":9,"sort_order":2},{"id":10,"post_id":6,"tag_id":10,"sort_order":0},{"id":11,"post_id":6,"tag_id":11,"sort_order":1},{"id":12,"post_id":6,"tag_id":12,"sort_order":2},{"id":13,"post_id":6,"tag_id":13,"sort_order":3},{"id":14,"post_id":6,"tag_id":14,"sort_order":4},{"id":15,"post_id":6,"tag_id":15,"sort_order":5},{"id":16,"post_id":7,"tag_id":12,"sort_order":0},{"id":17,"post_id":7,"tag_id":13,"sort_order":1},{"id":18,"post_id":7,"tag_id":14,"sort_order":2},{"id":19,"post_id":7,"tag_id":15,"sort_order":3},{"id":20,"post_id":7,"tag_id":11,"sort_order":4},{"id":21,"post_id":8,"tag_id":11,"sort_order":0},{"id":22,"post_id":8,"tag_id":12,"sort_order":1},{"id":23,"post_id":8,"tag_id":13,"sort_order":2},{"id":24,"post_id":8,"tag_id":14,"sort_order":3},{"id":25,"post_id":8,"tag_id":15,"sort_order":4},{"id":26,"post_id":9,"tag_id":11,"sort_order":0},{"id":27,"post_id":9,"tag_id":12,"sort_order":1},{"id":28,"post_id":9,"tag_id":13,"sort_order":2},{"id":29,"post_id":9,"tag_id":14,"sort_order":3},{"id":30,"post_id":9,"tag_id":15,"sort_order":4},{"id":35,"post_id":11,"tag_id":7,"sort_order":0},{"id":36,"post_id":11,"tag_id":9,"sort_order":1},{"id":37,"post_id":11,"tag_id":16,"sort_order":2},{"id":38,"post_id":11,"tag_id":20,"sort_order":3},{"id":39,"post_id":11,"tag_id":21,"sort_order":4},{"id":40,"post_id":13,"tag_id":12,"sort_order":0},{"id":41,"post_id":13,"tag_id":22,"sort_order":1},{"id":42,"post_id":13,"tag_id":23,"sort_order":2},{"id":43,"post_id":15,"tag_id":10,"sort_order":0},{"id":44,"post_id":15,"tag_id":24,"sort_order":1},{"id":45,"post_id":15,"tag_id":25,"sort_order":2},{"id":46,"post_id":15,"tag_id":26,"sort_order":3},{"id":47,"post_id":16,"tag_id":27,"sort_order":0},{"id":48,"post_id":16,"tag_id":28,"sort_order":1},{"id":49,"post_id":16,"tag_id":29,"sort_order":2},{"id":50,"post_id":16,"tag_id":30,"sort_order":3},{"id":51,"post_id":16,"tag_id":31,"sort_order":4},{"id":52,"post_id":16,"tag_id":32,"sort_order":5},{"id":53,"post_id":16,"tag_id":33,"sort_order":6},{"id":55,"post_id":16,"tag_id":35,"sort_order":7},{"id":56,"post_id":13,"tag_id":35,"sort_order":3},{"id":57,"post_id":18,"tag_id":28,"sort_order":0},{"id":58,"post_id":18,"tag_id":35,"sort_order":1},{"id":59,"post_id":18,"tag_id":36,"sort_order":2},{"id":60,"post_id":18,"tag_id":37,"sort_order":3},{"id":61,"post_id":18,"tag_id":38,"sort_order":4},{"id":62,"post_id":14,"tag_id":9,"sort_order":0},{"id":63,"post_id":14,"tag_id":21,"sort_order":1},{"id":64,"post_id":14,"tag_id":39,"sort_order":2},{"id":65,"post_id":19,"tag_id":9,"sort_order":0},{"id":66,"post_id":19,"tag_id":21,"sort_order":1},{"id":67,"post_id":19,"tag_id":39,"sort_order":2},{"id":68,"post_id":20,"tag_id":11,"sort_order":0},{"id":69,"post_id":20,"tag_id":14,"sort_order":1},{"id":70,"post_id":20,"tag_id":15,"sort_order":2},{"id":71,"post_id":21,"tag_id":11,"sort_order":0},{"id":72,"post_id":21,"tag_id":14,"sort_order":1},{"id":73,"post_id":21,"tag_id":15,"sort_order":2},{"id":74,"post_id":21,"tag_id":35,"sort_order":3},{"id":75,"post_id":22,"tag_id":11,"sort_order":0},{"id":76,"post_id":22,"tag_id":14,"sort_order":1},{"id":77,"post_id":22,"tag_id":15,"sort_order":2},{"id":78,"post_id":22,"tag_id":35,"sort_order":3},{"id":79,"post_id":23,"tag_id":9,"sort_order":0},{"id":80,"post_id":23,"tag_id":21,"sort_order":1},{"id":81,"post_id":24,"tag_id":38,"sort_order":0},{"id":82,"post_id":24,"tag_id":40,"sort_order":1},{"id":83,"post_id":24,"tag_id":41,"sort_order":2},{"id":84,"post_id":25,"tag_id":14,"sort_order":0},{"id":85,"post_id":25,"tag_id":35,"sort_order":1},{"id":86,"post_id":25,"tag_id":38,"sort_order":2},{"id":87,"post_id":25,"tag_id":42,"sort_order":3},{"id":88,"post_id":25,"tag_id":43,"sort_order":4},{"id":89,"post_id":25,"tag_id":44,"sort_order":5},{"id":90,"post_id":26,"tag_id":14,"sort_order":0},{"id":91,"post_id":26,"tag_id":35,"sort_order":1},{"id":92,"post_id":26,"tag_id":42,"sort_order":2},{"id":93,"post_id":26,"tag_id":45,"sort_order":3},{"id":94,"post_id":25,"tag_id":45,"sort_order":6},{"id":98,"post_id":28,"tag_id":14,"sort_order":0},{"id":99,"post_id":28,"tag_id":47,"sort_order":1},{"id":101,"post_id":28,"tag_id":49,"sort_order":2},{"id":102,"post_id":28,"tag_id":50,"sort_order":3},{"id":103,"post_id":29,"tag_id":51,"sort_order":0},{"id":104,"post_id":29,"tag_id":52,"sort_order":1},{"id":105,"post_id":29,"tag_id":53,"sort_order":2},{"id":106,"post_id":30,"tag_id":5,"sort_order":0},{"id":107,"post_id":30,"tag_id":54,"sort_order":1},{"id":108,"post_id":30,"tag_id":55,"sort_order":2},{"id":109,"post_id":30,"tag_id":56,"sort_order":3},{"id":110,"post_id":31,"tag_id":5,"sort_order":0},{"id":111,"post_id":31,"tag_id":54,"sort_order":1},{"id":112,"post_id":31,"tag_id":55,"sort_order":2},{"id":117,"post_id":34,"tag_id":35,"sort_order":0},{"id":118,"post_id":34,"tag_id":57,"sort_order":1},{"id":119,"post_id":34,"tag_id":58,"sort_order":2},{"id":120,"post_id":34,"tag_id":59,"sort_order":3},{"id":121,"post_id":35,"tag_id":14,"sort_order":0},{"id":122,"post_id":35,"tag_id":35,"sort_order":1},{"id":123,"post_id":35,"tag_id":60,"sort_order":2},{"id":124,"post_id":37,"tag_id":12,"sort_order":0},{"id":125,"post_id":37,"tag_id":14,"sort_order":1},{"id":126,"post_id":37,"tag_id":35,"sort_order":2},{"id":142,"post_id":40,"tag_id":14,"sort_order":0},{"id":143,"post_id":40,"tag_id":62,"sort_order":1},{"id":144,"post_id":40,"tag_id":63,"sort_order":2},{"id":199,"post_id":38,"tag_id":4,"sort_order":0},{"id":200,"post_id":38,"tag_id":12,"sort_order":1},{"id":201,"post_id":38,"tag_id":46,"sort_order":2},{"id":202,"post_id":38,"tag_id":64,"sort_order":3},{"id":206,"post_id":39,"tag_id":14,"sort_order":0},{"id":207,"post_id":39,"tag_id":29,"sort_order":1},{"id":208,"post_id":39,"tag_id":61,"sort_order":2},{"id":369,"post_id":41,"tag_id":42,"sort_order":0},{"id":370,"post_id":41,"tag_id":45,"sort_order":1},{"id":371,"post_id":41,"tag_id":66,"sort_order":2},{"id":372,"post_id":41,"tag_id":67,"sort_order":3},{"id":441,"post_id":43,"tag_id":68,"sort_order":0},{"id":442,"post_id":43,"tag_id":69,"sort_order":1},{"id":443,"post_id":43,"tag_id":70,"sort_order":2},{"id":444,"post_id":43,"tag_id":71,"sort_order":3},{"id":453,"post_id":44,"tag_id":27,"sort_order":0},{"id":454,"post_id":44,"tag_id":72,"sort_order":1},{"id":516,"post_id":45,"tag_id":73,"sort_order":0},{"id":517,"post_id":45,"tag_id":74,"sort_order":1},{"id":521,"post_id":27,"tag_id":14,"sort_order":0},{"id":522,"post_id":27,"tag_id":35,"sort_order":1},{"id":523,"post_id":27,"tag_id":46,"sort_order":2},{"id":542,"post_id":32,"tag_id":13,"sort_order":0},{"id":543,"post_id":32,"tag_id":14,"sort_order":1},{"id":544,"post_id":32,"tag_id":47,"sort_order":2},{"id":545,"post_id":32,"tag_id":49,"sort_order":3},{"id":552,"post_id":46,"tag_id":14,"sort_order":0},{"id":553,"post_id":46,"tag_id":75,"sort_order":1},{"id":554,"post_id":46,"tag_id":76,"sort_order":2},{"id":761,"post_id":47,"tag_id":77,"sort_order":0},{"id":762,"post_id":47,"tag_id":78,"sort_order":1},{"id":763,"post_id":47,"tag_id":79,"sort_order":2},{"id":764,"post_id":47,"tag_id":80,"sort_order":3},{"id":857,"post_id":48,"tag_id":28,"sort_order":0},{"id":858,"post_id":48,"tag_id":38,"sort_order":1},{"id":943,"post_id":49,"tag_id":14,"sort_order":0},{"id":944,"post_id":49,"tag_id":63,"sort_order":1},{"id":1048,"post_id":50,"tag_id":81,"sort_order":0},{"id":1049,"post_id":54,"tag_id":63,"sort_order":0},{"id":1050,"post_id":54,"tag_id":14,"sort_order":1},{"id":1051,"post_id":54,"tag_id":82,"sort_order":2},{"id":1052,"post_id":55,"tag_id":14,"sort_order":0},{"id":1053,"post_id":55,"tag_id":83,"sort_order":1},{"id":1054,"post_id":56,"tag_id":4,"sort_order":0},{"id":1055,"post_id":56,"tag_id":5,"sort_order":1},{"id":1056,"post_id":58,"tag_id":84,"sort_order":0},{"id":1057,"post_id":58,"tag_id":85,"sort_order":1},{"id":1058,"post_id":59,"tag_id":14,"sort_order":0},{"id":1059,"post_id":59,"tag_id":63,"sort_order":1},{"id":1060,"post_id":59,"tag_id":86,"sort_order":2},{"id":1061,"post_id":57,"tag_id":84,"sort_order":0},{"id":1062,"post_id":57,"tag_id":83,"sort_order":1},{"id":1063,"post_id":60,"tag_id":14,"sort_order":0},{"id":1064,"post_id":60,"tag_id":87,"sort_order":1},{"id":1065,"post_id":60,"tag_id":88,"sort_order":2},{"id":1066,"post_id":61,"tag_id":89,"sort_order":0},{"id":1067,"post_id":61,"tag_id":46,"sort_order":1},{"id":1068,"post_id":61,"tag_id":90,"sort_order":2},{"id":1069,"post_id":61,"tag_id":91,"sort_order":3},{"id":1070,"post_id":62,"tag_id":14,"sort_order":0},{"id":1071,"post_id":62,"tag_id":86,"sort_order":1},{"id":1072,"post_id":62,"tag_id":63,"sort_order":2},{"id":1073,"post_id":62,"tag_id":90,"sort_order":3},{"id":1074,"post_id":62,"tag_id":91,"sort_order":4},{"id":1075,"post_id":62,"tag_id":38,"sort_order":5}],"permissions_apps":[],"apps":[],"app_settings":[],"app_fields":[],"client_trusted_domains":[]}}]}